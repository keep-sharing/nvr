#ifndef _MS_MSG_H_
#define _MS_MSG_H_

#include "vapi/vapi.h"
#include "msdefs.h"
#include "msfs/msfs_disk.h"
#include "msfs/msfs_log.h"
#include "msfs/msfs_rec.h"
#include "mscrypt.h"
#include "msvapi.h"

enum RequestFlag {
    //<----operate---->
    REQUEST_FLAG_SET_DISLAYOUT = 1000,

    REQUEST_FLAG_SET_SCREEN = 1001,
    REQUEST_FLAG_SET_AUDIOPARAM = 1002,
    REQUEST_FLAG_SET_PIPMODE = 1003,
    REQUEST_FLAG_SET_ZOOMINMODE = 1004,
    REQUEST_FLAG_SET_CAMAPARAM = 1005,
    REQUEST_FLAG_SET_IMAGEPARAM = 1006,
    REQUEST_FLAG_SET_OSDPARAM = 1007,
    REQUEST_FALG_SET_AUDIOCHAN = 1008,
    REQUEST_FLAG_SET_SPOTCHAN = 1009,
    REQUEST_FLAG_PHOTO_PREVIEW = 1010,
    REQUEST_FLAG_PHOTO_DISPLAY = 1011,
    REQUEST_FLAG_PHOTO_EXIT = 1012,
    REQUEST_FLAG_CUT_MOSAIC = 1013,
    REQUEST_FLAG_SWITCH_SCREEN = 1014,
    REQUEST_FLAG_SET_SCREEN_END = 1015,
    REQUEST_FLAG_ENABLE_SCREEN  = 1016,
    REQUEST_FLAG_CLEAR_BUFFER   = 1017,
    REQUEST_FLAG_EXCHANGE_WINDOW = 1018,
    REQUEST_FLAG_SET_ASPECTRATIO = 1019,
    REQUEST_FLAG_SET_WIN_RATIO = 1020,
    REQUEST_FLAG_SET_LIVE_PLAYBACK = 1021,
    REQUEST_FLAG_SET_BACKUPMODE = 1022,
    REQUEST_FLAG_ENABLE_SCREEN_WEB  = 1023,

    //<----Liveview Label---->
    REQUEST_FLAG_GET_EXCEPTION  = 1024,
    REQUEST_FLAG_GET_EXCEPTION_STATUS  = 1025,
    REQUEST_FLAG_SET_REFRESH_LAYOUT = 1026,
    REQUEST_FLAG_SET_VIEW = 1027,
    REQUEST_FLAG_SMARTAI_LIVE_PLAYBACK = 1028,
    REQUEST_FLAG_SET_ALLWIN_RATIO = 1029,
    REQUEST_FLAG_SET_VAPI_FISHEYE_MODE = 1030,
    REQUEST_FLAG_UPDATE_FILTER  = 1031,
    REQUEST_FLAG_SET_DISPLAY_MODE = 1032,
    REQUEST_FLAG_NOTIFY_PCNT_RESET = 1033,


    //<----Playback Label---->
    REQUEST_FLAG_GET_PB_COMM_BASE = 1050,
    REQUEST_FLAG_REMOTE_PLAYBACK_PLAY = 1051,
    
    
    REQUEST_FLAG_PLAYBACK_LABEL = 1100,
    REQUEST_FLAG_PLAYBACK_LOCALENTER = 1101,
    REQUEST_FLAG_PLAYBACK_LOCALEXIT = 1102,
    REQUEST_FLAG_PLAYBACK_LOCAL = 1103,
    REQUEST_FLAG_PLAYBACK_STOP = 1104,
    REQUEST_FLAG_PLAYBACK_PAUSE = 1105,
    REQUEST_FLAG_PLAYBACK_RESUME = 1106,
    REQUEST_FLAG_PLAYBACK_STEP = 1107,
    REQUEST_FLAG_PLAYBACK_SPEED = 1108,
    REQUEST_FLAG_PLAYBACK_RES = 1109,
    REQUEST_FLAG_PLAYBACK_SETMASK = 1110,
    REQUEST_FLAG_PLAYBACK_DELCH = 1111,
    REQUEST_FLAG_PLAYBACK_SPEED_BATCH = 1112,
    REQUEST_FLAG_PLAYBACK_STEP_BATCH = 1113,

    REQUEST_FLAG_SEARCH_COM_PLAYBACK_OPEN = 1114,
    REQUEST_FLAG_SEARCH_COM_PLAYBACK_CLOSE = 1115,
    REQUEST_FLAG_SEARCH_COM_PLAYBACK_PAGE = 1116,
    REQUEST_FLAG_PLAY_COM_PLAYBACK = 1117,
    REQUEST_FLAG_LOCK_COM_PLAYBACK = 1118,
    REQUEST_FLAG_STOP_COM_PLAYBACK = 1119,
    REQUEST_FLAG_PAUSE_COM_PLAYBACK = 1120,
    REQUEST_FLAG_RESTART_COM_PLAYBACK = 1121,

    REQUEST_FLAG_SEARCH_EVT_PLAYBACK_OPEN = 1122,
    REQUEST_FLAG_SEARCH_EVT_PLAYBACK_CLOSE = 1123,
    REQUEST_FLAG_SEARCH_EVT_PLAYBACK_PAGE = 1124,
    REQUEST_FLAG_PLAY_EVT_PLAYBACK = 1125,
    REQUEST_FLAG_LOCK_EVT_PLAYBACK = 1126,
    REQUEST_FLAG_STOP_EVT_PLAYBACK = 1127,
    REQUEST_FLAG_PAUSE_EVT_PLAYBACK = 1128,
    REQUEST_FLAG_RESTART_EVT_PLAYBACK = 1129,

    REQUEST_FLAG_SET_TEMP_TAGS_PLAYBACK = 1130,
    REQUEST_FLAG_GET_TEMP_TAGS_PLAYBACK = 1131,
    REQUEST_FLAG_EDIT_TEMP_TAGS_PLAYBACK = 1132,
    REQUEST_FLAG_REMOVE_TEMP_TAGS_PLAYBACK_BATCH = 1133,
    REQUEST_FLAG_REMOVE_TEMP_TAGS_PLAYBACK = 1134,
    REQUEST_FLAG_CLEAR_TEMP_TAGS_PLAYBACK = 1135,
    REQUEST_FLAG_SEARCH_TAGS_PLAYBACK_OPEN = 1136,
    REQUEST_FLAG_SEARCH_TAGS_PLAYBACK_CLOSE = 1137,
    REQUEST_FLAG_SEARCH_TAGS_PLAYBACK_PAGE = 1138,

    REQUEST_FLAG_SPEED_PLAYBACK = 1139,
    REQUEST_FLAG_BACKWARD_PLAYBACK = 1140,
    REQUEST_FLAG_FORWARD_PLAYBACK = 1141,
    REQUEST_FLAG_STEP_PLAYBACK = 1142,
    REQUEST_FLAG_SEEK_PLAYBACK = 1143,

    REQUEST_FLAG_START_ALL_PLAYBACK = 1144,
    REQUEST_FLAG_STOP_ALL_PLAYBACK = 1145,
    REQUEST_FLAG_PAUSE_ALL_PLAYBACK = 1146,
    REQUEST_FLAG_RESTART_ALL_PLAYBACK = 1147,
    REQUEST_FLAG_SEEK_ALL_PLAYBACK = 1148,
    REQUEST_FLAG_SPEED_ALL_PLAYBACK = 1149,
    REQUEST_FLAG_BACKWARD_ALL_PLAYBACK = 1150,
    REQUEST_FLAG_FORWARD_ALL_PLAYBACK = 1151,
    REQUEST_FLAG_STEP_ALL_PLAYBACK = 1152,
    REQUEST_FLAG_GET_PLAYBACK_REALTIME = 1153,
    REQUEST_FLAG_SET_PLAYBACK_SNAPSHOT = 1154,

    REQUEST_FLAG_EXPORT_COMMON_PLAYBACK = 1155,
    REQUEST_FLAG_STOP_EXPORT_COMMONM_PLAYBACK = 1156,

    REQUEST_FLAG_SEARCH_EVT_PLAYBACK_CANCEL = 1157,
    REQUEST_FLAG_SEARCH_TAG_PLAYBACK_CANCEL = 1158,

    REQUEST_FLAG_SEARCH_COM_REMOTEPB_OPEN = 1159,
    REQUEST_FLAG_SEARCH_COM_REMOTEPB_CLOSE = 1160,
    REQUEST_FLAG_SEARCH_COM_REMOTEPB_PAGE = 1161,
    REQUEST_FLAG_PLAY_COM_REMOTEPB = 1162,
    REQUEST_FLAG_LOCK_COM_REMOTEPB = 1163,
    REQUEST_FLAG_STOP_COM_REMOTEPB = 1164,
    REQUEST_FLAG_PAUSE_COM_REMOTEPB = 1165,
    REQUEST_FLAG_RESTART_COM_REMOTEPB = 1166,
    REQUEST_FLAG_SPEED_REMOTEPB = 1167,
    REQUEST_FLAG_BACKWARD_REMOTEPB = 1168,
    REQUEST_FLAG_FORWARD_REMOTEPB = 1169,
    REQUEST_FLAG_STEP_REMOTEPB = 1170,
    REQUEST_FLAG_SEEK_REMOTEPB = 1171,
    REQUEST_FLAG_GET_REMOTEPB_TIME = 1172,
    REQUEST_FLAG_DOWNLOAD_REMOTEPB = 1173,
    REQUEST_FLAG_CLOSE_ALL_PLAYER = 1174,
    REQUEST_FLAG_P2P_PB_STOP = 1175,
    REQUEST_FLAG_SET_TRANCODING = 1176,
    REQUEST_FLAG_GET_TRANCODING = 1177,
    REQUEST_FLAG_STOP_REMOTEPB = 1178,
    REQUEST_FLAG_SEARCH_TAGS_PLAYBACK_OPEN_REMOTE = 1179,
    REQUEST_FLAG_SEARCH_TAGS_PLAYBACK_CLOSE_REMOTE = 1180,
    REQUEST_FLAG_SEARCH_TAGS_PLAYBACK_PAGE_REMOTE = 1181,
    REQUEST_FLAG_PB_INDENTATION_DIAGRAM = 1182,

    REQUEST_FLAG_SEARCH_SPLIT_PLAYBACK_RANGE = 1183,
    REQUEST_FLAG_SEARCH_SPLIT_PLAYBACK_OPEN = 1184,
    REQUEST_FLAG_SEARCH_SPLIT_PLAYBACK_CLOSE = 1185,
    REQUEST_FLAG_SEARCH_SPLIT_PLAYBACK_PAGE = 1186,
    REQUEST_FLAG_START_SPLIT_PLAYBACK = 1189,
    REQUEST_FLAG_STOP_SPLIT_PLAYBACK = 1190,
    REQUEST_FLAG_PAUSE_SPLIT_PLAYBACK = 1191,
    REQUEST_FLAG_RESTART_SPLIT_PLAYBACK = 1192,
    REQUEST_FLAG_SEEK_SPLIT_PLAYBACK = 1193,
    REQUEST_FLAG_SPEED_SPLIT_PLAYBACK = 1194,
    REQUEST_FLAG_BACKWARD_SPLIT_PLAYBACK = 1195,
    REQUEST_FLAG_FORWARD_SPLIT_PLAYBACK = 1196,
    REQUEST_FLAG_STEP_SPLIT_PLAYBACK = 1197,
    REQUEST_FLAG_GET_SPLIT_PLAYBACK_TIME = 1198,
    REQUEST_FLAG_SNAPHOST_SPLIT_PLAYBACK = 1199,

    //<----Camera Label---->
    REQUEST_FLAG_CAMERA_LABEL = 1200,
    REQUEST_FLAG_ADDNEW_IPC = 1201,
    REQUEST_FLAG_REMOVE_IPC = 1202,
    REQUEST_FLAG_UPDATE_IPC = 1203,
    REQUEST_FLAG_REMOTE_VIEW = 1204,
    REQUEST_FLAG_SET_CAMERA_IMAGEPARAM = 1205,
    REQUEST_FLAG_SET_OTHER_POE = 1206,
    REQUEST_FLAG_GET_IPC_LPR_WILDCARDS = 1207,
    REQUEST_FLAG_SET_IPC_LPR_WILDCARDS = 1208,
    REQUEST_FLAG_GET_IPC_VCA_LINECROSSING2 = 1209,
    REQUEST_FLAG_SET_IPC_VCA_LINECROSSING2 = 1210,
    REQUEST_FLAG_GET_VAC_SETTINGS2 = 1211,
    REQUEST_FLAG_SET_VAC_SETTINGS2 = 1212,
    REQUEST_FLAG_GET_IPC_WATERMARK = 1213,
    REQUEST_FLAG_SET_IPC_WATERMARK = 1214,
    REQUEST_FLAG_GET_IPC_DIGITPOS_ZOOM = 1215,
    REQUEST_FLAG_SET_IPC_WATERMARK_BATCH = 1216,
    REQUEST_FLAG_GET_IPC_EVENT_STREAM_INFO = 1217,
    REQUEST_FLAG_SET_IPC_EVENT_STREAM_INFO = 1218,
    REQUEST_FLAG_GET_IPC_LPR_NIGHT_MODE = 1219,
    REQUEST_FLAG_GET_IPC_REGIONAL_PEOPLE = 1220,
    REQUEST_FLAG_SET_IPC_REGIONAL_PEOPLE = 1221,
    REQUEST_FLAG_GET_IPC_PEOPLE_REPORT = 1222,
    REQUEST_FLAG_GET_REGIONAL_DETECT_DATA = 1223,
    REQUEST_FLAG_UPDATE_REGIONAL_ACTION = 1224,
    REQUEST_FLAG_UPDATE_IPC_BATCH = 1225,

    //<----Camera  PTZ Label---->
    REQUEST_FLAG_PTZ_OVF_INIT = 1250,
    REQUEST_FLAG_PTZ_ACTION = 1251,
    REQUEST_FLAG_PTZ_SET_SERIAL_PORT = 1252,
    REQUEST_FLAG_PTZ_PRESET_ACTION = 1253,
    REQUEST_FLAG_PTZ_TRACK_ACTION = 1254,
    REQUEST_FLAG_PTZ_TOUR_ADD = 1255,
    REQUEST_FLAG_PTZ_TOUR_DELETE = 1256,
    REQUEST_FLAG_PTZ_TOUR_CLEAR = 1257,
    REQUEST_FLAG_PTZ_TOUR_UP = 1258,
    REQUEST_FLAG_PTZ_TOUR_DOWN = 1259,
    REQUEST_FLAG_PTZ_TOUR_RUN = 1260,
    REQUEST_FLAG_PTZ_TOUR_STOP = 1261,
    REQUEST_FLAG_PTZ_SUPPORT = 1262,
    REQUEST_FLAG_GET_PTZ_PRESET = 1263,
    REQUEST_FLAG_PTZ_SET = 1264,
    REQUEST_FLAG_PTZ_OVF_INFO = 1265,
    REQUEST_FLAG_PTZ_PRESET_CALL = 1266,
    REQUEST_FLAG_SET_PTZ_ZOOM = 1267,
    REQUEST_FLAG_PTZ_HTTP_FISH_INFO = 1268,
    REQUEST_FLAG_PTZ_FISH_TOUR = 1269,
    REQUEST_FLAG_GET_PTZ_BASIC = 1270,
    REQUEST_FLAG_SET_PTZ_BASIC = 1271,

    //<----Record Label---->
    REQUEST_FLAG_RECORD_LABEL = 1300,

    REQUEST_FLAG_SET_RECPARAM = 1301,
    REQUEST_FLAG_SET_RECSCHED = 1302,
    REQUEST_FLAG_RECORD_TASK = 1303,
    REQUEST_FLAG_SET_ALL_RECORD = 1304,
    REQUEST_FLAG_SET_RECORD_MARK = 1305,
    REQUEST_FLAG_LIVE_SNAPSHOT_PHOTO = 1306,
    REQUEST_FLAG_SET_RECORD_UPDATE = 1307,
    REQUEST_FLAG_EMERGENCY_REC_TASK = 1308,
    //REQUEST_FLAG_SET_REC_DISABLE = 1309,
    REQUEST_FLAG_SET_RECPARAM_BATCH = 1310,
    REQUEST_FLAG_SET_SNAPSHOT = 1311,
    REQUEST_FLAG_SET_SNAPSHOT_SCHE = 1312,
    REQUEST_FLAG_SET_ALL_SNAPSHOT = 1313,
    REQUEST_FLAG_GET_SNAPSHOT = 1314,
    REQUEST_FLAG_GET_SNAPSHOT_SCHE = 1315,
    REQUEST_FLAG_SET_ESATA_AUTO_BACKUP = 1316,
    REQUEST_FLAG_GET_ESATA_BACKUP_STATUS = 1317,
    REQUEST_FLAG_GET_ESATA_AUTO_BACKUP = 1318,

    //<----Event Label---->
    REQUEST_FLAG_EVENT_LABEL = 1400,
    REQUEST_FLAG_SET_HOLIDAY = 1401,
    REQUEST_FLAG_SET_VIDEOLOSS = 1402,
    REQUEST_FLAG_SET_MOTION = 1403,
    REQUEST_FLAG_SET_ALARMIN = 1404,
    REQUEST_FLAG_SET_ALARMOUT = 1405,
    REQUEST_FLAG_SET_RECORDSCHED = 1406,
    REQUEST_FLAG_SET_RECORDMODE = 1407,
    REQUEST_FLAG_SET_RECORDMODES = 1408,
    REQUEST_FLAG_SET_ALARMOUT_ACT = 1409,
    REQUEST_FLAG_SET_MOTION_BATCH = 1410,
    REQUEST_FLAG_SET_RECORDSCHED_BATCH = 1411,
    REQUEST_FLAG_SET_SMART_EVENT = 1412,
    REQUEST_FLAG_SET_RECORDMODE_BATCH = 1413,
    REQUEST_FLAG_SET_VIDEOLOSS_BATCH = 1414,
    REQUEST_FLAG_SET_ALARMIN_BATCH = 1415,
    REQUEST_FLAG_SET_ANPR_EVENT = 1416,

    REQUEST_FLAG_SET_IPC_ALARMIN_EVENT = 1417,
    REQUEST_FLAG_SET_IPC_ALARMOUT_EVENT = 1418,
    REQUEST_FLAG_UPDATE_ACTION_ENABLE = 1419,
    REQUEST_FLAG_GET_POS_SETTING = 1420,
    REQUEST_FLAG_SET_POS_SETTING = 1421,
    REQUEST_FLAG_SET_POS_PORT = 1422,
    REQUEST_FLAG_SET_REPORT_AUTO_BACKUP_SETTINGS = 1423,
    REQUEST_FLAG_GET_REPORT_AUTO_BACKUP_SETTINGS = 1424,

    //<----Status Label---->
    REQUEST_FLAG_STATUS_LABEL = 1500,
    REQUEST_FLAG_SET_IPC_ENABLE = 1501,
    REQUEST_FLAG_GET_LPR_STATUS = 1502,

    //<----System Label---->
    REQUEST_FLAG_SYSTEM_LABEL = 1700,
    REQUEST_FLAG_SET_SYSTIME = 1701,
    REQUEST_FLAG_SET_NETWORK = 1702,
    REQUEST_FLAG_SYSTEM_REBOOT = 1703,
    REQUEST_FLAG_SYSTEM_SHUTDOWN = 1704,
    REQUEST_FLAG_SET_DEVICEID = 1705,
    REQUEST_FLAG_UPDATE_DISKMODE = 1706,
    REQUEST_FLAG_SMART_TEST_STOP = 1707,
    REQUEST_FLAG_BADBLOCKS_CANCEL = 1708,
    REQUEST_FLAG_BADBLOCKS_PAUSE = 1709,
    REQUEST_FLAG_BADBLOCKS_CONTINUE = 1710,
    REQUEST_FLAG_SYNC_IPC_TIME = 1711,
    REQUEST_FLAG_SET_NETWORK_RESTART = 1712,
    REQUEST_FLAG_UPGRADE_SYSTEM = 1713,
    REQUEST_FLAG_SET_SYSTIME_SDK = 1714,
    REQUEST_FLAG_CHECK_ONLINE_NVR = 1715,
    REQUEST_FLAG_GET_UPGRADE_IMAGE = 1716,
    REQUEST_FLAG_DEL_UPGRADE_IMAGE = 1717,
    REQUEST_FLAG_SET_AUTO_REBOOT = 1718,
    REQUEST_FLAG_GET_ONLINE_USER = 1719,
    REQUEST_FLAG_SET_ONLINE_USER = 1720,
    REQUEST_FLAG_UPGRADE_SYSTEM_INIT = 1721,
    REQUEST_FLAG_SET_ACCESS_FILTER = 1722,
    REQUEST_FLAG_GET_ACCESS_FILTER = 1723,
    REQUEST_FLAG_SET_DEFAULT_ROUTE = 1724,
    REQUEST_FLAG_GET_AUTO_REBOOT = 1725,
    REQUEST_FLAG_SET_ONVIF = 1726,
    REQUEST_FLAG_GET_NET_TEST_RES = 1727,
    REQUEST_FLAG_GET_NETWORK_MULTICAST = 1728,
    REQUEST_FLAG_SET_NETWORK_MULTICAST = 1729,
    REQUEST_FLAG_SET_ENVIRONMENT_INFO = 1730,
    REQUEST_FLAG_UPDATE_SNCODE = 1731,
    REQUEST_FLAG_GET_ONLINE_UPGRADE_INFO = 1732,

    //<----Web Label---->
    REQUEST_FLAG_WEB_LABEL = 1900,

    REQUEST_FLAG_REMOVE_REMOTELIVE = 1901,
    REQUEST_FLAG_REMOVE_ALL_REMOTELIVE = 1902,
    REQUEST_FLAG_REMOVE_REMOTEPB_STREAM = 1903,
    //<----CLI Label---->
    REQUEST_FLAG_CLI_EXIT = 2100,
    REQUEST_FLAG_CLI_ENTRANCE = 2101,
    /////////////////
    REQUEST_FLAG_SET_DISK_MAINTAINANCE = 2102,
    REQUEST_FLAG_WRITE_FRAMEBUFFER = 2103,
    REQUEST_FLAG_SET_TRIGGER_ALARMS = 2104,

    //////////////////////////////////////////////////////////////////
    /// sdk only
    REQUEST_FLAG_SET_NETWORK_PPPOE = 2200,
    REQUEST_FLAG_SET_NETWORK_DDNS = 2201,
    REQUEST_FLAG_SET_NETWORK_MAIL = 2202,
    REQUEST_FLAG_SET_NETWORK_MORE = 2203,
    REQUEST_FLAG_SET_ALARM_PUSH_ID = 2204,
    REQUEST_FLAG_ADDNEW_USER = 2205,
    REQUEST_FLAG_UPDATE_USER = 2206,
    REQUEST_FLAG_SET_ALARM_PUSH_INTERVAL = 2207,
    REQUEST_FLAG_ADD_ANDROID_PUSH_ACCOUNT = 2208,
    REQUEST_FLAG_DEL_ANDROID_PUSH_ACCOUNT = 2209,
    REQUEST_FLAG_GET_OSDPARAM = 2210,
    REQUEST_FLAG_GET_MAINTAIN_INFO = 2211,
    REQUEST_FLAG_GET_EXCEPT_INFO = 2212,
    REQUEST_FLAG_GET_ALL_IPC_INFO = 2213,
    REQUEST_FLAG_GET_ONE_IPC_INFO = 2214,
    REQUEST_FLAG_GET_RECORD_ADVANCED = 2215,
    REQUEST_FLAG_SET_RECORD_ADVANCED = 2216,
    REQUEST_FLAG_GET_RECORD_SCHEDULE = 2217,
    REQUEST_FLAG_GET_USER_MEMBER = 2218,
    REQUEST_FLAG_GET_USER_AUTH = 2219,
    REQUEST_FLAG_GET_USER_COUNT = 2220,
    REQUEST_FLAG_SET_ADD_USER = 2221,
    REQUEST_FLAG_SET_DEL_USER = 2222,
    REQUEST_FLAG_GET_SQA_LIST = 2223,
    REQUEST_FLAG_GET_SYSTEM_TIME = 2224,
    REQUEST_FLAG_GET_SYSTEM_STATUS = 2225,
    REQUEST_FLAG_GET_SDK_VERSION = 2226,
    REQUEST_FLAG_SET_SYSTEM_RESET = 2227,
    REQUEST_FLAG_GET_MOTION_EFFECTIVE_SCHE = 2228,
    REQUEST_FLAG_SET_MOTION_EFFECTIVE_SCHE = 2229,
    REQUEST_FLAG_GET_VCA_EFFECTIVE_SCHE = 2230,
    REQUEST_FLAG_SET_VCA_EFFECTIVE_SCHE = 2231,
    REQUEST_FLAG_GET_VCA_AUDIBLE_SCHE = 2232,
    REQUEST_FLAG_SET_VCA_AUDIBLE_SCHE = 2233,
    REQUEST_FLAG_GET_VCA_EMAIL_SCHE = 2234,
    REQUEST_FLAG_SET_VCA_EMAIL_SCHE = 2235,
    REQUEST_FLAG_GET_VCA_OTHERS = 2236,
    REQUEST_FLAG_SET_VCA_OTHERS = 2237,
    REQUEST_FLAG_GET_RECORD_SCHE = 2238,
    REQUEST_FLAG_SET_RECORD_SCHE = 2239,
    REQUEST_FLAG_GET_MOTION_SCHE = 2240,
    REQUEST_FLAG_SET_MOTION_SCHE = 2241,
    REQUEST_FLAG_GET_VIDEOLOSS_SCHE = 2242,
    REQUEST_FLAG_SET_VIDEOLOSS_SCHE = 2243,
    REQUEST_FLAG_GET_ALARMIN_SCHE = 2244,
    REQUEST_FLAG_SET_ALARMIN_SCHE = 2245,
    REQUEST_FLAG_GET_ALARMOUT_SCHE = 2246,
    REQUEST_FLAG_SET_ALARMOUT_SCHE = 2247,
    REQUEST_FLAG_GET_MOTION_AUDIBLE_SCHE = 2248,
    REQUEST_FLAG_SET_MOTION_AUDIBLE_SCHE = 2249,
    REQUEST_FLAG_GET_MOTION_EMAIL_SCHE = 2250,
    REQUEST_FLAG_SET_MOTION_EMAIL_SCHE = 2251,
    REQUEST_FLAG_GET_MOTION_OTHERS_SCHE = 2252,
    REQUEST_FLAG_SET_MOTION_OTHERS_SCHE = 2253,
    REQUEST_FLAG_GET_VIDEOLOSS_AUDIBLE_SCHE = 2254,
    REQUEST_FLAG_SET_VIDEOLOSS_AUDIBLE_SCHE = 2255,
    REQUEST_FLAG_GET_VIDEOLOSS_EMAIL_SCHE = 2256,
    REQUEST_FLAG_SET_VIDEOLOSS_EMAIL_SCHE = 2257,
    REQUEST_FLAG_SET_VIDEOLOSS_ALARMOUTPUT = 2258,
    REQUEST_FLAG_GET_ALARMIN_AUDIBLE_SCHE = 2259,
    REQUEST_FLAG_SET_ALARMIN_AUDIBLE_SCHE = 2260,
    REQUEST_FLAG_GET_ALARMIN_EMAIL_SCHE = 2261,
    REQUEST_FLAG_SET_ALARMIN_EMAIL_SCHE = 2262,
    REQUEST_FLAG_SET_ALARMIN_ALARMOUTPUT = 2263,
    REQUEST_FLAG_GET_ALARMIN_PTZ_SCHE = 2264,
    REQUEST_FLAG_SET_ALARMIN_PTZ_SCHE = 2265,
    REQUEST_FLAG_SET_ALARMIN_RECORD_SCHE = 2266,
    REQUEST_FLAG_SET_ADD_IPC_CHANNEL = 2267,
    REQUEST_FLAG_SET_MODIFY_IPC_CHANNEL = 2268,
    REQUEST_FLAG_SET_REMOVE_IPC_CHANNEL = 2269,
    REQUEST_FLAG_GET_CAMERA_PROTOCOL = 2270,
    REQUEST_FLAG_SET_POE_CONN_PASSWORD = 2271,
    REQUEST_FLAG_P2P_SEND_FIMAGE_INIT = 2272,
    REQUEST_FLAG_P2P_SEND_FIMAGE_DATA = 2273,
    REQUEST_FLAG_P2P_EXPORT_CONFIG = 2274,
    REQUEST_FLAG_P2P_IMPORT_CONFIG = 2275,
    REQUEST_FLAG_CHANGE_PASSWORD = 2276,//p2p set user
    REQUEST_FLAG_KEY_TOOL = 2277,
    REQUEST_FLAG_P2P_CREAT_CHAN = 2278,
    REQUEST_FLAG_P2P_CLOSE_CHAN = 2279,
    REQUEST_FLAG_SEARCH_NVR = 2280,
    REQUEST_FLAG_P2P_SET_USER = 2281,
    REQUEST_FLAG_P2P_GET_UPNP = 2282,
    REQUEST_FLAG_P2P_SET_UPNP = 2283,
    REQUEST_FLAG_QUERY_ANR = 2284,
    REQUEST_FLAG_SET_ANR_SUPPORT = 2285,
    REQUEST_FLAG_GET_ANR_SUPPORT = 2286,
    REQUEST_FLAG_P2P_CREAT_WRITE_CHAN = 2287,
    REQUEST_FLAG_P2P_CLOSE_WRITE_CHAN = 2288,
    REQUEST_FLAG_SET_ALARM_PUSH_NAME = 2289,

    REQUEST_FLAG_UPDATE_PEOPLECNT_SETTING = 2290,
    REQUEST_FLAG_SET_PEOPLECNT_DB_RESET = 2291,
    REQUEST_FLAG_SET_PEOPLECNT_LIVEVIEW_RESET = 2292,
    REQUEST_FLAG_UPDATE_PEOPLECNT_ACTION = 2293,
    REQUEST_FLAG_GET_PEOPLECNT_ACTION = 2294,
    REQUEST_FLAG_SET_PEOPLECNT_ACTION = 2295,
    REQUEST_FLAG_GET_PEOPLECNT_SETTINGS = 2296,
    REQUEST_FLAG_SET_PEOPLECNT_SETTINGS = 2297,
    REQUEST_FLAG_SET_PEOPLECNT_CACHETODB = 2298,
    /////////////////////////////////////////////////////s/////////////

    REQUEST_FLAG_P2P_UNIQUE_START = 2300,
    REQUEST_FLAG_P2P_PREVIEW_OPERATION = 2301,
    REQUEST_FLAG_P2P_UNBIND_IOT_DEVICE = 2302,

    REQUEST_FLAG_P2P_UNIQUE_END = 2400,
    REQUEST_FLAG_P2P_GET_COMMON_PARAMS = 2401,
    REQUEST_FLAG_P2P_UPLOAD_AUDIOFILE = 2402,


    REQUEST_FLAG_SET_PRIVACY_MASK_NOTIFYGUI = 2500,
    REQUEST_FLAG_SET_PRIVACY_MASK = 2501,
    REQUEST_FLAG_GET_PRIVACY_MASK = 2502,
    REQUEST_FLAG_GET_IPC_MODEL_TYPE = 2503,

    //poe power status
    REQUEST_FLAG_GET_POE_POWER_STATE = 2504,
    REQUEST_FLAG_GET_ALL_IPCTYPE = 2505,
    REQUEST_FLAG_GET_POE_STATE = 2506,
    REQUEST_FLAG_GET_SINGLE_IPCTYPE = 2507,
    REQUEST_FLAG_DELETE_PRIVACY_MASK = 2508,
    REQUEST_FLAG_SET_PRIVACY_MASK_BATCH = 2509,
    REQUEST_FLAG_GET_PUSH_MSG = 2510,
    REQUEST_FLAG_GET_ALARM_PUSH_MEM = 2511,
    REQUEST_FLAG_GET_PUSH_MSG_MEM = 2512,
    REQUEST_FLAG_DELETE_ALL_PRIVACY_MASK = 2513,

    REQUEST_FLAG_NEED_RESPONSE = 3000,

    //<----operate---->
    REQUEST_FLAG_SET_DISPARAM = 3001,
    REQUEST_FLAG_GET_IMAGEPARAM = 3002,
    REQUEST_FLAG_SNAPSHOT_SAVE = 3004,
    REQUEST_FLAG_TEST_IP_CONFLICT = 3005,
    REQUEST_FLAG_IP_CONFLICT_BY_DEV = 3006,
    REQUEST_FLAG_TEST_IP_CONFLICT_BATCH = 3007,
    REQUEST_FLAG_RESOLUTION_CHANGED = 3008,

    //failover
    REQUEST_FLAG_FAILOVER_SEARCH_NVR = 3010,
    REQUEST_FLAG_FAILOVER_UPDATE_MASTER = 3011,
    REQUEST_FLAG_FAILOVER_GET_MASTER_STATUS = 3012,
    REQUEST_FLAG_FAILOVER_GET_SLAVE_STATUS = 3013,
    REQUEST_FLAG_FAILOVER_CHANGE_USER_PWD = 3014,
    REQUEST_FLAG_FAILOVER_CHANGE_MODE = 3015,
    REQUEST_FLAG_FAILOVER_REMOVE_CAMS = 3016,
    REQUEST_FLAG_FAILOVER_ADD_CAMS = 3017,
    REQUEST_FLAG_FAILOVER_CHANGE_IP = 3023,

    //anpr
    REQUEST_FLAG_GET_LPR_LIST = 3024,
    REQUEST_FLAG_ADD_LPR_LIST = 3025,
    REQUEST_FLAG_DEL_LPR_LIST = 3026,
    REQUEST_FLAG_EDIT_LPR_LIST = 3027,
    REQUEST_FLAG_GET_LPR_MODE_INFO = 3028,
    REQUEST_FLAG_SET_LPR_MODE_INFO = 3029,

    //<----Playback Label---->
    REQUEST_FLAG_GET_PBDAYINFO = 3100,
    REQUEST_FLAG_GET_PBHOURINFO = 3101,
    REQUEST_FLAG_GET_PBPLAYTIME = 3102,
    REQUEST_FLAG_PLAYBACK_REMOTE = 3103,
    REQUEST_FLAG_PLAYBACK_JUMP = 3104,
    REQUEST_FLAG_PLAYBACK_SNAPSHOT = 3105,
    REQUEST_FLAG_PLAYBACK_SNAPSHOT_SAVE = 3106,
    REQUEST_FLAG_PLAYBACK_SINGLE_JUMP = 3107,
    REQUEST_FALG_PLAYBACK_SNAPSHOT_CANCEL = 3108,
    REQUEST_FLAG_PLAYBACK_TRANSPOND = 3109,
    REQUEST_FLAG_PLAYBACK_REMOTE_CHNS = 3114,
    REQUEST_FLAG_PLAYBACK_JUMP_BATCH = 3115,
    REQUEST_FLAG_GET_PBPLAYTIME_BATCH = 3116,

    //<----Camera Label---->
    REQUEST_FLAG_SEARCH_IPC = 3200,
    REQUEST_FLAG_GET_IPCLIST = 3201,
    REQUEST_FLAG_TEST_IPCCONNECT = 3202,
    REQUEST_FLAG_SET_IPCPARAM = 3203,
    REQUEST_FLAG_GET_IPCPARAM = 3204,
    REQUEST_FLAG_SET_IPCADDR = 3205,
    REQUEST_FLAG_GET_IPCMTMAP = 3206,
    REQUEST_FLAG_SET_IPCMTMAP = 3207,
    REQUEST_FLAG_GET_IPCMTSCE = 3208,
    REQUEST_FLAG_SET_IPCMTSCE = 3209,
    REQUEST_FLAG_OVF_SET_OSD = 3210,
    REQUEST_FLAG_OVF_GET_OSD = 3211,
    REQUEST_FLAG_OVF_ENABLE_MOT = 3212,
    REQUEST_FLAG_GET_IPCALARM = 3213,
    REQUEST_FLAG_SET_IPCALARM = 3214,
    REQUEST_FLAG_GET_IPCVOLUME = 3215,
    REQUEST_FLAG_SET_IPCVOLUME = 3216,
    REQUEST_FLAG_GET_IPC_DISCONNECT_NUM = 3217,
    REQUEST_FLAG_GET_IPC_CONNECT_STATE = 3218,
    REQUEST_FLAG_OVF_ENABLE_SUBSTREAM = 3219,
    REQUEST_FLAG_OVF_ENABLE_AUDIOALARM = 3220,
    REQUEST_FLAG_GET_IPCIMAGE_ENHANCEMENT = 3221,
    REQUEST_FLAG_SET_IPCIMAGE_ENHANCEMENT = 3222,
    REQUEST_FLAG_GET_IPCIMAGE_DISPLAY = 3223,
    REQUEST_FLAG_SET_IPCIMAGE_DISPLAY = 3224,
    REQUEST_FLAG_GET_IPC_COMMON_PARAM = 3225,
    REQUEST_FLAG_SET_IPC_COMMON_PARAM = 3226,
    REQUEST_FLAG_TRY_TEST_IPCCONNECT = 3227,
    REQUEST_FLAG_SET_IPCPARAM_BATCH = 3228,
    REQUEST_FLAG_SET_IPCADDR_BATCH = 3229,
    REQUEST_FLAG_GET_IPCADDR_BATCH = 3230,
    REQUEST_FLAG_SET_FISHEYE_MODE = 3231,
    REQUEST_FLAG_GET_FISHEYE_MODE = 3232,
    REQUEST_FLAG_GET_CHANNELS_STATE = 3233,
    REQUEST_FLAG_P2P_UPLOAD_SPEED = 3234,
    REQUEST_FLAG_SET_IPCMTMAP_BATCH = 3235,

    REQUEST_FLAG_GET_VCA_LICENSE = 3236,
    REQUEST_FLAG_GET_VCA_REGIONENTRANCE = 3237,
    REQUEST_FLAG_GET_VCA_REGIONEXIT = 3238,
    REQUEST_FLAG_GET_VCA_ADVANCEDMOTION = 3239,
    REQUEST_FLAG_GET_VCA_TAMPER = 3240,
    REQUEST_FLAG_GET_VCA_LINECROSSING = 3241,
    REQUEST_FLAG_GET_VCA_LOITERING = 3242,
    REQUEST_FLAG_GET_VCA_HUMANDETECTION = 3243,

    REQUEST_FLAG_SET_VCA_REGIONENTRANCE = 3244,
    REQUEST_FLAG_SET_VCA_REGIONEXIT = 3245,
    REQUEST_FLAG_SET_VCA_ADVANCEDMOTION = 3246,
    REQUEST_FLAG_SET_VCA_TAMPER = 3247,
    REQUEST_FLAG_SET_VCA_LINECROSSING = 3248,
    REQUEST_FLAG_SET_VCA_LOITERING = 3249,
    REQUEST_FLAG_SET_VCA_HUMANDETECTION = 3250,

    REQUEST_FLAG_SET_IPCMTMAP_EX = 3251,
    REQUEST_FLAG_SET_IPCMTSCE_EX = 3252,

    REQUEST_FLAG_GET_VCA_PEOPLE_COUNT = 3253,
    REQUEST_FLAG_SET_VCA_PEOPLE_COUNT = 3254,

    REQUEST_FLAG_SET_3D_PTZ_CTRL = 3255,
    REQUEST_FLAG_SET_PTZ_SPEED = 3256,
    REQUEST_FLAG_GET_VAC_SUPPORT = 3257,
    REQUEST_FLAG_SET_VAC_LISENCE = 3258,
    REQUEST_FLAG_GET_VAC_SETTINGS = 3259,
    REQUEST_FLAG_SET_VAC_SETTINGS = 3260,
    REQUEST_FLAG_SET_VAC_CLEANCOUNT = 3261,
    REQUEST_FLAG_GET_VAC_PERSONPOINT = 3262,
    REQUEST_FLAG_GET_VAC_SUPPORT_ALL = 3263,

    REQUEST_FLAG_GET_CAMERA_CHALLENGE = 3264,
    REQUEST_FLAG_MODIFY_POE_CAMERA_PWD = 3265,
    REQUEST_FLAG_GET_CAMERA_SDKVERSION = 3267,

    REQUEST_FLAG_GET_VCA_LEFTREMOVE = 3268,
    REQUEST_FLAG_SET_VCA_LEFTREMOVE = 3269,

    REQUEST_FLAG_SET_ROI = 3270,
    REQUEST_FLAG_GET_ROI = 3271,
    REQUEST_FLAG_SET_WHITE_BALANCE_SCHE = 3272,
    REQUEST_FLAG_GET_WHITE_BALANCE_SCHE = 3273,
    REQUEST_FLAG_SET_EXPOSURE_SCHE = 3274,
    REQUEST_FLAG_GET_EXPOSURE_SCHE = 3275,
    REQUEST_FLAG_SET_BWH_SCHE = 3276,
    REQUEST_FLAG_GET_BWH_SCHE = 3277,
    REQUEST_FLAG_GET_DAY_NIGHT_INFO = 3278,
    REQUEST_FLAG_SET_DAY_NIGHT_INFO = 3279,
    REQUEST_FLAG_SET_IPCIMAGE_ENHANCEMENT_BATCH = 3280,
    REQUEST_FLAG_SET_WHITE_BALANCE_SCHE_BATCH = 3281,
    REQUEST_FLAG_SET_EXPOSURE_SCHE_BATCH = 3282,
    REQUEST_FLAG_SET_BWH_SCHE_BATCH = 3283,
    REQUEST_FLAG_DELETE_ROI_AREA = 3284,
    REQUEST_FLAG_SET_SINGLE_BWH_SCHE = 3285,
    REQUEST_FLAG_SET_SINGLE_WHITE_BALANCE_SCHE = 3286,
    REQUEST_FLAG_SET_SINGLE_EXPOSURE_SCHE = 3287,
    REQUEST_FLAG_SET_ROI_BATCH = 3288,
    REQUEST_FLAG_GET_LPR_SETTINGS = 3289,
    REQUEST_FLAG_SET_LPR_SETTINGS = 3290,
    REQUEST_FLAG_GET_LPR_LICENSE = 3291,
    REQUEST_FLAG_SET_LPR_LICENSE = 3292,
    REQUEST_FLAG_GET_LPR_SUPPORT = 3293,

    REQUEST_FLAG_GET_AUTO_TRACKING = 3294,
    REQUEST_FLAG_SET_AUTO_TRACKING = 3295,

    REQUEST_FLAG_GET_IPC_ALARM_OUTPUT = 3296,
    REQUEST_FLAG_SET_IPC_ALARM_OUTPUT = 3297,

    REQUEST_FLAG_GET_IPC_ALARM_INPUT = 3298,
    REQUEST_FLAG_SET_IPC_ALARM_INPUT = 3299,

    //<----Status Label---->
    REQUEST_FLAG_GET_IPC_STATUS = 3300,
    REQUEST_FLAG_GET_NETWORK_INFO = 3301,
    REQUEST_FLAG_GET_NETWORK_SPEED = 3302,
    REQUEST_FLAG_GET_IOALARM_STATUS = 3303,
    REQUEST_FLAG_GET_IOSENSOR_STATUS = 3304,
    REQUEST_FLAG_GET_EVENT_STATUS = 3305,
    REQUEST_FLAG_GET_NETWORK_BANDWIDTH = 3306,
    REQUEST_FLAG_GET_MOTION_EVENT_STATUS = 3307,
    REQUEST_FLAG_GET_SYSTEM_RESOURCE = 3308,
    REQUEST_FLAG_GET_DDNS_STATUS = 3309,
    REQUEST_FLAG_DEAL_NO_REQS = 3310,
    REQUEST_FLAG_SET_RESET_TYPE = 3311,
    REQUEST_FLAG_CHECK_SQA_LOCK = 3312,
    REQUEST_FLAG_CHECKSQA_LOCK = 3313,

    REQUEST_FLAG_CREATE_CERT = 3316,
    REQUEST_FLAG_DELETE_CERT_REQ = 3317,
    REQUEST_FLAG_INSTALL_CERT = 3318,
    REQUEST_FLAG_UPDATE_CERT = 3319,
    REQUEST_FLAG_DELETE_CERT = 3320,
    REQUEST_FLAG_FORMAT_DISK_WEB = 3321,
    REQUEST_FLAG_UPDATE_HTTPS = 3322,
    REQUEST_FLAG_UPDATE_HTTPS_ENABLE = 3323,

    REQUEST_FLAG_SET_IPC_ALARM_OUTPUT_BATCH = 3324,
    REQUEST_FLAG_SET_IPC_ALARM_INPUT_BATCH = 3325,


    //<----Status Label End---->

    //<----Camera Label ---->
    REQUEST_FLAG_UPGRADE_IPC_IMAGE = 3350,
    REQUEST_FLAG_UPGRADE_IPC_IMAGE_STOP = 3351,
    REQUEST_FLAG_SET_IPC_ALARMOUT_STATE = 3352,
    REQUEST_FLAG_SET_PRIVACY_MASK_EDIT = 3353,
    REQUEST_FLAG_GET_AUTO_TRACK_POINT = 3354,
    REQUEST_FLAG_GET_ALARM_OUT_NAME = 3355,
    REQUEST_FLAG_CHECK_ONLINE_IPC = 3356,
    REQUEST_FLAG_SET_MANUAL_TRACKING = 3357,
    REQUEST_FLAG_GET_HEAT_MAP_SETTING = 3358,
    REQUEST_FLAG_SET_HEAT_MAP_SETTING = 3359,
    REQUEST_FLAG_SEARCH_HEAT_MAP_REPORT = 3360,
    REQUEST_FLAG_SET_IPC_PTZ_CONTROL = 3361,
    REQUEST_FLAG_GET_IPC_LED_PARAMS = 3362,
    REQUEST_FLAG_GET_IPC_LED_STATUS = 3363,
    REQUEST_FLAG_GET_IPC_SNAPHOST = 3364,
    REQUEST_FLAG_CHECK_ONLINE_IPC_BATCH = 3365,
    REQUEST_FLAG_SET_HEAT_MAP_SETTING_BATCH = 3366,
    REQUEST_FLAG_SET_MANUAL_TRACKING_REGION = 3367,
    REQUEST_FLAG_GET_ALARM_WHITE_LED = 3368,
    REQUEST_FLAG_SET_ALARM_WHITE_LED = 3369,
    REQUEST_FLAG_GET_IPC_AUTOIRIS_STATUS = 3370,
    REQUEST_FLAG_GET_IPC_AUDIO_INFO = 3371,
    REQUEST_FLAG_SET_IPC_AUDIO_INFO = 3372,
    REQUEST_FLAG_CHECK_IPC_FISHEYE_INFO = 3373,
    REQUEST_FLAG_SET_IPC_FISHEYE_INFO = 3374,
    REQUEST_FLAG_SET_AUTO_TRACKING_BATCH = 3375,
    REQUEST_FLAG_GET_IPC_SYSTEM_INFO = 3376,
    REQUEST_FLAG_GET_IPC_CUSTOM_PARAM = 3377,
    REQUEST_FLAG_GET_IPC_FRAME_RESOLUTION = 3378,
    REQUEST_FLAG_ONLINE_UPGRADE_CAMERA = 3379,
    REQUEST_FLAG_GET_FACE_CONFIG = 3380,
    REQUEST_FLAG_SET_FACE_CONFIG = 3381,
    REQUEST_FLAG_GET_FACE_SUPPORT = 3382,
    REQUEST_FLAG_SET_FACE_EVENT = 3383,
    REQUEST_FLAG_GET_AI_CONNECT_CNT = 3384,
    REQUEST_FLAG_REMOTE_UPGRADE_CAMERA_INIT = 3385,
    REQUEST_FLAG_REMOTE_UPGRADE_CAMERA_START = 3386,
    REQUEST_FLAG_GET_VAC_BASE_INFO = 3387,
    REQUEST_FLAG_GET_IMAGE_ENHANCEMENT_SCHEDULE = 3389,
    REQUEST_FLAG_ONLINE_UPGRADE_CAMERA_STOP = 3390,
    REQUEST_FLAG_GET_IPC_PEOPLECNT_LINECNT = 3391,
    REQUEST_FLAG_GET_HTTP_NOTIFICATION = 3392,
    REQUEST_FLAG_SET_HTTP_NOTIFICATION = 3393,
    REQUEST_FLAG_SET_EXCEPT_HTTP_PARAMS = 3394,
    REQUEST_FLAG_GET_IPC_ALARMSTATUS_BATCH = 3395,

    //<----System Label---->
    REQUEST_FLAG_GET_SYSINFO = 3400,
    REQUEST_FLAG_GET_DISKINFO = 3401,
    REQUEST_FLAG_FORMAT_DISK = 3402,
    REQUEST_FLAG_GET_SMART_ATTR = 3403,
    REQUEST_FLAG_GET_SMART_PROCESS = 3404,
    REQUEST_FLAG_SMART_TEST_START = 3405,
    REQUEST_FLAG_BADBLOCKS_START = 3406,
    REQUEST_FLAG_GET_BADBLOCKS_PROCESS = 3407,
    REQUEST_FLAG_GET_BADBLOCKS_LOGPATH = 3408,
    REQUEST_FLAG_TEST_MAIL = 3409,
    REQUEST_FLAG_RESET = 3410,
    REQUEST_FLAG_GET_RAID_MODE = 3418,
    REQUEST_FLAG_GET_COMPONENT_SIZE_RAID = 3419,
    REQUEST_FLAG_CREATE_RAID = 3420,
    REQUEST_FLAG_REMOVE_RAID = 3421,
    REQUEST_FLAG_RENAME_RAID = 3422,
    REQUEST_FLAG_CREATE_SPACE = 3423,
    REQUEST_FLAG_REMOVE_SPACE = 3424,
    REQUEST_FLAG_REBUILD_RAID = 3425,
    REQUEST_FLAG_SET_RAID_MODE = 3426,
    REQUEST_FLAG_GET_REBUILD_PROGRESS = 3427,
    REQUEST_FLAG_GET_CUR_CELL_PORT = 3428,
    REQUEST_FLAG_INSERT_LOG_NODE = 3429,
    REQUEST_FLAG_GET_USERINFO = 3430,
    REQUEST_FLAG_GET_REC_ADVANCED = 3431,
//  REQUEST_FLAG_SET_REC_ADVANCED = 3432,

    /////MSFS
    REQUEST_FLAG_GET_MSFS_DISKINFO = 3433,
    REQUEST_FLAG_FORMAT_MSFS_DISK = 3434,
    REQUEST_FLAG_SET_MSFS_PORT = 3435,
    REQUEST_FLAG_SET_MSFS_GROUP = 3436,
    REQUEST_FLAG_ADD_MSFS_NAS = 3437,
    REQUEST_FLAG_DEL_MSFS_NAS = 3438,
    REQUEST_FLAG_UPDATE_MSFS_NAS = 3439,
    REQUEST_FLAG_SEARCH_MSFS_NAS = 3440,
    REQUEST_FLAG_RENAME_MSFS_NAS = 3441,
    REQUEST_FLAG_SET_MSFS_MODE = 3442,
    REQUEST_FLAG_GET_REC_RANGE = 3443,
    REQUEST_FLAG_SEARCH_COM_BACKUP = 3444,
    REQUEST_FLAG_PLAY_COM_BACKUP = 3445,
    REQUEST_FLAG_SEARCH_COM_BACKUP_CLOSE = 3446,
    REQUEST_FLAG_LOCK_COM_BACKUP = 3447,
    REQUEST_FLAG_SEARCH_EVT_BACKUP = 3448,
    REQUEST_FLAG_PLAY_EVT_BACKUP = 3449,
    REQUEST_FLAG_SEARCH_EVT_BACKUP_CLOSE = 3450,
    REQUEST_FLAG_LOCK_EVT_BACKUP = 3451,

    REQUEST_FLAG_SEARCH_PIC_BACKUP = 3452,
    REQUEST_FLAG_PLAY_PIC_BACKUP = 3453,
    REQUEST_FLAG_SEARCH_PIC_BACKUP_CLOSE = 3454,

    REQUEST_FLAG_EXPORT_COMMON_BACKUP = 3455,
    REQUEST_FLAG_STOP_COMMONM_BACKUP = 3456,

    REQUEST_FLAG_GET_EXPORT_DISK = 3457,
    REQUEST_FLAG_FORMAT_EXPORT_DISK = 3458,

    REQUEST_FLAG_EXPORT_EVENT_BACKUP = 3459,
    REQUEST_FLAG_STOP_EVENT_BACKUP = 3460,

    REQUEST_FLAG_EXPORT_PICTURE_BACKUP = 3461,
    REQUEST_FLAG_STOP_PICTURE_BACKUP = 3462,

    REQUEST_FLAG_PLAYSTOP_COM_BACKUP = 3463,
    REQUEST_FLAG_PLAYSTOP_EVT_BACKUP = 3464,
    REQUEST_FLAG_PLAYSTOP_PIC_BACKUP = 3465,

    REQUEST_FLAG_PLAYPAUSE_COM_BACKUP = 3466,
    REQUEST_FLAG_PLAYPAUSE_EVT_BACKUP = 3467,
    REQUEST_FLAG_PLAYPAUSE_PIC_BACKUP = 3468,

    REQUEST_FLAG_PLAYRESTART_COM_BACKUP = 3469,
    REQUEST_FLAG_PLAYRESTART_EVT_BACKUP = 3470,
    REQUEST_FLAG_PLAYRESTART_PIC_BACKUP = 3471,

    REQUEST_FLAG_PLAYSEEK_BACKUP = 3472,

    REQUEST_FLAG_GET_SEARCH_COM_PAGE = 3473,
    REQUEST_FLAG_GET_SEARCH_EVT_PAGE = 3474,

    REQUEST_FLAG_SET_REC_RECYCLEMODE = 3475,
    REQUEST_FLAG_SET_REC_ESATAFUNTION = 3476,

    REQUEST_FLAG_SET_PBPIP_ACTION = 3477,
    REQUEST_FLAG_SET_PBPIP_SEEK = 3478,

    REQUEST_FLAG_PLAY_COM_PICTURE = 3479,
    REQUEST_FLAG_PLAY_EVT_PICTURE = 3480,

    REQUEST_FLAG_LOG_SEARCH = 3481,
    REQUEST_FLAG_LOG_SEARCH_FREE = 3482,
    REQUEST_FLAG_LOG_SEARCH_CANCEL = 3483,
    REQUEST_FLAG_LOG_SEARCH_PAGE = 3484,
    REQUEST_FLAG_LOG_WRITE = 3485,
    REQUEST_FLAG_LOG_EXPORT = 3486,
    REQUEST_FLAG_LOG_EXPORT_CANCEL = 3487,
    REQUEST_FLAG_LOG_GET_DETAIL = 3488,

    REQUEST_FLAG_GET_ONE_DISKINFO = 3489,

    REQUEST_FLAG_SEARCH_COM_BACKUP_CANCEL = 3490,
    REQUEST_FLAG_SEARCH_EVT_BACKUP_CANCEL = 3491,
    REQUEST_FLAG_SEARCH_PIC_BACKUP_CANCEL = 3492,

    REQUEST_FLAG_GET_MONTH_EVENT = 3493,
    REQUEST_FLAG_LOG_WEB_EXPORT = 3494,
    REQUEST_FLAG_LOG_WEB_SEARCH = 3495,

    REQUEST_FLAG_DEL_MSFS_LOCAL = 3496,
    REQUEST_FLAG_UDISK_OFFLINE = 3497,

    REQUEST_FLAG_DEBUG_LOG_WRITE = 3498,
    REQUEST_FLAG_GET_SEARCH_PIC_PAGE = 3499,

    REQUEST_FLAG_ADD_REMOTELIVE = 3500,
    REQUEST_FLAG_GET_REMOTEPB_RECORD = 3501,
    REQUEST_FLAG_GET_REMOTEPB_RTSPADDR = 3502,
    REQUEST_FLAG_GET_REMOTELIVE_RTSPADDRS = 3503,
    REQUEST_FLAG_WEB_AUTO_LOGIN_CHECK = 3504,
    REQUEST_FLAG_USER_UPDATE = 3505,
    REQUEST_FLAG_GET_EXTERN_PORT = 3506,
    REQUEST_FLAG_ADD_MSFS_NAS_REMOTE = 3507,
    REQUEST_FLAG_DEL_MSFS_NAS_REMOTE = 3508,

    REQUEST_FLAG_LOG_WRITE_BATCH = 3509,
    REQUEST_FLAG_SEARCH_ANPR_BACKUP = 3510,
    REQUEST_FLAG_PLAY_ANPR_BACKUP = 3511,
    REQUEST_FLAG_SEARCH_ANPR_BACKUP_CLOSE = 3512,
    REQUEST_FLAG_LOCK_ANPR_BACKUP = 3513,
    REQUEST_FLAG_EXPORT_ANPR_BACKUP = 3514,
    REQUEST_FLAG_SEARCH_ANPR_BACKUP_PAGE = 3515,
    REQUEST_FLAG_SEARCH_ANPR_BACKUP_CANCEL = 3516,
    REQUEST_FLAG_SEARCH_ANPR_BACKUP_BIGIMG = 3517,

    REQUEST_FLAG_REMOTE_BACKUP_START = 3518,
    REQUEST_FLAG_REMOTE_BACKUP_START_DATA = 3519,
    REQUEST_FLAG_REMOTE_BACKUP_STOP = 3520,
    REQUEST_FLAG_SEARCH_ANPR_BACKUP_REMOTE = 3521,
    REQUEST_FLAG_SEARCH_ANPR_BACKUP_PAGE_REMOTE = 3522,
    REQUEST_FLAG_SEARCH_ANPR_BACKUP_CLOSE_REMOTE = 3523,
    REQUEST_FLAG_SEARCH_ANPR_BACKUP_BIGIMG_REMOTE = 3524,

    REQUEST_FLAG_PRIVATE_MSFS_DISK = 3525,

    REQUEST_FLAG_LOCK_COM_BACKUP_REMOTE = 3526,
    REQUEST_FLAG_REMOTE_BACKUP_SPACE = 3527,

    REQUEST_FLAG_EXPORT_DIAGNOSTIC_LOG = 3528,

    REQUEST_FLAG_GET_MSFS_QUOTA = 3529,
    REQUEST_FLAG_SET_MSFS_QUOTA = 3530,

    REQUEST_FLAG_ADD_AUTO_BACKUP = 3531,
    REQUEST_FLAG_UPDATE_AUTO_BACKUP = 3532,
    REQUEST_FLAG_PAUSE_AUTO_BACKUP = 3533,

    REQUEST_FLAG_GET_MSFS_GROUP = 3534,
    REQUEST_FLAG_FORMAT_ESATA_DISK = 3535,
    REQUEST_FLAG_GET_AUTO_BACKUP_STATUS = 3536,
    REQUEST_FLAG_STOP_AUTO_BACKUP_REMOTE = 3537,
    REQUEST_FLAG_STOP_AUTO_BACKUP_GUI = 3538,
    REQUEST_FLAG_GUI_AUTO_BACKUP_INFO = 3539,
    REQUEST_FLAG_GET_FORMAT_INFO_REMOTE = 3540,

    REQUEST_FLAG_SEARCH_POS_OPEN = 3541,
    REQUEST_FLAG_SEARCH_POS_CLOSE = 3542,
    REQUEST_FLAG_SEARCH_POS_PAGE = 3543,
    REQUEST_FLAG_SEARCH_POS_DETAILS = 3544,
    REQUEST_FLAG_SEARCH_POS_EXPORT = 3545,
    REQUEST_FLAG_SEARCH_POS_CANCEL = 3546,

    REQUEST_FLAG_SEARCH_PIC_BACKUP_REMOTE = 3547,
    REQUEST_FLAG_SEARCH_PIC_PAGE_REMOTE = 3548,
    REQUEST_FLAG_SEARCH_PIC_INDEX_REMOTE = 3549,
    REQUEST_FLAG_SEARCH_PIC_CLOSE_REMOTE = 3550,

    REQUEST_FLAG_SEARCH_FACE_BACKUP = 3551,
    REQUEST_FLAG_PLAY_FACE_BACKUP = 3552,
    REQUEST_FLAG_SEARCH_FACE_BACKUP_CLOSE = 3553,
    REQUEST_FLAG_EXPORT_FACE_BACKUP = 3554,
    REQUEST_FLAG_SEARCH_FACE_BACKUP_PAGE = 3555,
    REQUEST_FLAG_SEARCH_FACE_BACKUP_CANCEL = 3556,
    REQUEST_FLAG_SEARCH_FACE_BACKUP_BIGIMG = 3557,
    REQUEST_FLAG_SEARCH_FACE_BACKUP_REMOTE = 3558,
    REQUEST_FLAG_SEARCH_FACE_BACKUP_PAGE_REMOTE = 3559,
    REQUEST_FLAG_SEARCH_FACE_BACKUP_CLOSE_REMOTE = 3560,
    REQUEST_FLAG_SEARCH_FACE_BACKUP_BIGIMG_REMOTE = 3561,
    REQUEST_FLAG_SEARCH_EVT_BASE_INFO = 3562,
//    REQUEST_FLAG_LOCK_FACE_BACKUP = 3554,
    REQUEST_FLAG_SEARCH_PUSHMSG_PICTURES = 3563,
    REQUEST_FLAG_GET_DISK_HEALTH_MANAGEMENT_DATA = 3564,
    REQUEST_FLAG_GET_DISK_HEALTH_MANAGEMENT_LOG = 3565,
    REQUEST_FLAG_SET_DISK_HEALTH_MANAGEMENT_DATA = 3566,

    ///////////////////////////////////////////////////////////////////////////////
    /// sdk only
    REQUEST_FLAG_SDK_GET_RESPONSE = 3600,
    REQUEST_FLAG_GET_RECPARAM = 3601,
    REQUEST_FLAG_GET_RECSCHED = 3602,
    REQUEST_FLAG_GET_HOLIDAYS = 3603,
    REQUEST_FLAG_GET_VIDEOLOSS = 3604,
    REQUEST_FLAG_GET_MOTION = 3605,
    REQUEST_FLAG_GET_ALARMIN = 3606,
    REQUEST_FLAG_GET_ALARMOUT = 3607,
    REQUEST_FLAG_GET_MOTION_SCHEDULE = 3608,

    REQUEST_FLAG_GET_NETWORK_PARAM = 3609,
    REQUEST_FLAG_GET_NETWORK_PPPOE = 3610,
    REQUEST_FLAG_GET_NETWORK_DDNS = 3611,
    REQUEST_FLAG_GET_NETWORK_MAIL = 3612,
    REQUEST_FLAG_GET_NETWORK_MORE = 3613,
    REQUEST_FLAG_GET_SYSTIME = 3614,
    REQUEST_FLAG_GET_PTZ_SERIAL_PORT = 3615,

    REQUEST_FLAG_GET_AUTH = 3616,
    REQUEST_FLAG_PUSH_MSG = 3617,
    REQUEST_SET_CHANNEL_ACCESS = 3618,

    REQUEST_FLAG_SET_DAY_NIGHT_INFO_BATCH = 3619,
    REQUEST_FLAG_SET_EXPOSURE_INFO = 3620,
    REQUEST_FLAG_GET_EXPOSURE_INFO = 3621,
    REQUEST_FLAG_SET_MOVE_PTZ_SCHE = 3622,
    REQUEST_FLAG_GET_MOVE_PTZ_SCHE = 3623,
    REQUEST_FLAG_SET_VIDEOLOSS_PTZ_SCHE = 3624,
    REQUEST_FLAG_GET_VIDEOLOSS_PTZ_SCHE = 3625,
    REQUEST_FLAG_SET_ALARMIN_EFFECTIVE_SCHE = 3626,
    REQUEST_FLAG_GET_ALARMIN_EFFECTIVE_SCHE = 3627,
    REQUEST_FLAG_SET_PTZ_PARAMS = 3628,
    REQUEST_FLAG_GET_PTZ_PARAMS = 3629,
    REQUEST_FLAG_DELETE_PTZ_PARAMS = 3630,
    REQUEST_FLAG_UPDATE_PTZ_PARAMS = 3631,
    REQUEST_FLAG_DELETE_PTZ_PARAMS_BATCH = 3632,
    REQUEST_FLAG_SET_VCA_PTZ_SCHE = 3633,
    REQUEST_FLAG_GET_VCA_PTZ_SCHE = 3634,

    //////////////////////p2p///////////////////////////////
    REQUEST_FLAG_ENABLE_P2P = 3700,
    REQUEST_FLAG_DISABLE_P2P = 3701,
    REQUEST_FLAG_P2P_STATUS_INFO = 3702,
    REQUEST_FLAG_P2P_GET_PCNT_DATA = 3703,
    ////////////////////////////////////////////////////////

    REQUEST_P2P_TWOWAY_AUDIO_OPEN = 3705,
    REQUEST_P2P_TWOWAY_AUDIO_CLOSE = 3706,
    REQUEST_P2P_TWOWAY_AUDIO_DATA = 3707,
    REQUEST_FLAG_SET_UPNP = 3720,

    REQUEST_FLAG_GET_CAMERA_PARAM = 3800,
    REQUEST_FLAG_GET_OSD = 3801,
    REQUEST_FLAG_GET_MAINTENCE = 3802,
    REQUEST_FLAG_GET_IPCPROTOCOL = 3803,
    REQUEST_FLAG_GET_USER = 3804,
    REQUEST_FLAG_GET_USERCOUNT = 3805,
    REQUEST_FLAG_GET_ALL_CAMERA_PARAM = 3806,
    REQUEST_FLAG_SDK_CHECK_VERSION = 3900,

    REQUEST_FLAG_GET_SYSSTATUS = 3910,

    REQUEST_FLAG_SET_FIRST_TDE = 3911,

    //4000 for exten
    REQUEST_FLAG_SET_LANG = 4000,
    //REQUEST_FLAG_GET_CHIP = 4001,
    REQUEST_FLAG_SENDTO_QT_CMD = 4002,
    REQUEST_FLAG_GET_QT_CMD_RESULT = 4003,
    REQUEST_FLAG_GET_CHIP_CODE = 4004,
    REQUEST_FLAG_GET_USER_INFO = 4005,

    REQUEST_FLAG_SET_AUDIOTALK = 4010,
    REQUEST_FLAG_CHECK_AUDIOTALK = 4011,
    
    REQUEST_FLAG_GET_AUDIOFILE_INFO = 4012,
    REQUEST_FLAG_ADD_AUDIOFILE = 4013,
    REQUEST_FLAG_DEL_AUDIOFILE = 4014,
    REQUEST_FLAG_EDIT_AUDIOFILE = 4015,
    REQUEST_FLAG_PLAY_AUDIOFILE = 4016,
    REQUEST_FLAG_GET_AUDIOFILE_PALY_STATUS = 4017,
    REQUEST_FLAG_STOP_AUDIO_TALK = 4018,

    //
    REQUEST_FLAG_GET_IPC_HEATMAP_SUPPORT = 4019,

    REQUEST_FLAG_SET_IPC_REBOOT = 4020,
    REQUEST_FLAG_SET_IPC_RESET = 4021,
    REQUEST_FLAG_GET_IPC_DIAGNOSE = 4022,
    REQUEST_FLAG_GET_IPC_CFG = 4023,
    REQUEST_FLAG_SET_IPC_CFG = 4024,
    REQUEST_FLAG_GET_IPC_LOG = 4025,

    REQUEST_FLAG_ADD_HOTSPARE_MASTERS = 4026,
    REQUEST_FLAG_DEL_HOTSPARE_MASTERS = 4027,
    REQUEST_FLAG_GET_VCA_ALARM = 4028,
    REQUEST_FLAG_GET_VCA_DYNAMIC_BOX = 4029,
    REQUEST_FLAG_GET_IPC_AUDIO_ALARM = 4030,
    REQUEST_FLAG_SET_IPC_AUDIO_ALARM = 4031,
    REQUEST_FLAG_UPDATE_IPC_AUDIO_ALARM_ACTION = 4032,
    REQUEST_FLAG_GET_IPC_AUDIO_ALARM_SAMPLE = 4033,
    REQUEST_FLAG_GET_IPC_PTZ_WIPER = 4034,
    REQUEST_FLAG_SET_IPC_PTZ_WIPER = 4035,
    REQUEST_FLAG_GET_IPC_PTZ_AUTO_HOME = 4036,
    REQUEST_FLAG_SET_IPC_PTZ_AUTO_HOME = 4037,
    REQUEST_FLAG_SET_IPC_PTZ_INITIAL_POSITION = 4038,
    REQUEST_FLAG_SET_IPC_PTZ_CONFIG_CLEAR = 4039,
    REQUEST_FLAG_GET_IPC_PTZ_LIMIT = 4040,
    REQUEST_FLAG_SET_IPC_PTZ_LIMIT = 4041,
    REQUEST_FLAG_GET_IPC_PTZ_SCHE_TASK = 4042,
    REQUEST_FLAG_SET_IPC_PTZ_SCHE_TASK = 4043,
    REQUEST_FLAG_SET_IPC_PTZ_CONTROL_JSON = 4044,
    REQUEST_FLAG_GET_IPC_PTZ_PANEL_STATUS = 4045,
    REQUEST_FLAG_SET_P2P_AUDIO_TALK = 4046,
    REQUEST_FLAG_GET_P2P_AUDIO_TALK_SUPPORT = 4047,
    REQUEST_FLAG_GET_IPC_CAP_IMAGE = 4048,
    REQUEST_FLAG_GET_NETWORK_KEYBOARD = 4049,
    REQUEST_FLAG_ADD_NETWORK_KEYBOARD = 4050,
    REQUEST_FLAG_DELETE_NETWORK_KEYBOARD = 4051,
    REQUEST_FLAG_P2P_DEL_USER = 4052,
    REQUEST_FLAG_GET_IPC_IMAGE_SPLICEDISTANCE = 4053,
    REQUEST_FLAG_SET_IPC_IMAGE_SPLICEDISTANCE = 4054,
    // common request enum end
    
    //4200 - 4300 for lts
    REQUEST_FLAG_BOA_CLEAR_EXPORT = 4200,

    REQUEST_FLAG_MAX = 5000,
};

typedef struct req_layout_s {
    SCREEN_E    enScreen;
    MODE_E      enMode;
    VIEW_E      enView;
    LAYOUT_E    enLayout;
    DEV_INFO_S  stDevInfo[MAX_CHN_NUM];
    int devNum;
} REQ_LAYOUT_S;

typedef struct req_layout2_s {
    SCREEN_E    enScreen;
    MODE_E      enMode;
    VIEW_E      enView;
    LAYOUT_E    enLayout;
    CHNWIN_S    astcw[MAX_WINS_NUM];
    int winNum;
} REQ_LAYOUT2_S;

typedef struct req_view_s {
    SCREEN_E    enScreen;
    VIEW_E      enView;
} REQ_VIEW_S;

typedef struct req_zoomin_s {
    STATE_E     enState;    //STATE_ZOOMIN or STATE_ENTER
    SCREEN_E    enScreen;
    MODE_E      enMode;
    DEV_INFO_S  stDevInfo;
    ZONE_S      stRect;
} REQ_ZOOMIN_S;

typedef struct req_zoomin2_s {
    STATE_E     enState;    //STATE_ZOOMIN or STATE_ENTER
    int         winid;
    ZONE_S      stRect;
} REQ_ZOOMIN2_S;

typedef struct req_action_s {
    int chnid;
    int sid;
    SCREEN_E enScreen;
    AVFROM_E avFrom;
    AVTYPE_E avType;
} REQ_ACTION_S;

typedef struct req_screen_s {
    SCREEN_E        enScreen;
    DisplayDcMode_e enRes;
} REQ_SCREEN_S;

typedef struct req_switch_s {
    SCREEN_E enScreen;
} REQ_SWITCH_S;

typedef struct req_imgparam_s {
    SCREEN_E    enScreen;
    CSC_E       enCSC;
} REQ_IMGPARAM_s;

typedef struct req_pipmode_s {
    STATE_E     enState;    //STATE_EXIT or STATE_ENTER
    SCREEN_E    enScreen;
    MODE_E      enMode;
    DEV_INFO_S  stDevInfo;
    ZONE_S      stZone;
} REQ_PIPMODE_S;

typedef struct req_pipmode2_s {
    int         winid;
    int         chnid;
    int         streamid;
    ZONE_S      stZone;
} REQ_PIPMODE2_S;

typedef struct req_exchange_s {
    int         srcDevId;
    int         srcVoutId;
    int         desDevId;
    int         desVoutId;
    SCREEN_E    enScreen;
} REQ_EXCHANGE_S;

typedef struct req_asp_s {
    SCREEN_E    enScreen;
    MODE_E      enMode;
    int         devID;
    RATIO_E     enRatio;
} REQ_ASP_S;

typedef struct req_photo_s {

} REQ_PHOTO_s;

struct req_ovf_osd {
    int ch;
    int enable_text;
    char text_name[256];
    int textpos;
    int enable_date;
    int datepos;
    int dateformat;
    FONT_SIZE_E fontSize;
    int enable_text_sub;
    char text_name_sub[256];
    int textpos_sub;
    int enable_date_sub;
    int datepos_sub;
    int dateformat_sub;
    FONT_SIZE_E fontSizeSub;
    int enable_text_thd;
    char text_name_thd[256];
    int textpos_thd;
    int enable_date_thd;
    int datepos_thd;
    int dateformat_thd;
    FONT_SIZE_E fontSizeThd;
    OSD_STREAM_TYPE stream_type;
};

struct req_cut_mosaic {
    int dspid;
    int cut_x;
    int cut_y;
};

struct req_set_dislayout {
    int dspid;
    int mode;
    int chans[32];
    int type;
};

struct req_set_disparam {
    int mainres;
    int subres;
};

struct req_set_cvbsparam {
    int chanid;
    int cvbsres;
};

struct req_set_audioparam {
    int hdmion;
    int audioouton;
    int outvolume;
};

struct req_set_pipmode {
    int dspid;
    int enable;
    int chanid;
    int type;
    int winx;
    int winy;
    int width;
    int height;
};

struct req_set_zoominmode {
    int ctl;
    int dspid;
    int chanid;
    int width;
    int height;
    int winx;
    int winy;
};

struct req_set_osdparam {
    int chanid;
    int type;
    int alpha;
};

struct req_set_camparam {
    int chanid;
    int enable;
    int covert;
};

struct req_set_imageparam {
    int chanid;
    int brightness;
    int contrast;
    int saturation;
    int sharpness;
    int nflevel;
    int nf2level;
};

struct req_photo_info {
    char file[128];
    int dspid;
    int winx;
    int winy;
    int width;
    int height;
};

struct req_set_spotchan {
    int enable;
    int chanin;
    int spotid;
};

typedef struct req_record_task {
    int chanid;
    int enable;
    int recType;
} REQ_RECORD_TASK;

struct req_get_pbhourinfo {
    long long chans; ///< channel mask
    long time; ///< search time, unix epoch time
    char showtime[32];
};

struct req_playback_enter {
    long long chans; ///< channel mask
    int dspid;
    int layoutmode; ///< layout mode
};

//david add
#define MAX_PB_MASK 8
typedef struct {
    unsigned int mask[MAX_PB_MASK];
} req_pb_mask;

struct req_playback_start {
    long long chans; ///< channel mask
    long time; ///< start time
    char showtime[32];
    req_pb_mask pb_mask;
};

struct req_playback_ctrl {
    int  sid;   ///< playback session id, similar to file descriptor
    int  direct; ///< playback direction, forward or backward, @see pb_direct
    int  speed; ///< playback speed, @see pb_speed
    long sec; ///< current playback time
    //char showtime[32];
};
struct req_playback_ctrl_batch {
    int  sid[MAX_CAMERA];   ///< playback session id, similar to file descriptor
    int  direct; ///< playback direction, forward or backward, @see pb_direct
    int  speed[MAX_CAMERA]; ///< playback speed, @see pb_speed
    long sec[MAX_CAMERA]; ///< current playback time
    //char showtime[32];
    int num;
};

struct req_ptz_speed {
    int pan;
    int tilt;
    int zoom;
    int focus;
    int timeout; ///< reserved
};

struct req_ptz_action {
    int chn; ///< channel
    int action; ///< @see ptz_action
    int param; ///< if action is preset operation, then this field is preset number
    struct req_ptz_speed speed;
    char name[MAX_PSNAME_LEN];

    int type;//0=normal 1=fisheye-bundle
    int stream_id;//0-4
};
struct req_ptz_preset_action {
    int chn; ///< channel
    int action; ///< @see ptz_action
};
struct req_ptz_zoom {
    int chn;
    int zoom;
    int zoomspeed;
};
struct req_ptz_serial {
    int chn; ///< channel
    int baud_rate; ///< baud rate @see BAUDRATE
    int parity_bit; ///< parity bit @see PARITYBIT
    int data_bit; ///< data bit @see DATABIT
    int stop_bit; ///< stop bit 0,1
    int proto; ///< protocol @see ptz_protocol
    int addr; ///< address
    int serial_type; ///< serial port type
    int conn_type; ///< connection type
};

struct req_ptz_tour {
    int chn;        ///< channel
    int tourid;     ///< tour id
    int key;        ///< key point index
    int preno;      ///< preset number
    int tour_spd;   ///< tour speed
    int tour_time;  ///< tour scan time

    int type;       //0=normal 1=fisheye-bundle
    int stream_id;  //0-4
};

/*2017-07-23 yun*/
struct ptz_path {
    int preset_id;  ///preset  id  Starting from 1 ...
    int timeout;
    int speed;
};


//hrz.milesight for 8.0.6
struct fisheye_ptz_control {
    //action
    int chn; ///< channel
    int action; ///< @see ptz_action
    int stream_id;//0-4
    int param; ///< if action is preset operation, then this field is preset number or tour number
    char name[MAX_PSNAME_LEN];

    //tour
    int key; ///< key point index
    int preno; ///< preset number
    int tour_spd; ///< tour speed
    int tour_time; ///< tour scan time
};

struct req_ptz_tour_all {
    int chn;                        ///< channel
    int tourid;                     ///< tour id  Starting from 1 ...
    int rowsize;                    ///< key point index
    struct ptz_path path[MS_KEY_MAX];
};

struct req_set_sysconf {
    char arg[32];
};

struct req_smart_test_start {
    int port; ///< disk port
    int type; ///< test type @see smart_test_type
};

struct req_badblock {
    int port;
    unsigned long long cur_blk; ///< current block
    unsigned long long tot_blk; ///< total blocks
};

struct req_get_remotepb_info {
    int chanid; ///< channel
    int day_num; ///< which day 0-31
    long long start_time; ///< start time
    char showtime[32];
};

struct req_remote_live {
    int chanid; ///< channel
    int stream;
    int stream_from;
};

struct req_playback_remote {
    int chanid;
    long time;
    char show_time[32];
};

struct req_test_ipcconnect {
    char ip[32]; ///< target ip address
    int port; ///< target ip port
    char user[64]; ///< ipc user name
    char password[33]; ///< ipc password
    int protocol; ///< use what protocol
    int model; ///< ipc model
    char ddns[MAX_LEN_64];//ms ddns
    int transportProtocol;
};

struct req_set_ipc_param {
    int chnid; ///< channel
    int framerate; ///< frame rate
    int width; ///< width
    int height; ///< height
    int bitrate; ///< bit rate
    int codec; ///< codec type
    int iframeinterval;

    /// sub stream
    int substream_enable; ///< enable sub stream or not
    int sub_framerate;
    int sub_width;
    int sub_height;
    int sub_bitrate;
    int sub_codec;
    int subiframeinterval;
    int audio_enable; ///< enable audio or not
    int videoType_enable;   //Is HI IPC

    int supportsmartstream;
    int smartstream;
    int smartstreamlevel;
    int subSmartstream;
    int subSmartstreamlevel;
};

struct req_set_ipc_param_arg {
    int chnid; ///< channel
    int framerate; ///< frame rate
    int width; ///< width
    int height; ///< height
    int bitrate; ///< bit rate
    int codec; ///< codec type
    int iframeinterval;

    /// sub stream
    int substream_enable; ///< enable sub stream or not
    int sub_framerate;
    int sub_width;
    int sub_height;
    int sub_bitrate;
    int sub_codec;
    int subiframeinterval;
    int audio_enable; ///< enable audio or not
    int videoType_enable;   //Is HI IPC

    //for modif ratecontrol
    int ratecontrol;
    int sub_ratecontrol;

    int transmit_protocol;
    int sync_time;
};

struct req_set_ipc_param_batch {
    int chnid[MAX_CAMERA]; ///< channel
    int framerate; ///< frame rate
    int width; ///< width
    int height; ///< height
    int bitrate; ///< bit rate
    int codec; ///< codec type
    int iframeinterval;

    /// sub stream
    int substream_enable; ///< enable sub stream or not
    int sub_framerate;
    int sub_width;
    int sub_height;
    int sub_bitrate;
    int sub_codec;
    int subiframeinterval;
    int audio_enable; ///< enable audio or not
    int videoType_enable[MAX_CAMERA];   //Is HI IPC

    //for modif ratecontrol
    int ratecontrol;
    int sub_ratecontrol;

    int transmit_protocol;
    int sync_time;
};


struct req_enable_motion {
    int ch;
    int enable;
    int id[64];
    int size;
};

struct req_enable_substream {
    int ch;
    int enable;
};

struct req_enable_audioalarm {
    int ch;
    int enable;
};

struct req_set_motionmap {
    char mapbuf[300];
    int sensitivity;
    int chanid;
    int enable;
    int id[64];
    int size;
};

struct tm_detail {
    int begin_hour;
    int begin_minute;
    int end_hour;
    int end_minute;
};

struct mt_scedule {
    char msstr[64];
    int day;    /* mon=0, tue=1, ... sun=6 */
    int onoff;  /* on=1 off=0 */
    struct tm_detail tmdetail[4];
};

struct req_set_motionsce {
    int chanid;
    struct mt_scedule scedule[7];
    int id[64];
    int size;
};

struct req_set_ipcaddr {
    char mac[48];
    char oldipaddr[32];
    char newipaddr[32];
    char netmask[32];
    char gateway[32];
    char primarydns[32];
    int port;
    char username[64];
    char password[33];
    int protocol_id; ///< use what protocol
    char model[64];
    char netif_form[6];
};

struct req_set_ipcaddr_batch {
    char mac[48];
    char oldipaddr[32];
    char newipaddr[32];
    char netmask[32];
    char gateway[32];
    char primarydns[32];
    int port;
    char username[64];
    char password[33];
    int protocol_id; ///< use what protocol
    char model[64];
    char netif_form[6];
    int batchiNo;
    int batchAllCnt;
};

struct req_get_ipcaddr {
    char mac[48];
    IPC_CONN_RES cstate;
};

struct req_get_ipcaddr_batch {
    int batchiNo;
    int batchAllCnt;
    int optCnt;
    int optflag;
    struct req_get_ipcaddr batch_ch[MAX_CAMERA];
};

struct req_set_ipcalarm {
    int chanid;
    int enable;
    int type;
};

struct req_set_ipcvolume {
    int chanid;
    int enable;
    int type;
    int volume;
    int duration;
    int on_event;
    int off_event;
    int ongoing_event;
};

struct req_ipc_enable {
    int ch;
    int enable;
};
struct req_set_audiochn {
    int chn;
    int pb_or_live;
};
struct req_snapshot_save {
    char file[128];
    char disk[48];
};

struct req_web_auto_login_check {
    char time[256];
};

struct req_alarm_push_id {
    char id[256];
    char sn[256];
    int enable;
    int from;
    char oldId[256];
    int del;
    char region[4];
    int userId;
};

struct req_alarm_push_interval {
    char id[256];
    int interval;
};

struct req_alarm_push_name {
    char id[256];
    char name[128];
};

struct req_android_account {
    char key[128];
    char passwd[128];
};

struct cli_dst_info {
    char module[32];
    char command[64];
    char argument[32];
};

struct req_ip_conflict_batch {
    int num;
    char ip[][32];
};

struct req_search_criteria {
    time_t  start_time;
    time_t  end_time;
    unsigned int  mainType;
    unsigned long long  subType;
};

struct req_log_export {
    char filename[MAX_LEN_256];                 // as /media/usb1_1/filename.txt
    int lang;                           //language: English  /  Chinaese
    struct req_search_criteria cond;
    struct search_criteria search;
};

struct req_anpr_event {
    int chnid;
    ANPR_MODE_TYPE modeType;
};

#define MAKE_RESPONSE_VALUE(req) (req+5000)

enum ResponseFlag {
    //////////////////////////////////////////////////////////////////////////////////
    ///<----vapi operate---->
    RESPONSE_FLAG_SET_CAMAPARAM     = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_CAMAPARAM),
    RESPONSE_FLAG_PHOTO_PREVIEW     = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PHOTO_PREVIEW),
    RESPONSE_FLAG_SET_WIN_RATIO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_WIN_RATIO),
    RESPONSE_FLAG_SET_LIVE_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_LIVE_PLAYBACK),
    RESPONSE_FLAG_GET_EXCEPTION     = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_EXCEPTION),
    RESPONSE_FLAG_GET_EXCEPTION_STATUS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_EXCEPTION_STATUS),
    RESPONSE_FLAG_SET_DISPARAM      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_DISPARAM),
    RESPONSE_FLAG_GET_IMAGEPARAM    = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IMAGEPARAM),
    RESPONSE_FLAG_TEST_IP_CONFLICT  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_TEST_IP_CONFLICT),
    RESPONSE_FLAG_SNAPSHOT_SAVE     = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SNAPSHOT_SAVE),
    RESPONSE_FLAG_ENABLE_SCREEN     = MAKE_RESPONSE_VALUE(REQUEST_FLAG_ENABLE_SCREEN),
    RESPONSE_FLAG_ENABLE_SCREEN_WEB = MAKE_RESPONSE_VALUE(REQUEST_FLAG_ENABLE_SCREEN_WEB),
    RESPONSE_FLAG_IP_CONFLICT_BY_DEV = MAKE_RESPONSE_VALUE(REQUEST_FLAG_IP_CONFLICT_BY_DEV),
    RESPONSE_FLAG_TEST_IP_CONFLICT_BATCH = MAKE_RESPONSE_VALUE(REQUEST_FLAG_TEST_IP_CONFLICT_BATCH),
    RESPONSE_FLAG_SMARTAI_LIVE_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SMARTAI_LIVE_PLAYBACK),
    RESPONSE_FLAG_SET_ALLWIN_RATIO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_ALLWIN_RATIO),
    RESPONSE_FLAG_RESOLUTION_CHANGED = MAKE_RESPONSE_VALUE(REQUEST_FLAG_RESOLUTION_CHANGED),
    RESPONSE_FLAG_NOTIFY_PCNT_RESET = MAKE_RESPONSE_VALUE(REQUEST_FLAG_NOTIFY_PCNT_RESET),
    //////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////

    //failover
    RESPONSE_FLAG_FAILOVER_SEARCH_NVR = MAKE_RESPONSE_VALUE(REQUEST_FLAG_FAILOVER_SEARCH_NVR),
    RESPONSE_FLAG_FAILOVER_UPDATE_MASTER = MAKE_RESPONSE_VALUE(REQUEST_FLAG_FAILOVER_UPDATE_MASTER),
    RESPONSE_FLAG_FAILOVER_GET_MASTER_STATUS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_FAILOVER_GET_MASTER_STATUS),
    RESPONSE_FLAG_FAILOVER_GET_SLAVE_STATUS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_FAILOVER_GET_SLAVE_STATUS),
    RESPONSE_FLAG_FAILOVER_CHANGE_USER_PWD = MAKE_RESPONSE_VALUE(REQUEST_FLAG_FAILOVER_CHANGE_USER_PWD),
    RESPONSE_FLAG_FAILOVER_CHANGE_MODE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_FAILOVER_CHANGE_MODE),
    RESPONSE_FLAG_FAILOVER_REMOVE_CAMS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_FAILOVER_REMOVE_CAMS),
    RESPONSE_FLAG_FAILOVER_ADD_CAMS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_FAILOVER_ADD_CAMS),

    //ANPR
    RESPONSE_FLAG_GET_LPR_LIST      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_LPR_LIST),
    RESPONSE_FLAG_ADD_LPR_LIST      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_ADD_LPR_LIST),
    RESPONSE_FLAG_DEL_LPR_LIST      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_DEL_LPR_LIST),
    RESPONSE_FLAG_EDIT_LPR_LIST     = MAKE_RESPONSE_VALUE(REQUEST_FLAG_EDIT_LPR_LIST),
    RESPONSE_FLAG_GET_LPR_MODE_INFO     = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_LPR_MODE_INFO),
    RESPONSE_FLAG_SET_LPR_MODE_INFO     = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_LPR_MODE_INFO),


    ///<----Playback Label---->
    RESPONSE_FLAG_GET_PB_COMM_BASE     = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_PB_COMM_BASE),
    RESPONSE_FLAG_REMOTE_PLAYBACK_PLAY = MAKE_RESPONSE_VALUE(REQUEST_FLAG_REMOTE_PLAYBACK_PLAY),
    
    RESPONSE_FLAG_GET_PBDAYINFO     = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_PBDAYINFO),
    RESPONSE_FLAG_GET_PBHOURINFO    = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_PBHOURINFO),
    RESPONSE_FLAG_GET_PBPLAYTIME    = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_PBPLAYTIME),
    RESPONSE_FLAG_RET_PLAYBACK      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAYBACK_LOCAL),
    RESPONSE_FLAG_PLAYBACK_JUMP     = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAYBACK_JUMP),
    RESPONSE_FLAG_PLAYBACK_SNAPSHOT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAYBACK_SNAPSHOT),
    RESPONSE_FLAG_PLAYBACK_SNAPSHOT_SAVE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAYBACK_SNAPSHOT_SAVE),
    RESPONSE_FLAG_PLAYBACK_SINGLE_JUMP  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAYBACK_SINGLE_JUMP),
    RESPONSE_FLAG_PLAYBACK_JUMP_BATCH   = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAYBACK_JUMP_BATCH),
    RESPONSE_FLAG_GET_PBPLAYTIME_BATCH  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_PBPLAYTIME_BATCH),

    RESPONSE_FLAG_SEARCH_COM_PLAYBACK_OPEN  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_COM_PLAYBACK_OPEN),
    RESPONSE_FLAG_SEARCH_COM_PLAYBACK_CLOSE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_COM_PLAYBACK_CLOSE),
    RESPONSE_FLAG_SEARCH_COM_PLAYBACK_PAGE  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_COM_PLAYBACK_PAGE),
    RESPONSE_FLAG_PLAY_COM_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAY_COM_PLAYBACK),
    RESPONSE_FLAG_LOCK_COM_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_LOCK_COM_PLAYBACK),
    RESPONSE_FLAG_STOP_COM_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_STOP_COM_PLAYBACK),
    RESPONSE_FLAG_PAUSE_COM_PLAYBACK    = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PAUSE_COM_PLAYBACK),
    RESPONSE_FLAG_RESTART_COM_PLAYBACK  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_RESTART_COM_PLAYBACK),

    RESPONSE_FLAG_SEARCH_EVT_PLAYBACK_OPEN  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_EVT_PLAYBACK_OPEN),
    RESPONSE_FLAG_SEARCH_EVT_PLAYBACK_CLOSE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_EVT_PLAYBACK_CLOSE),
    RESPONSE_FLAG_SEARCH_EVT_PLAYBACK_PAGE  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_EVT_PLAYBACK_PAGE),
    RESPONSE_FLAG_PLAY_EVT_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAY_EVT_PLAYBACK),
    RESPONSE_FLAG_LOCK_EVT_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_LOCK_EVT_PLAYBACK),
    RESPONSE_FLAG_STOP_EVT_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_STOP_EVT_PLAYBACK),
    RESPONSE_FLAG_PAUSE_EVT_PLAYBACK    = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PAUSE_EVT_PLAYBACK),
    RESPONSE_FLAG_RESTART_EVT_PLAYBACK  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_RESTART_EVT_PLAYBACK),

    RESPONSE_FLAG_SET_TEMP_TAGS_PLAYBACK    = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_TEMP_TAGS_PLAYBACK),
    RESPONSE_FLAG_GET_TEMP_TAGS_PLAYBACK    = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_TEMP_TAGS_PLAYBACK),
    RESPONSE_FLAG_EDIT_TEMP_TAGS_PLAYBACK   = MAKE_RESPONSE_VALUE(REQUEST_FLAG_EDIT_TEMP_TAGS_PLAYBACK),
    RESPONSE_FLAG_REMOVE_TEMP_TAGS_PLAYBACK_BATCH = MAKE_RESPONSE_VALUE(REQUEST_FLAG_REMOVE_TEMP_TAGS_PLAYBACK_BATCH),
    RESPONSE_FLAG_REMOVE_TEMP_TAGS_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_REMOVE_TEMP_TAGS_PLAYBACK),
    RESPONSE_FLAG_CLEAR_TEMP_TAGS_PLAYBACK  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_CLEAR_TEMP_TAGS_PLAYBACK),
    RESPONSE_FLAG_SEARCH_TAGS_PLAYBACK_OPEN = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_TAGS_PLAYBACK_OPEN),
    RESPONSE_FLAG_SEARCH_TAGS_PLAYBACK_CLOSE    = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_TAGS_PLAYBACK_CLOSE),
    RESPONSE_FLAG_SEARCH_TAGS_PLAYBACK_PAGE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_TAGS_PLAYBACK_PAGE),

    RESPONSE_FLAG_SPEED_PLAYBACK    = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SPEED_PLAYBACK),
    RESPONSE_FLAG_BACKWARD_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_BACKWARD_PLAYBACK),
    RESPONSE_FLAG_FORWARD_PLAYBACK  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_FORWARD_PLAYBACK),
    RESPONSE_FLAG_STEP_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_STEP_PLAYBACK),
    RESPONSE_FLAG_SEEK_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEEK_PLAYBACK),

    RESPONSE_FLAG_START_ALL_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_START_ALL_PLAYBACK),
    RESPONSE_FLAG_STOP_ALL_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_STOP_ALL_PLAYBACK),
    RESPONSE_FLAG_PAUSE_ALL_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PAUSE_ALL_PLAYBACK),
    RESPONSE_FLAG_RESTART_ALL_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_RESTART_ALL_PLAYBACK),
    RESPONSE_FLAG_SEEK_ALL_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEEK_ALL_PLAYBACK),
    RESPONSE_FLAG_SPEED_ALL_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SPEED_ALL_PLAYBACK),
    RESPONSE_FLAG_BACKWARD_ALL_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_BACKWARD_ALL_PLAYBACK),
    RESPONSE_FLAG_FORWARD_ALL_PLAYBACK  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_FORWARD_ALL_PLAYBACK),
    RESPONSE_FLAG_STEP_ALL_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_STEP_ALL_PLAYBACK),
    RESPONSE_FLAG_GET_PLAYBACK_REALTIME = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_PLAYBACK_REALTIME),
    RESPONSE_FLAG_SET_PLAYBACK_SNAPSHOT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_PLAYBACK_SNAPSHOT),

    RESPONSE_FLAG_EXPORT_COMMON_PLAYBACK    = MAKE_RESPONSE_VALUE(REQUEST_FLAG_EXPORT_COMMON_PLAYBACK),
    RESPONSE_FLAG_STOP_EXPORT_COMMONM_PLAYBACK  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_STOP_EXPORT_COMMONM_PLAYBACK),

    RESPONSE_FLAG_SEARCH_COM_REMOTEPB_OPEN  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_COM_REMOTEPB_OPEN),
    RESPONSE_FLAG_SEARCH_COM_REMOTEPB_CLOSE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_COM_REMOTEPB_CLOSE),
    RESPONSE_FLAG_SEARCH_COM_REMOTEPB_PAGE  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_COM_REMOTEPB_PAGE),
    RESPONSE_FLAG_PLAY_COM_REMOTEPB = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAY_COM_REMOTEPB),
    RESPONSE_FLAG_LOCK_COM_REMOTEPB = MAKE_RESPONSE_VALUE(REQUEST_FLAG_LOCK_COM_REMOTEPB),
    RESPONSE_FLAG_STOP_COM_REMOTEPB = MAKE_RESPONSE_VALUE(REQUEST_FLAG_STOP_COM_REMOTEPB),
    RESPONSE_FLAG_PAUSE_COM_REMOTEPB = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PAUSE_COM_REMOTEPB),
    RESPONSE_FLAG_RESTART_COM_REMOTEPB  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_RESTART_COM_REMOTEPB),
    RESPONSE_FLAG_SPEED_REMOTEPB = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SPEED_REMOTEPB),
    RESPONSE_FLAG_BACKWARD_REMOTEPB = MAKE_RESPONSE_VALUE(REQUEST_FLAG_BACKWARD_REMOTEPB),
    RESPONSE_FLAG_FORWARD_REMOTEPB = MAKE_RESPONSE_VALUE(REQUEST_FLAG_FORWARD_REMOTEPB),
    RESPONSE_FLAG_STEP_REMOTEPB = MAKE_RESPONSE_VALUE(REQUEST_FLAG_STEP_REMOTEPB),
    RESPONSE_FLAG_SEEK_REMOTEPB = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEEK_REMOTEPB),
    RESPONSE_FLAG_GET_REMOTEPB_TIME = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_REMOTEPB_TIME),
    RESPONSE_FLAG_GET_REMOTEPB_DOWNLOAD = MAKE_RESPONSE_VALUE(REQUEST_FLAG_DOWNLOAD_REMOTEPB),
    RESPONSE_FLAG_SET_TRANCODING = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_TRANCODING),
    RESPONSE_FLAG_GET_TRANCODING = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_TRANCODING),
    RESPONSE_FLAG_SEARCH_TAGS_PLAYBACK_OPEN_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_TAGS_PLAYBACK_OPEN_REMOTE),
    RESPONSE_FLAG_SEARCH_TAGS_PLAYBACK_CLOSE_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_TAGS_PLAYBACK_CLOSE_REMOTE),
    RESPONSE_FLAG_SEARCH_TAGS_PLAYBACK_PAGE_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_TAGS_PLAYBACK_PAGE_REMOTE),
    RESPONSE_FLAG_GET_INDENTATION_DIAGRAM = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PB_INDENTATION_DIAGRAM),

    RESPONSE_FLAG_SEARCH_SPLIT_PLAYBACK_RANGE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_SPLIT_PLAYBACK_RANGE),
    RESPONSE_FLAG_SEARCH_SPLIT_PLAYBACK_OPEN = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_SPLIT_PLAYBACK_OPEN),
    RESPONSE_FLAG_SEARCH_SPLIT_PLAYBACK_CLOSE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_SPLIT_PLAYBACK_CLOSE),
    RESPONSE_FLAG_SEARCH_SPLIT_PLAYBACK_PAGE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_SPLIT_PLAYBACK_PAGE),

    RESPONSE_FLAG_START_SPLIT_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_START_SPLIT_PLAYBACK),
    RESPONSE_FLAG_STOP_SPLIT_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_STOP_SPLIT_PLAYBACK),
    RESPONSE_FLAG_PAUSE_SPLIT_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PAUSE_SPLIT_PLAYBACK),
    RESPONSE_FLAG_RESTART_SPLIT_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_RESTART_SPLIT_PLAYBACK),

    RESPONSE_FLAG_SEEK_SPLIT_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEEK_SPLIT_PLAYBACK),
    RESPONSE_FLAG_SPEED_SPLIT_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SPEED_SPLIT_PLAYBACK),
    RESPONSE_FLAG_BACKWARD_SPLIT_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_BACKWARD_SPLIT_PLAYBACK),
    RESPONSE_FLAG_FORWARD_SPLIT_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_FORWARD_SPLIT_PLAYBACK),

    RESPONSE_FLAG_STEP_SPLIT_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_STEP_SPLIT_PLAYBACK),
    RESPONSE_FLAG_GET_SPLIT_PLAYBACK_TIME = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_SPLIT_PLAYBACK_TIME),
    RESPONSE_FLAG_SNAPHOST_SPLIT_PLAYBACK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SNAPHOST_SPLIT_PLAYBACK),

    ////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////
    ///<----Camera Label---->
    RESPONSE_FLAG_REMOVE_IPC = MAKE_RESPONSE_VALUE(REQUEST_FLAG_REMOVE_IPC),
    RESPONSE_FLAG_GET_IPC_LPR_WILDCARDS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_LPR_WILDCARDS),
    RESPONSE_FLAG_SET_IPC_LPR_WILDCARDS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_LPR_WILDCARDS),
    RESPONSE_FLAG_GET_IPC_VCA_LINECROSSING2 = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_VCA_LINECROSSING2),
    RESPONSE_FLAG_SET_IPC_VCA_LINECROSSING2 = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_VCA_LINECROSSING2),
    RESPONSE_FLAG_GET_VAC_SETTINGS2 = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VAC_SETTINGS2),
    RESPONSE_FLAG_SET_VAC_SETTINGS2 = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_VAC_SETTINGS2),
    RESPONSE_FLAG_GET_IPC_WATERMARK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_WATERMARK),
    RESPONSE_FLAG_SET_IPC_WATERMARK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_WATERMARK),
    RESPONSE_FLAG_GET_IPC_DIGITPOS_ZOOM = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_DIGITPOS_ZOOM),
    RESPONSE_FLAG_SET_IPC_WATERMARK_BATCH = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_WATERMARK_BATCH),
    RESPONSE_FLAG_GET_IPC_EVENT_STREAM_INFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_EVENT_STREAM_INFO),
    RESPONSE_FLAG_SET_IPC_EVENT_STREAM_INFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_EVENT_STREAM_INFO),
    RESPONSE_FLAG_GET_IPC_LPR_NIGHT_MODE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_LPR_NIGHT_MODE),
    RESPONSE_FLAG_GET_IPC_REGIONAL_PEOPLE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_REGIONAL_PEOPLE),
    RESPONSE_FLAG_SET_IPC_REGIONAL_PEOPLE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_REGIONAL_PEOPLE),
    RESPONSE_FLAG_GET_IPC_PEOPLE_REPORT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_PEOPLE_REPORT),
    RESPONSE_FLAG_GET_REGIONAL_DETECT_DATA = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_REGIONAL_DETECT_DATA),
    RESPONSE_FLAG_UPDATE_REGIONAL_ACTION = MAKE_RESPONSE_VALUE(REQUEST_FLAG_UPDATE_REGIONAL_ACTION),
    

    RESPONSE_FLAG_SEARCH_IPC        = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_IPC),
    RESPONSE_FLAG_GET_IPCLIST       = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPCLIST),
    RESPONSE_FLAG_TEST_IPCCONNECT   = MAKE_RESPONSE_VALUE(REQUEST_FLAG_TEST_IPCCONNECT),
    RESPONSE_FLAG_SET_IPCPARAM      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPCPARAM),
    RESPONSE_FLAG_GET_IPCPARAM      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPCPARAM),

    RESPONSE_FLAG_GET_IPCALARM      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPCALARM),
    RESPONSE_FLAG_SET_IPCALARM      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPCALARM),
    RESPONSE_FLAG_GET_IPCVOLUME     = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPCVOLUME),
    RESPONSE_FLAG_SET_IPCVOLUME     = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPCVOLUME),
    RESPONSE_FLAG_GET_IPC_DISCONNECT_NUM     = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_DISCONNECT_NUM),
    //RESPONSE_FLAG_TEST_IPCCONNECT_EX = MAKE_RESPONSE_VALUE(REQUEST_FLAG_TEST_IPCCONNECT_EX),

    RESPONSE_FLAG_GET_IPCIMAGE_ENHANCEMENT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPCIMAGE_ENHANCEMENT),
    RESPONSE_FLAG_SET_IPCIMAGE_ENHANCEMENT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPCIMAGE_ENHANCEMENT),
    RESPONSE_FLAG_GET_IPCIMAGE_DISPLAY = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPCIMAGE_DISPLAY),
    RESPONSE_FLAG_SET_IPCIMAGE_DISPLAY = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPCIMAGE_DISPLAY),
    RESPONSE_FLAG_GET_IPC_COMMON_PARAM = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_COMMON_PARAM),
    RESPONSE_FLAG_SET_IPC_COMMON_PARAM = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_COMMON_PARAM),
    RESPONSE_FLAG_TRY_TEST_IPCCONNECT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_TRY_TEST_IPCCONNECT),
    RESPONSE_FLAG_SET_IPCPARAM_BATCH = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPCPARAM_BATCH),
    RESPONSE_FLAG_SET_IPCADDR_BATCH = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPCADDR_BATCH),
    RESPONSE_FLAG_GET_IPCADDR_BATCH = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPCADDR_BATCH),
    RESPONSE_FLAG_SET_FISHEYE_MODE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_FISHEYE_MODE),
    RESPONSE_FLAG_GET_FISHEYE_MODE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_FISHEYE_MODE),
    RESPONSE_FLAG_GET_CHANNELS_STATE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_CHANNELS_STATE),
    RESPONSE_FLAG_P2P_UPLOAD_SPEED  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_P2P_UPLOAD_SPEED),

    //active camera
    RESPONSE_FLAG_GET_CAMERA_CHALLENGE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_CAMERA_CHALLENGE),
    RESPONSE_FLAG_MODIFY_POE_CAMERA_PWD = MAKE_RESPONSE_VALUE(REQUEST_FLAG_MODIFY_POE_CAMERA_PWD),

    RESPONSE_FLAG_GET_VCA_LICENSE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VCA_LICENSE),
    RESPONSE_FLAG_GET_VCA_REGIONENTRANCE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VCA_REGIONENTRANCE),
    RESPONSE_FLAG_GET_VCA_REGIONEXIT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VCA_REGIONEXIT),
    RESPONSE_FLAG_GET_VCA_ADVANCEDMOTION = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VCA_ADVANCEDMOTION),
    RESPONSE_FLAG_GET_VCA_TAMPER = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VCA_TAMPER),
    RESPONSE_FLAG_GET_VCA_LINECROSSING = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VCA_LINECROSSING),
    RESPONSE_FLAG_GET_VCA_LOITERING = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VCA_LOITERING),
    RESPONSE_FLAG_GET_VCA_HUMANDETECTION = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VCA_HUMANDETECTION),

    RESPONSE_FLAG_SET_VCA_REGIONENTRANCE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_VCA_REGIONENTRANCE),
    RESPONSE_FLAG_SET_VCA_REGIONEXIT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_VCA_REGIONEXIT),
    RESPONSE_FLAG_SET_VCA_ADVANCEDMOTION = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_VCA_ADVANCEDMOTION),
    RESPONSE_FLAG_SET_VCA_TAMPER = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_VCA_TAMPER),
    RESPONSE_FLAG_SET_VCA_LINECROSSING = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_VCA_LINECROSSING),
    RESPONSE_FLAG_SET_VCA_LOITERING = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_VCA_LOITERING),
    RESPONSE_FLAG_SET_VCA_HUMANDETECTION = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_VCA_HUMANDETECTION),

    RESPONSE_FLAG_GET_VCA_PEOPLE_COUNT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VCA_PEOPLE_COUNT),
    RESPONSE_FLAG_SET_VCA_PEOPLE_COUNT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_VCA_PEOPLE_COUNT),

    RESPONSE_FLAG_SET_3D_PTZ_CTRL = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_3D_PTZ_CTRL),
    RESPONSE_FLAG_SET_PTZ_SPEED = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_PTZ_SPEED),
    RESPONSE_FLAG_GET_VAC_SUPPORT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VAC_SUPPORT),
    RESPONSE_FLAG_SET_VAC_LISENCE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_VAC_LISENCE),
    RESPONSE_FLAG_GET_VAC_SETTINGS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VAC_SETTINGS),
    RESPONSE_FLAG_SET_VAC_SETTINGS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_VAC_SETTINGS),
    RESPONSE_FLAG_SET_VAC_CLEANCOUNT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_VAC_CLEANCOUNT),
    RESPONSE_FLAG_GET_VAC_PERSONPOINT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VAC_PERSONPOINT),
    RESPONSE_FLAG_GET_VAC_SUPPORT_ALL = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VAC_SUPPORT_ALL),
    RESPONSE_FLAG_GET_VCA_LEFTREMOVE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VCA_LEFTREMOVE),
    RESPONSE_FLAG_SET_VCA_LEFTREMOVE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_VCA_LEFTREMOVE),

    RESPONSE_FLAG_GET_DAY_NIGHT_INFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_DAY_NIGHT_INFO),
    RESPONSE_FLAG_SET_DAY_NIGHT_INFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_DAY_NIGHT_INFO),
    RESPONSE_FLAG_SET_DAY_NIGHT_INFO_BATCH = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_DAY_NIGHT_INFO_BATCH),

    RESPONSE_FLAG_SET_ROI = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_ROI),
    RESPONSE_FLAG_GET_ROI = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_ROI),
    RESPONSE_FLAG_SET_ROI_BATCH = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_ROI_BATCH),
    RESPONSE_FLAG_GET_WHITE_BALANCE_SCHE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_WHITE_BALANCE_SCHE),
    RESPONSE_FLAG_GET_EXPOSURE_SCHE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_EXPOSURE_SCHE),
    RESPONSE_FLAG_GET_BWH_SCHE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_BWH_SCHE),
    RESPONSE_FLAG_DELETE_ROI_AREA = MAKE_RESPONSE_VALUE(REQUEST_FLAG_DELETE_ROI_AREA),
    RESPONSE_FLAG_SET_IPCADDR       = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPCADDR),

    RESPONSE_FLAG_GET_LPR_SETTINGS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_LPR_SETTINGS),
    RESPONSE_FLAG_SET_LPR_SETTINGS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_LPR_SETTINGS),
    RESPONSE_FLAG_GET_LPR_LICENSE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_LPR_LICENSE),
    RESPONSE_FLAG_SET_LPR_LICENSE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_LPR_LICENSE),
    RESPONSE_FLAG_GET_LPR_SUPPORT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_LPR_SUPPORT),
    RESPONSE_FLAG_GET_PTZ_BASIC = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_PTZ_BASIC),
    RESPONSE_FLAG_SET_PTZ_BASIC = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_PTZ_BASIC),
    RESPONSE_FLAG_GET_AUTO_TRACKING = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_AUTO_TRACKING),
    RESPONSE_FLAG_SET_AUTO_TRACKING = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_AUTO_TRACKING),
    RESPONSE_FLAG_GET_IPC_ALARM_OUTPUT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_ALARM_OUTPUT),
    RESPONSE_FLAG_SET_IPC_ALARM_OUTPUT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_ALARM_OUTPUT),
    RESPONSE_FLAG_SET_IPC_ALARM_OUTPUT_BATCH = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_ALARM_OUTPUT_BATCH),
    RESPONSE_FLAG_GET_IPC_ALARM_INPUT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_ALARM_INPUT),
    RESPONSE_FLAG_SET_IPC_ALARM_INPUT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_ALARM_INPUT),
    RESPONSE_FLAG_SET_IPC_ALARM_INPUT_BATCH = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_ALARM_INPUT_BATCH),

    RESPONSE_FLAG_PTZ_TOUR_ADD      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PTZ_TOUR_ADD),
    RESPONSE_FLAG_PTZ_INIT          = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PTZ_OVF_INIT),
    RESPONSE_FLAG_PTZ_SUPPORT       = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PTZ_SUPPORT),
    RESPONSE_FLAG_GET_IPC_CONNECT_STATE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_CONNECT_STATE),
    RESPONSE_FLAG_GET_PTZ_PRESET    = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_PTZ_PRESET),
    RESPONSE_FLAG_PTZ_TOUR_SET      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PTZ_SET),
    RESPONSE_FLAG_GET_IPCMTMAP      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPCMTMAP),
    RESPONSE_FLAG_SET_IPCMTMAP      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPCMTMAP),
    RESPONSE_FLAG_GET_IPCMTSCE      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPCMTSCE),
    RESPONSE_FLAG_SET_IPCMTSCE      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPCMTSCE),
    RESPONSE_FLAG_OVF_SET_OSD       = MAKE_RESPONSE_VALUE(REQUEST_FLAG_OVF_SET_OSD),
    RESPONSE_FLAG_OVF_GET_OSD       = MAKE_RESPONSE_VALUE(REQUEST_FLAG_OVF_GET_OSD),
    RESPONSE_FLAG_PTZ_OVF_INFO      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PTZ_OVF_INFO),
    RESPONSE_FLAG_PTZ_HTTP_FISH_INFO        = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PTZ_HTTP_FISH_INFO),


    RESPONSE_FLAG_SET_PRIVACY_MASK  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_PRIVACY_MASK),
    RESPONSE_FLAG_GET_PRIVACY_MASK  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_PRIVACY_MASK),
    RESPONSE_FLAG_GET_IPC_MODEL_TYPE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_MODEL_TYPE),
    RESPONSE_FLAG_GET_ALL_IPCTYPE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_ALL_IPCTYPE),
    RESPONSE_FLAG_GET_SINGLE_IPCTYPE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_SINGLE_IPCTYPE),
    RESPONSE_FLAG_DELETE_PRIVACY_MASK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_DELETE_PRIVACY_MASK),
    RESPONSE_FLAG_DELETE_ALL_PRIVACY_MASK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_DELETE_ALL_PRIVACY_MASK),

    RESPONSE_FLAG_P2P_UNBIND_IOT_DEVICE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_P2P_UNBIND_IOT_DEVICE),
    RESPONSE_FLAG_P2P_GET_COMMON_PARAMS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_P2P_GET_COMMON_PARAMS),
    RESPONSE_FLAG_P2P_UPLOAD_AUDIOFILE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_P2P_UPLOAD_AUDIOFILE),

    //poe port power
    RESPONSE_FLAG_GET_POE_POWER_STATE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_POE_POWER_STATE),
    RESPONSE_FLAG_GET_POE_STATE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_POE_STATE),

    /////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////
    ///<----Record Label---->
    RESPONSE_FLAG_RECORD_TASK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_RECORD_TASK),
    RESPONSE_FLAG_SET_RECPARAM = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_RECPARAM),
    RESPONSE_FLAG_SET_ALL_RECORD = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_ALL_RECORD),
    RESPONSE_FLAG_SET_RECORD_MARK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_RECORD_MARK),
    RESPONSE_FLAG_LIVE_SNAPSHOT_PHOTO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_LIVE_SNAPSHOT_PHOTO),
    RESPONSE_FLAG_SET_RECORD_UPDATE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_RECORD_UPDATE),
    RESPONSE_FLAG_EMERGENCY_REC_TASK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_EMERGENCY_REC_TASK),
    RESPONSE_FLAG_SET_SNAPSHOT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_SNAPSHOT),
    RESPONSE_FLAG_SET_SNAPSHOT_SCHE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_SNAPSHOT_SCHE),
    RESPONSE_FLAG_SET_ALL_SNAPSHOT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_ALL_SNAPSHOT),
    RESPONSE_FLAG_GET_SNAPSHOT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_SNAPSHOT),
    RESPONSE_FLAG_GET_SNAPSHOT_SCHE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_SNAPSHOT_SCHE),
    RESPONSE_FLAG_SET_ESATA_AUTO_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_ESATA_AUTO_BACKUP),
    RESPONSE_FLAG_GET_ESATA_BACKUP_STATUS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_ESATA_BACKUP_STATUS),

    ////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////
    //<----Event Label---->
    RESPONSE_FLAG_SET_RECORDSCHED = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_RECORDSCHED),
    RESPONSE_FLAG_SET_RECORDMODE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_RECORDMODE),
    RESPONSE_FLAG_UPDATE_ACTION_ENABLE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_UPDATE_ACTION_ENABLE),
    RESPONSE_FLAG_SET_ANPR_EVENT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_ANPR_EVENT),
    RESPONSE_FLAG_GET_POS_SETTING = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_POS_SETTING),
    RESPONSE_FLAG_SET_POS_SETTING = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_POS_SETTING),
    RESPONSE_FLAG_SET_POS_PORT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_POS_PORT),
    RESPONSE_FLAG_SET_REPORT_AUTO_BACKUP_SETTINGS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_REPORT_AUTO_BACKUP_SETTINGS),
    RESPONSE_FLAG_GET_REPORT_AUTO_BACKUP_SETTINGS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_REPORT_AUTO_BACKUP_SETTINGS),
    ////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////
    ///<----Status Label---->
    RESPONSE_FLAG_GET_IPC_STATUS    = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_STATUS),
    RESPONSE_FLAG_GET_NETWORK_INFO  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_NETWORK_INFO),
    RESPONSE_FLAG_GET_NETWORK_SPEED = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_NETWORK_SPEED),
    RESPONSE_FLAG_GET_IOALARM_STATUS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IOALARM_STATUS),
    RESPONSE_FLAG_GET_IOSENSOR_STATUS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IOSENSOR_STATUS),
    RESPONSE_FLAG_GET_EVENT_STATUS  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_EVENT_STATUS),
    RESPONSE_FLAG_GET_NETWORK_BANDWIDTH = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_NETWORK_BANDWIDTH),
    RESPONSE_FLAG_GET_MOTION_EVENT_STATUS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_MOTION_EVENT_STATUS),
    RESPONSE_FLAG_GET_SYSTEM_RESOURCE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_SYSTEM_RESOURCE),
    RESPONSE_FLAG_GET_DDNS_STATUS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_DDNS_STATUS),
    RESPONSE_FLAG_GET_LPR_STATUS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_LPR_STATUS),
    //check sqa
    RESPONSE_FLAG_CHECK_SQA_LOCK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_CHECK_SQA_LOCK),
    RESPONSE_FLAG_CHECKSQA_LOCK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_CHECKSQA_LOCK),

    /////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////
    ///<----Camera Label---->
    RESPONSE_FLAG_UPGRADE_IPC_IMAGE     = MAKE_RESPONSE_VALUE(REQUEST_FLAG_UPGRADE_IPC_IMAGE),
    RESPONSE_FLAG_UPGRADE_IPC_IMAGE_STOP        = MAKE_RESPONSE_VALUE(REQUEST_FLAG_UPGRADE_IPC_IMAGE_STOP),
    RESPONSE_FLAG_SET_IPC_ALARMOUT_STATE        = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_ALARMOUT_STATE),
    RESPONSE_FLAG_SET_PRIVACY_MASK_EDIT     = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_PRIVACY_MASK_EDIT),
    RESPONSE_FLAG_GET_AUTO_TRACK_POINT      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_AUTO_TRACK_POINT),
    RESPONSE_FLAG_GET_ALARM_OUT_NAME        = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_ALARM_OUT_NAME),
    RESPONSE_FLAG_CHECK_ONLINE_IPC      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_CHECK_ONLINE_IPC),
    RESPONSE_FLAG_SET_MANUAL_TRACKING   = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_MANUAL_TRACKING),
    RESPONSE_FLAG_GET_HEAT_MAP_SETTING  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_HEAT_MAP_SETTING),
    RESPONSE_FLAG_SET_HEAT_MAP_SETTING  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_HEAT_MAP_SETTING),
    RESPONSE_FLAG_SEARCH_HEAT_MAP_REPORT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_HEAT_MAP_REPORT),
    RESPONSE_FLAG_CHECK_ONLINE_IPC_BATCH    = MAKE_RESPONSE_VALUE(REQUEST_FLAG_CHECK_ONLINE_IPC_BATCH),
    RESPONSE_FLAG_SET_HEAT_MAP_SETTING_BATCH    = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_HEAT_MAP_SETTING_BATCH),
    RESPONSE_FLAG_SET_IPC_PTZ_CONTROL = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_PTZ_CONTROL),
    RESPONSE_FLAG_GET_IPC_LED_PARAMS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_LED_PARAMS),
    RESPONSE_FLAG_GET_IPC_LED_STATUS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_LED_STATUS),
    RESPONSE_FLAG_GET_IPC_SNAPHOST = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_SNAPHOST),
    RESPONSE_FLAG_SET_MANUAL_TRACKING_REGION = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_MANUAL_TRACKING_REGION),
    RESPONSE_FLAG_GET_ALARM_WHITE_LED = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_ALARM_WHITE_LED),
    RESPONSE_FLAG_SET_ALARM_WHITE_LED = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_ALARM_WHITE_LED),
    RESPONSE_FLAG_GET_IPC_AUTOIRIS_STATUS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_AUTOIRIS_STATUS),
    RESPONSE_FLAG_GET_IPC_AUDIO_INFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_AUDIO_INFO),
    RESPONSE_FLAG_SET_IPC_AUDIO_INFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_AUDIO_INFO),
    RESPONSE_FLAG_CHECK_IPC_FISHEYE_INFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_CHECK_IPC_FISHEYE_INFO),
    RESPONSE_FLAG_SET_IPC_FISHEYE_INFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_FISHEYE_INFO),
    RESPONSE_FLAG_SET_AUTO_TRACKING_BATCH = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_AUTO_TRACKING_BATCH),
    RESPONSE_FLAG_GET_IPC_SYSTEM_INFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_SYSTEM_INFO),
    RESPONSE_FLAG_GET_IPC_CUSTOM_PARAM = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_CUSTOM_PARAM),
    RESPONSE_FLAG_GET_IPC_FRAME_RESOLUTION = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_FRAME_RESOLUTION),
    RESPONSE_FLAG_ONLINE_UPGRADE_CAMERA = MAKE_RESPONSE_VALUE(REQUEST_FLAG_ONLINE_UPGRADE_CAMERA),
    RESPONSE_FLAG_GET_FACE_CONFIG = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_FACE_CONFIG),
    RESPONSE_FLAG_SET_FACE_CONFIG = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_FACE_CONFIG),
    RESPONSE_FLAG_GET_FACE_SUPPORT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_FACE_SUPPORT),
    RESPONSE_FLAG_GET_AI_CONNECT_CNT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_AI_CONNECT_CNT),
    RESPONSE_FLAG_REMOTE_UPGRADE_CAMERA_INIT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_REMOTE_UPGRADE_CAMERA_INIT),
    RESPONSE_FLAG_REMOTE_UPGRADE_CAMERA_START = MAKE_RESPONSE_VALUE(REQUEST_FLAG_REMOTE_UPGRADE_CAMERA_START),
    RESPONSE_FLAG_GET_VAC_BASE_INFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VAC_BASE_INFO),
    RESPONSE_FLAG_GET_IMAGE_ENHANCEMENT_SCHEDULE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IMAGE_ENHANCEMENT_SCHEDULE),

    /////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////
    ///<----System Label---->
    RESPONSE_FLAG_GET_SYSINFO       = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_SYSINFO),
    RESPONSE_FLAG_GET_DISKINFO      = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_DISKINFO),
    RESPONSE_FLAG_FORMAT_DISK       = MAKE_RESPONSE_VALUE(REQUEST_FLAG_FORMAT_DISK),
    RESPONSE_FLAG_GET_SMART_ATTR    = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_SMART_ATTR),
    RESPONSE_FLAG_GET_SMART_PROCESS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_SMART_PROCESS),
    RESPONSE_FLAG_RET_SMART_TEST_START = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SMART_TEST_START),
    RESPONSE_FLAG_RET_BADBLOCK_START = MAKE_RESPONSE_VALUE(REQUEST_FLAG_BADBLOCKS_START),
    RESPONSE_FLAG_RET_BADBLOCK_PROCESS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_BADBLOCKS_PROCESS),
    RESPONSE_FLAG_GET_BADBLOCK_LOGPATH = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_BADBLOCKS_LOGPATH),
    RESPONSE_FLAG_TEST_MAIL = MAKE_RESPONSE_VALUE(REQUEST_FLAG_TEST_MAIL),
    RESPONSE_FLAG_UPGRADE_SYSTEM = MAKE_RESPONSE_VALUE(REQUEST_FLAG_UPGRADE_SYSTEM),
    RESPONSE_FLAG_CHECK_ONLINE_NVR = MAKE_RESPONSE_VALUE(REQUEST_FLAG_CHECK_ONLINE_NVR),
    RESPONSE_FLAG_GET_UPGRADE_IMAGE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_UPGRADE_IMAGE),
    RESPONSE_FLAG_DEL_UPGRADE_IMAGE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_DEL_UPGRADE_IMAGE),
    RESPONSE_FLAG_SET_AUTO_REBOOT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_AUTO_REBOOT),
    RESPONSE_FLAG_GET_ONLINE_USER = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_ONLINE_USER),
    RESPONSE_FLAG_SET_ONLINE_USER = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_ONLINE_USER),
    RESPONSE_FLAG_UPGRADE_SYSTEM_INIT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_UPGRADE_SYSTEM_INIT),
    RESPONSE_FLAG_SET_ACCESS_FILTER = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_ACCESS_FILTER),
    RESPONSE_FLAG_SET_DEFAULT_ROUTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_DEFAULT_ROUTE),
    RESPONSE_FLAG_GET_AUTO_REBOOT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_AUTO_REBOOT),
    RESPONSE_FLAG_SET_ONVIF = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_ONVIF),
    RESPONSE_FLAG_GET_NET_TEST_RES = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_NET_TEST_RES),
    RESPONSE_FLAG_GET_NETWORK_MULTICAST = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_NETWORK_MULTICAST),
    RESPONSE_FLAG_SET_NETWORK_MULTICAST = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_NETWORK_MULTICAST),
    RESPONSE_FLAG_SET_ENVIRONMENT_INFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_ENVIRONMENT_INFO),
    RESPONSE_FLAG_UPDATE_SNCODE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_UPDATE_SNCODE),
    RESPONSE_FLAG_GET_ONLINE_UPGRADE_INFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_ONLINE_UPGRADE_INFO),
    

    //RESPONSE_FLAG_GET_CHIP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_CHIP),
    RESPONSE_FLAG_GET_COMPONENT_SIZE_RAID = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_COMPONENT_SIZE_RAID),
    RESPONSE_FLAG_CREATE_RAID = MAKE_RESPONSE_VALUE(REQUEST_FLAG_CREATE_RAID),
    RESPONSE_FLAG_REMOVE_RAID = MAKE_RESPONSE_VALUE(REQUEST_FLAG_REMOVE_RAID),
    RESPONSE_FLAG_RENAME_RAID = MAKE_RESPONSE_VALUE(REQUEST_FLAG_RENAME_RAID),
    RESPONSE_FLAG_CREATE_SPACE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_CREATE_SPACE),
    RESPONSE_FLAG_REMOVE_SPACE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_REMOVE_SPACE),
    RESPONSE_FLAG_REBUILD_RAID = MAKE_RESPONSE_VALUE(REQUEST_FLAG_REBUILD_RAID),
    RESPONSE_FLAG_SET_RAID_MODE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_RAID_MODE),
    RESPONSE_FLAG_GET_RAID_MODE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_RAID_MODE),
    RESPONSE_FLAG_GET_REBUILD_PROGRESS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_REBUILD_PROGRESS),
    RESPONSE_FLAG_GET_CUR_CELL_PORT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_CUR_CELL_PORT),
    RESPONSE_FLAG_GET_USERINFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_USERINFO),

    RESPONSE_FLAG_GET_REC_ADVANCED = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_REC_ADVANCED),
//  RESPONSE_FLAG_SET_REC_ADVANCED = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_REC_ADVANCED),
    RESPONSE_FLAG_SET_REC_RECYCLEMODE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_REC_RECYCLEMODE),
    RESPONSE_FLAG_SET_REC_ESATAFUNTION = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_REC_ESATAFUNTION),

    RESPONSE_FLAG_GET_MSFS_DISKINFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_MSFS_DISKINFO),
    RESPONSE_FLAG_GET_ONE_DISKINFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_ONE_DISKINFO),
    RESPONSE_FLAG_FORMAT_MSFS_DISK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_FORMAT_MSFS_DISK),
    RESPONSE_FLAG_SET_MSFS_PORT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_MSFS_PORT),
    RESPONSE_FLAG_SET_MSFS_GROUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_MSFS_GROUP),
    RESPONSE_FLAG_ADD_MSFS_NAS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_ADD_MSFS_NAS),
    RESPONSE_FLAG_DEL_MSFS_NAS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_DEL_MSFS_NAS),
    RESPONSE_FLAG_ADD_MSFS_NAS_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_ADD_MSFS_NAS_REMOTE),
    RESPONSE_FLAG_DEL_MSFS_NAS_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_DEL_MSFS_NAS_REMOTE),

    RESPONSE_FLAG_SEARCH_ANPR_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_ANPR_BACKUP),
    RESPONSE_FLAG_PLAY_ANPR_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAY_ANPR_BACKUP),
    RESPONSE_FLAG_SEARCH_ANPR_BACKUP_CLOSE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_ANPR_BACKUP_CLOSE),
    RESPONSE_FLAG_LOCK_ANPR_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_LOCK_ANPR_BACKUP),
    RESPONSE_FLAG_EXPORT_ANPR_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_EXPORT_ANPR_BACKUP),
    RESPONSE_FLAG_SEARCH_ANPR_BACKUP_PAGE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_ANPR_BACKUP_PAGE),
    RESPONSE_FLAG_SEARCH_ANPR_BACKUP_CANCEL = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_ANPR_BACKUP_CANCEL),
    RESPONSE_FLAG_SEARCH_ANPR_BACKUP_BIGIMG = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_ANPR_BACKUP_BIGIMG),
    RESPONSE_FLAG_REMOTE_BACKUP_START = MAKE_RESPONSE_VALUE(REQUEST_FLAG_REMOTE_BACKUP_START),
    RESPONSE_FLAG_REMOTE_BACKUP_START_DATA = MAKE_RESPONSE_VALUE(REQUEST_FLAG_REMOTE_BACKUP_START_DATA),
    RESPONSE_FLAG_REMOTE_BACKUP_STOP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_REMOTE_BACKUP_STOP),
    RESPONSE_FLAG_SEARCH_ANPR_BACKUP_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_ANPR_BACKUP_REMOTE),
    RESPONSE_FLAG_SEARCH_ANPR_BACKUP_PAGE_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_ANPR_BACKUP_PAGE_REMOTE),
    RESPONSE_FLAG_SEARCH_ANPR_BACKUP_CLOSE_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_ANPR_BACKUP_CLOSE_REMOTE),
    RESPONSE_FLAG_SEARCH_ANPR_BACKUP_BIGIMG_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_ANPR_BACKUP_BIGIMG_REMOTE),

    RESPONSE_FLAG_SEARCH_FACE_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_FACE_BACKUP),
    RESPONSE_FLAG_PLAY_FACE_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAY_FACE_BACKUP),
    RESPONSE_FLAG_SEARCH_FACE_BACKUP_CLOSE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_FACE_BACKUP_CLOSE),
    RESPONSE_FLAG_EXPORT_FACE_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_EXPORT_FACE_BACKUP),
    RESPONSE_FLAG_SEARCH_FACE_BACKUP_PAGE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_FACE_BACKUP_PAGE),
    RESPONSE_FLAG_SEARCH_FACE_BACKUP_CANCEL = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_FACE_BACKUP_CANCEL),
    RESPONSE_FLAG_SEARCH_FACE_BACKUP_BIGIMG = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_FACE_BACKUP_BIGIMG),
    RESPONSE_FLAG_SEARCH_FACE_BACKUP_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_FACE_BACKUP_REMOTE),
    RESPONSE_FLAG_SEARCH_FACE_BACKUP_PAGE_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_FACE_BACKUP_PAGE_REMOTE),
    RESPONSE_FLAG_SEARCH_FACE_BACKUP_CLOSE_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_FACE_BACKUP_CLOSE_REMOTE),
    RESPONSE_FLAG_SEARCH_FACE_BACKUP_BIGIMG_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_FACE_BACKUP_BIGIMG_REMOTE),
    RESPONSE_FLAG_SEARCH_EVT_BASE_INFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_EVT_BASE_INFO),
    RESPONSE_FLAG_SEARCH_PUSHMSG_PICTURES = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_PUSHMSG_PICTURES),

    
    RESPONSE_FLAG_PRIVATE_MSFS_DISK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PRIVATE_MSFS_DISK),
    RESPONSE_FLAG_LOCK_COM_BACKUP_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_LOCK_COM_BACKUP_REMOTE),
    RESPONSE_FLAG_REMOTE_BACKUP_SPACE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_REMOTE_BACKUP_SPACE),
    RESPONSE_FLAG_EXPORT_DIAGNOSTIC_LOG = MAKE_RESPONSE_VALUE(REQUEST_FLAG_EXPORT_DIAGNOSTIC_LOG),
    RESPONSE_FLAG_ADD_AUTO_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_ADD_AUTO_BACKUP),
    RESPONSE_FLAG_UPDATE_AUTO_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_UPDATE_AUTO_BACKUP),
    RESPONSE_FLAG_UPDATE_MSFS_NAS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_UPDATE_MSFS_NAS),
    RESPONSE_FLAG_SEARCH_MSFS_NAS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_MSFS_NAS),
    RESPONSE_FLAG_RENAME_MSFS_NAS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_RENAME_MSFS_NAS),
    RESPONSE_FLAG_SET_MSFS_MODE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_MSFS_MODE),
    RESPONSE_FLAG_GET_REC_RANGE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_REC_RANGE),
    RESPONSE_FLAG_SEARCH_COM_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_COM_BACKUP),
    RESPONSE_FLAG_PLAY_COM_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAY_COM_BACKUP),
    RESPONSE_FLAG_SEARCH_COM_BACKUP_CLOSE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_COM_BACKUP_CLOSE),
    RESPONSE_FLAG_LOCK_COM_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_LOCK_COM_BACKUP),


    RESPONSE_FLAG_INSTALL_CERT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_INSTALL_CERT),
    RESPONSE_FLAG_CREATE_CERT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_CREATE_CERT),
    RESPONSE_FLAG_FORMAT_DISK_WEB   = MAKE_RESPONSE_VALUE(REQUEST_FLAG_FORMAT_DISK_WEB),

    RESPONSE_FLAG_SEARCH_EVT_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_EVT_BACKUP),
    RESPONSE_FLAG_PLAY_EVT_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAY_EVT_BACKUP),
    RESPONSE_FLAG_SEARCH_EVT_BACKUP_CLOSE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_EVT_BACKUP_CLOSE),
    RESPONSE_FLAG_LOCK_EVT_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_LOCK_EVT_BACKUP),

    RESPONSE_FLAG_SEARCH_PIC_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_PIC_BACKUP),
    RESPONSE_FLAG_PLAY_PIC_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAY_PIC_BACKUP),
    RESPONSE_FLAG_SEARCH_PIC_BACKUP_CLOSE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_PIC_BACKUP_CLOSE),

    RESPONSE_FLAG_EXPORT_COMMON_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_EXPORT_COMMON_BACKUP),
    RESPONSE_FLAG_STOP_COMMONM_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_STOP_COMMONM_BACKUP),

    RESPONSE_FLAG_GET_EXPORT_DISK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_EXPORT_DISK),
    RESPONSE_FLAG_FORMAT_EXPORT_DISK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_FORMAT_EXPORT_DISK),

    RESPONSE_FLAG_EXPORT_EVENT_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_EXPORT_EVENT_BACKUP),
    RESPONSE_FLAG_STOP_EVENT_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_STOP_EVENT_BACKUP),

    RESPONSE_FLAG_EXPORT_PICTURE_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_EXPORT_PICTURE_BACKUP),
    RESPONSE_FLAG_STOP_PICTURE_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_STOP_PICTURE_BACKUP),

    RESPONSE_FLAG_PLAYSTOP_COM_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAYSTOP_COM_BACKUP),
    RESPONSE_FLAG_PLAYSTOP_EVT_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAYSTOP_EVT_BACKUP),
    RESPONSE_FLAG_PLAYSTOP_PIC_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAYSTOP_PIC_BACKUP),

    RESPONSE_FLAG_PLAYPAUSE_COM_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAYPAUSE_COM_BACKUP),
    RESPONSE_FLAG_PLAYPAUSE_EVT_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAYPAUSE_EVT_BACKUP),
    RESPONSE_FLAG_PLAYPAUSE_PIC_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAYPAUSE_PIC_BACKUP),

    RESPONSE_FLAG_PLAYRESTART_COM_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAYRESTART_COM_BACKUP),
    RESPONSE_FLAG_PLAYRESTART_EVT_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAYRESTART_EVT_BACKUP),
    RESPONSE_FLAG_PLAYRESTART_PIC_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAYRESTART_PIC_BACKUP),
    RESPONSE_FLAG_PLAYSEEK_BACKUP = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAYSEEK_BACKUP),
    RESPONSE_FLAG_GET_SEARCH_COM_PAGE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_SEARCH_COM_PAGE),
    RESPONSE_FLAG_GET_SEARCH_EVT_PAGE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_SEARCH_EVT_PAGE),

    RESPONSE_FLAG_SET_PBPIP_ACTION = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_PBPIP_ACTION),
    RESPONSE_FLAG_SET_PBPIP_SEEK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_PBPIP_SEEK),
    RESPONSE_FLAG_PLAY_COM_PICTURE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAY_COM_PICTURE),
    RESPONSE_FLAG_PLAY_EVT_PICTURE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAY_EVT_PICTURE),

    RESPONSE_FLAG_LOG_SEARCH = MAKE_RESPONSE_VALUE(REQUEST_FLAG_LOG_SEARCH),
    RESPONSE_FLAG_LOG_SEARCH_FREE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_LOG_SEARCH_FREE),
    RESPONSE_FLAG_LOG_SEARCH_CANCEL = MAKE_RESPONSE_VALUE(REQUEST_FLAG_LOG_SEARCH_CANCEL),
    RESPONSE_FLAG_LOG_SEARCH_PAGE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_LOG_SEARCH_PAGE),
    RESPONSE_FLAG_LOG_WRITE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_LOG_WRITE),
    RESPONSE_FLAG_LOG_EXPORT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_LOG_EXPORT),
    RESPONSE_FLAG_LOG_EXPORT_CANCEL = MAKE_RESPONSE_VALUE(REQUEST_FLAG_LOG_EXPORT_CANCEL),
    RESPONSE_FLAG_LOG_GET_DETAIL = MAKE_RESPONSE_VALUE(REQUEST_FLAG_LOG_GET_DETAIL),

    RESPONSE_FLAG_GET_MONTH_EVENT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_MONTH_EVENT),
    RESPONSE_FLAG_LOG_WEB_EXPORT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_LOG_WEB_EXPORT),
    RESPONSE_FLAG_LOG_WEB_SEARCH = MAKE_RESPONSE_VALUE(REQUEST_FLAG_LOG_WEB_SEARCH),
    RESPONSE_FLAG_DEL_MSFS_LOCAL = MAKE_RESPONSE_VALUE(REQUEST_FLAG_DEL_MSFS_LOCAL),
    RESPONSE_FLAG_UDISK_OFFLINE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_UDISK_OFFLINE),
    RESPONSE_FLAG_DEBUG_LOG_WRITE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_DEBUG_LOG_WRITE),
    RESPONSE_FLAG_GET_SEARCH_PIC_PAGE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_SEARCH_PIC_PAGE),
    RESPONSE_FLAG_CHECK_AUDIOTALK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_CHECK_AUDIOTALK),
    RESPONSE_FLAG_GET_AUDIOFILE_INFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_AUDIOFILE_INFO),
    RESPONSE_FLAG_ADD_AUDIOFILE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_ADD_AUDIOFILE),
    RESPONSE_FLAG_DEL_AUDIOFILE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_DEL_AUDIOFILE),
    RESPONSE_FLAG_EDIT_AUDIOFILE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_EDIT_AUDIOFILE),
    RESPONSE_FLAG_PLAY_AUDIOFILE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAY_AUDIOFILE),
    RESPONSE_FLAG_GET_AUDIOFILE_PALY_STATUS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_AUDIOFILE_PALY_STATUS),
    RESPONSE_FLAG_STOP_AUDIO_TALK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_STOP_AUDIO_TALK),
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    ///<----Web Label---->
    RESPONSE_FLAG_ADD_REMOTELIVE        = MAKE_RESPONSE_VALUE(REQUEST_FLAG_ADD_REMOTELIVE),
    RESPONSE_FLAG_GET_REMOTEPB_RECORD   = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_REMOTEPB_RECORD),
    RESPONSE_FLAG_PLAYBACK_REMOTE       = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAYBACK_REMOTE),
    RESPONSE_FLAG_GET_REMOTEPB_RTSPADDR = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_REMOTEPB_RTSPADDR),
    RESPONSE_FLAG_GET_REMOTELIVE_RTSPADDRS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_REMOTELIVE_RTSPADDRS),
    RESPONSE_FLAG_WEB_AUTO_LOGIN_CHECK  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_WEB_AUTO_LOGIN_CHECK),
    RESPONSE_FLAG_USER_UPDATE           = MAKE_RESPONSE_VALUE(REQUEST_FLAG_USER_UPDATE),
    RESPONSE_FLAG_PLAYBACK_REMOTE_CHNS  = MAKE_RESPONSE_VALUE(REQUEST_FLAG_PLAYBACK_REMOTE_CHNS),
    RESPONSE_FLAG_GET_EXTERN_PORT       = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_EXTERN_PORT),
    RESPONSE_FLAG_GET_MSFS_QUOTA        = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_MSFS_QUOTA),
    RESPONSE_FLAG_SET_MSFS_QUOTA        = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_MSFS_QUOTA),
    RESPONSE_FLAG_GET_MSFS_GROUP        = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_MSFS_GROUP),
    RESPONSE_FLAG_FORMAT_ESATA_DISK     = MAKE_RESPONSE_VALUE(REQUEST_FLAG_FORMAT_ESATA_DISK),
    RESPONSE_FLAG_GET_AUTO_BACKUP_STATUS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_AUTO_BACKUP_STATUS),
    RESPONSE_FLAG_STOP_AUTO_BACKUP_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_STOP_AUTO_BACKUP_REMOTE),
    RESPONSE_FLAG_STOP_AUTO_BACKUP_GUI = MAKE_RESPONSE_VALUE(REQUEST_FLAG_STOP_AUTO_BACKUP_GUI),
    RESPONSE_FLAG_GUI_AUTO_BACKUP_INFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GUI_AUTO_BACKUP_INFO),
    RESPONSE_FLAG_GET_FORMAT_INFO_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_FORMAT_INFO_REMOTE),
    RESPONSE_FLAG_SEARCH_POS_OPEN = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_POS_OPEN),
    RESPONSE_FLAG_SEARCH_POS_CLOSE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_POS_CLOSE),
    RESPONSE_FLAG_SEARCH_POS_PAGE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_POS_PAGE),
    RESPONSE_FLAG_SEARCH_POS_DETAILS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_POS_DETAILS),
    RESPONSE_FLAG_SEARCH_POS_EXPORT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_POS_EXPORT),
    RESPONSE_FLAG_SEARCH_POS_CANCEL = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_POS_CANCEL),
    RESPONSE_FLAG_SEARCH_PIC_BACKUP_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_PIC_BACKUP_REMOTE),
    RESPONSE_FLAG_SEARCH_PIC_PAGE_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_PIC_PAGE_REMOTE),
    RESPONSE_FLAG_SEARCH_PIC_INDEX_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_PIC_INDEX_REMOTE),
    RESPONSE_FLAG_SEARCH_PIC_CLOSE_REMOTE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_PIC_CLOSE_REMOTE),
    RESPONSE_FLAG_GET_DISK_HEALTH_MANAGEMENT_DATA = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_DISK_HEALTH_MANAGEMENT_DATA),
    RESPONSE_FLAG_GET_DISK_HEALTH_MANAGEMENT_LOG = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_DISK_HEALTH_MANAGEMENT_LOG),
    RESPONSE_FLAG_SET_DISK_HEALTH_MANAGEMENT_DATA = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_DISK_HEALTH_MANAGEMENT_DATA),

    ///////////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////////////////////////////
    /// sdk only
    RESPONSE_FLAG_GET_RECPARAM = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_RECPARAM),
    RESPONSE_FLAG_GET_RECSCHED = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_RECSCHED),
    RESPONSE_FLAG_GET_HOLIDAYS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_HOLIDAYS),
    RESPONSE_FLAG_GET_MOTION = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_MOTION),
    RESPONSE_FLAG_GET_MOTION_SCHEDULE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_MOTION_SCHEDULE),
    RESPONSE_FLAG_GET_VIDEOLOSS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VIDEOLOSS),
    RESPONSE_FLAG_GET_ALARMIN = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_ALARMIN),
    RESPONSE_FLAG_GET_ALARMOUT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_ALARMOUT),

    RESPONSE_FLAG_SET_ALARMIN = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_ALARMIN),

    RESPONSE_FLAG_GET_NETWORK_PARAM = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_NETWORK_PARAM),
    RESPONSE_FLAG_GET_NETWORK_PPPOE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_NETWORK_PPPOE),
    RESPONSE_FLAG_GET_NETWORK_DDNS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_NETWORK_DDNS),
    RESPONSE_FLAG_GET_NETWORK_MAIL = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_NETWORK_MAIL),
    RESPONSE_FLAG_GET_NETWORK_MORE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_NETWORK_MORE),
    RESPONSE_FLAG_GET_SYSTIME = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_SYSTIME),
    RESPONSE_FLAG_SET_SYSTIME = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_SYSTIME),

    RESPONSE_FLAG_GET_PTZ_SERIAL_PORT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_PTZ_SERIAL_PORT),
    RESPONSE_FLAG_P2P_STATUS_INFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_P2P_STATUS_INFO),
    RESPONSE_FLAG_P2P_GET_PCNT_DATA = MAKE_RESPONSE_VALUE(REQUEST_FLAG_P2P_GET_PCNT_DATA),

    RESPONSE_P2P_TWOWAY_AUDIO_OPEN = MAKE_RESPONSE_VALUE(REQUEST_P2P_TWOWAY_AUDIO_OPEN),
    RESPONSE_P2P_TWOWAY_AUDIO_CLOSE = MAKE_RESPONSE_VALUE(REQUEST_P2P_TWOWAY_AUDIO_CLOSE),
    RESPONSE_P2P_TWOWAY_AUDIO_DATA = MAKE_RESPONSE_VALUE(REQUEST_P2P_TWOWAY_AUDIO_DATA),
    RESPONSE_FLAG_GET_CAM_PARAM = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_CAMERA_PARAM),
    RESPONSE_FLAG_GET_ALL_CAM_PARAM = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_ALL_CAMERA_PARAM),
    RESPONSE_FLAG_GET_OSD = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_OSD),
    RESPONSE_FLAG_GET_MAINTAINCE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_MAINTENCE),
    RESPONSE_FLAG_GET_IPCPROTOCOL = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPCPROTOCOL),

    RESPONSE_FLAG_GET_AUTH = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_AUTH),
    RESPONSE_FLAG_ENABLE_P2P = MAKE_RESPONSE_VALUE(REQUEST_FLAG_ENABLE_P2P),
    RESPONSE_FLAG_DISABLE_P2P = MAKE_RESPONSE_VALUE(REQUEST_FLAG_DISABLE_P2P),
    RESPONSE_FLAG_GET_USER = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_USER),
    RESPONSE_FLAG_GET_USERCOUNT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_USERCOUNT),
    RESPONSE_FLAG_SDK_CHECK_VERSION = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SDK_CHECK_VERSION),
    RESPONSE_FLAG_GET_SYSSTATUS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_SYSSTATUS),

    RESPONSE_FLAG_SENDTO_QT_CMD = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SENDTO_QT_CMD),
    RESPONSE_FLAG_GET_QT_CMD_RESULT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_QT_CMD_RESULT),
    RESPONSE_FLAG_GET_USER_INFO = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_USER_INFO),
    RESPONSE_FLAG_GET_CHIP_CODE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_CHIP_CODE),
    RESPONSE_FLAG_P2P_SEND_FIMAGE_INIT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_P2P_SEND_FIMAGE_INIT),
    RESPONSE_FLAG_P2P_SEND_FIMAGE_DATA = MAKE_RESPONSE_VALUE(REQUEST_FLAG_P2P_SEND_FIMAGE_DATA),
    RESPONSE_FLAG_P2P_EXPORT_CONFIG = MAKE_RESPONSE_VALUE(REQUEST_FLAG_P2P_EXPORT_CONFIG),
    RESPONSE_FLAG_P2P_IMPORT_CONFIG = MAKE_RESPONSE_VALUE(REQUEST_FLAG_P2P_IMPORT_CONFIG),
    RESPONSE_FLAG_CHANGE_PASSWORD = MAKE_RESPONSE_VALUE(REQUEST_FLAG_CHANGE_PASSWORD),
    RESPONSE_FLAG_KEY_TOOL = MAKE_RESPONSE_VALUE(REQUEST_FLAG_KEY_TOOL),
    RESPONSE_FLAG_P2P_CREAT_CHAN = MAKE_RESPONSE_VALUE(REQUEST_FLAG_P2P_CREAT_CHAN),
    RESPONSE_FLAG_P2P_CLOSE_CHAN = MAKE_RESPONSE_VALUE(REQUEST_FLAG_P2P_CLOSE_CHAN),
    RESPONSE_FLAG_SEARCH_NVR = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SEARCH_NVR),
    RESPONSE_FLAG_P2P_SET_USER = MAKE_RESPONSE_VALUE(REQUEST_FLAG_P2P_SET_USER),
    RESPONSE_FLAG_QUERY_ANR = MAKE_RESPONSE_VALUE(REQUEST_FLAG_QUERY_ANR),
    RESPONSE_FLAG_GET_ANR_SUPPORT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_ANR_SUPPORT),
    RESPONSE_FLAG_SET_ANR_SUPPORT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_ANR_SUPPORT),
    RESPONSE_FLAG_P2P_CREAT_WRITE_CHAN = MAKE_RESPONSE_VALUE(REQUEST_FLAG_P2P_CREAT_WRITE_CHAN),
    RESPONSE_FLAG_P2P_CLOSE_WRITE_CHAN = MAKE_RESPONSE_VALUE(REQUEST_FLAG_P2P_CLOSE_WRITE_CHAN),
    RESPONSE_FLAG_SET_ALARM_PUSH_NAME = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_ALARM_PUSH_NAME),

    RESPONSE_FLAG_UPDATE_PEOPLECNT_SETTING = MAKE_RESPONSE_VALUE(REQUEST_FLAG_UPDATE_PEOPLECNT_SETTING),
    RESPONSE_FLAG_SET_PEOPLECNT_DB_RESET = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_PEOPLECNT_DB_RESET),
    RESPONSE_FLAG_SET_PEOPLECNT_LIVEVIEW_RESET = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_PEOPLECNT_LIVEVIEW_RESET),
    RESPONSE_FLAG_SET_PEOPLECNT_LIVEVIEW_ACTION = MAKE_RESPONSE_VALUE(REQUEST_FLAG_UPDATE_PEOPLECNT_ACTION),
    RESPONSE_FLAG_GET_PEOPLECNT_ACTION = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_PEOPLECNT_ACTION),
    RESPONSE_FLAG_SET_PEOPLECNT_ACTION = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_PEOPLECNT_ACTION),
    RESPONSE_FLAG_GET_PEOPLECNT_SETTINGS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_PEOPLECNT_SETTINGS),
    RESPONSE_FLAG_SET_PEOPLECNT_SETTINGS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_PEOPLECNT_SETTINGS),
    RESPONSE_FLAG_SET_PEOPLECNT_CACHETODB = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_PEOPLECNT_CACHETODB),
    RESPONSE_FLAG_GET_PUSH_MSG = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_PUSH_MSG),
    RESPONSE_FLAG_GET_ALARM_PUSH_MEM = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_ALARM_PUSH_MEM),
    RESPONSE_FLAG_GET_PUSH_MSG_MEM = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_PUSH_MSG_MEM),

    RESPONSE_FLAG_GET_IPC_HEATMAP_SUPPORT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_HEATMAP_SUPPORT),
    RESPONSE_FLAG_GET_IPC_PEOPLECNT_LINECNT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_PEOPLECNT_LINECNT),
    RESPONSE_FLAG_GET_HTTP_NOTIFICATION = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_HTTP_NOTIFICATION),
    RESPONSE_FLAG_SET_HTTP_NOTIFICATION = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_HTTP_NOTIFICATION),
    RESPONSE_FLAG_SET_EXCEPT_HTTP_PARAMS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_EXCEPT_HTTP_PARAMS),

    RESPONSE_FLAG_SET_IPC_REBOOT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_REBOOT),
    RESPONSE_FLAG_SET_IPC_RESET = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_RESET),
    RESPONSE_FLAG_GET_IPC_DIAGNOSE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_DIAGNOSE),
    RESPONSE_FLAG_GET_IPC_CFG = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_CFG),
    RESPONSE_FLAG_SET_IPC_CFG = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_CFG),
    RESPONSE_FLAG_GET_IPC_LOG = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_LOG),
    RESPONSE_FLAG_ADD_HOTSPARE_MASTERS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_ADD_HOTSPARE_MASTERS),
    RESPONSE_FLAG_DEL_HOTSPARE_MASTERS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_DEL_HOTSPARE_MASTERS),
    RESPONSE_FLAG_GET_VCA_ALARM = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VCA_ALARM),
    RESPONSE_FLAG_GET_VCA_DYNAMIC_BOX = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_VCA_DYNAMIC_BOX),
    RESPONSE_FLAG_GET_IPC_AUDIO_ALARM = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_AUDIO_ALARM),
    RESPONSE_FLAG_SET_IPC_AUDIO_ALARM = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_AUDIO_ALARM),
    RESPONSE_FLAG_UPDATE_IPC_AUDIO_ALARM_ACTION = MAKE_RESPONSE_VALUE(REQUEST_FLAG_UPDATE_IPC_AUDIO_ALARM_ACTION),
    RESPONSE_FLAG_GET_IPC_AUDIO_ALARM_SAMPLE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_AUDIO_ALARM_SAMPLE),

    RESPONSE_FLAG_BOA_CLEAR_EXPORT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_BOA_CLEAR_EXPORT),

    RESPONSE_FLAG_GET_IPC_ALARMSTATUS_BATCH = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_ALARMSTATUS_BATCH),
    RESPONSE_FLAG_GET_IPC_PTZ_WIPER = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_PTZ_WIPER),
    RESPONSE_FLAG_SET_IPC_PTZ_WIPER = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_PTZ_WIPER),
    RESPONSE_FLAG_GET_IPC_PTZ_AUTO_HOME = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_PTZ_AUTO_HOME),
    RESPONSE_FLAG_SET_IPC_PTZ_AUTO_HOME = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_PTZ_AUTO_HOME),
    RESPONSE_FLAG_SET_IPC_PTZ_INITIAL_POSITION = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_PTZ_INITIAL_POSITION),
    RESPONSE_FLAG_SET_IPC_PTZ_CONFIG_CLEAR = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_PTZ_CONFIG_CLEAR),
    RESPONSE_FLAG_GET_IPC_PTZ_LIMIT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_PTZ_LIMIT),
    RESPONSE_FLAG_SET_IPC_PTZ_LIMIT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_PTZ_LIMIT),
    RESPONSE_FLAG_GET_IPC_PTZ_SCHE_TASK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_PTZ_SCHE_TASK),
    RESPONSE_FLAG_SET_IPC_PTZ_SCHE_TASK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_PTZ_SCHE_TASK),
    RESPONSE_FLAG_SET_IPC_PTZ_CONTROL_JSON = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_PTZ_CONTROL_JSON),
    RESPONSE_FLAG_GET_IPC_PTZ_PANEL_STATUS = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_PTZ_PANEL_STATUS),
    RESPONSE_FLAG_SET_P2P_AUDIO_TALK = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_P2P_AUDIO_TALK),
    RESPONSE_FLAG_GET_P2P_AUDIO_TALK_SUPPORT = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_P2P_AUDIO_TALK_SUPPORT),
    RESPONSE_FLAG_GET_IPC_CAP_IMAGE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_CAP_IMAGE),
    RESPONSE_FLAG_GET_NETWORK_KEYBOARD = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_NETWORK_KEYBOARD),
    RESPONSE_FLAG_ADD_NETWORK_KEYBOARD = MAKE_RESPONSE_VALUE(REQUEST_FLAG_ADD_NETWORK_KEYBOARD),
    RESPONSE_FLAG_DELETE_NETWORK_KEYBOARD = MAKE_RESPONSE_VALUE(REQUEST_FLAG_DELETE_NETWORK_KEYBOARD),
    RESPONSE_FLAG_P2P_DEL_USER = MAKE_RESPONSE_VALUE(REQUEST_FLAG_P2P_DEL_USER),
    RESPONSE_FLAG_GET_IPC_IMAGE_SPLICEDISTANCE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_GET_IPC_IMAGE_SPLICEDISTANCE),
    RESPONSE_FLAG_SET_IPC_IMAGE_SPLICEDISTANCE = MAKE_RESPONSE_VALUE(REQUEST_FLAG_SET_IPC_IMAGE_SPLICEDISTANCE),
    // common response enum end
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    ///<----others ---->
    RESPONSE_FLAG_RET_RECEXCEPT = 15000,
    RESPONSE_FLAG_POWER_SHORT = 15001,
    RESPONSE_FLAG_POWER_LONG = 15002,
    RESPONSE_FLAG_SET_SEQUENCE = 15003,
    RESPONSE_FLAG_NOTIFYGUI = 15004,
    RESPONSE_FLAG_BANDWIDTH_FULL = 15005,
    RESPONSE_FLAG_RET_RECSTATUS = 15006,
    RESPONSE_FLAG_PROGRESS_DISK_INIT = 15007,
    RESPONSE_FLAG_PROGRESS_RAID_CREATE = 15008,
    RESPONSE_FLAG_PROGRESS_RAID_REBUILD = 15009,
    RESPONSE_FLAG_PROGRESS_RETRIEVE_INIT = 15010,
    RESPONSE_FLAG_PROGRESS_RETRIEVE = 15011,
    RESPONSE_FLAG_PROGRESS_RETRIEVE_EXPORT = 15012,
    RESPONSE_FLAG_INFOMATION_SHOW = 15013,
    RESPONSE_FLAG_PROGRESS_LOG = 15014,
    RESPONSE_FLAG_PROGRESS_LOG_EXPORT = 15015,
    RESPONSE_FLAG_PROGRESS_DISK_LOAD = 15016,
    RESPONSE_FLAG_NOTIFY_POPUP_GUI = 15017,

    //通知gui生成人数统计相关文件，csv，jpeg，pdf
    RESPONSE_FLAG_GUI_PEOPLECNT_AUTO_BACKUP = 16000,

    RESPONSE_FLAG_MSG_IS_FULL = 19999,
};

struct resp_get_exception {
    time_t time;
    char pEvent[MAX_LEN_64];
    char pInformation[MAX_LEN_64];
};

struct resp_event_status {
    long long video_loss; ///< bit mask, each bit represent a channel
    long long motion_detect; ///< similar as above
    int alarm_out; ///< alarm out bit mask
    int alarm_in; ///< sensor bit mask
    long long regionin_detect; ///< similar as above
    long long regionexit_detect; ///< similar as above
    long long advanced_motion_detect; ///< similar as above
    long long tamper_detect; ///< similar as above
    long long linecross_detect; ///< similar as above
    long long loiter_detect; ///< similar as above
    long long human_detect; ///< similar as above
    long long object_left_remove; ///< similar as above
    Uint64 audioAlarm;
    int peopel_count[MAX_CAMERA][2]; /// people count in & out
    Uint64 ipc_alarm_in[MAX_IPC_ALARM_IN];
    Uint64 ipc_alarm_out[MAX_IPC_ALARM_OUT];
    Uint64 ipc_alarm_in_type[MAX_IPC_ALARM_IN];
    Uint64 ipc_alarm_out_type[MAX_IPC_ALARM_OUT];
    int exceptionCnt;
    struct resp_get_exception exceptions[MAX_EXCEPTION_INFO_NUM];
};

enum netif_id {
    NETIF_LAN0 = 0,
    NETIF_LAN1,
    NETIF_BOND0,
    NETIF_PPPOE,
};

struct resp_network_speed {
    char ifname[10];
    int rx_speed;
    int tx_speed;
    int netif_id;
};

struct resp_network_info {
    char ifname[10];
    int netif_id;
    int conn_stat;
    int speed_mode;
    int duplex;
    int enable;
    int dhcp_enable;

    char ip[24];
    char mac[24];
    char primary_dns[24];
    char second_dns[24];
    char gateway[24];
    char netmask[24];
    int mtu;


    char ip6_mode;//hrz.milesight 0=static,1=ra,2=dhcp
    char ip6_address[64];
    int ip6_prefix;
    char ip6_gateway[64];//end
};

struct resp_playback_remote {
    int sid;
    char real_time[32];
    int except;
};

struct resp_get_remotepb_rtspaddr {
    int sid;
    int port;
    int external_port;
    int external_http_port;
    int ddns_port;
    int ddns_http_port;
    char respath[128];
};

struct resp_remote_live {
    int chanid;
    int port;
    int external_port;
    int ddns_port;

    int external_http_port;
    int ddns_http_port;

    int direct;
    int result;
    char username[32];
    char password[32];
    char rtspaddr[256];
    char respath[128];
};

struct resp_get_remotelive_rtspaddrs {
    int chanid;
    char ipc_main[256];
    char ipc_sub[256];
    struct resp_remote_live nvr_main;
    struct resp_remote_live nvr_sub;
};

struct resp_get_remotepb_record {
    int chanid;
    char rec_info[1440];
    long search_time;
};

enum notify_gui_type {
    MOTION_STATE = 0,
    VIDEOLOSS_STATE,
    POP_CHANS,
    NO_RESOURCE,
    DISK_FAIL,
    CODEC_CHANGE,
    CODEC_NOMATCH,
    POPUP_CHANS,            //event popup
    SMART_EVENT_STATE,      //8
    SMART_REGIONIN_STATE,
    SMART_REGIONEXIT_STATE,
    SMART_ADVANCED_MOTION_STATE,
    SMART_TAMPER_STATE,
    SMART_LINRCORSS_STATE,
    SMART_LOITER_STATE,
    SMART_HUMAN_STATE,
    SMART_OBJECT_STATE,
    ANPR_STATE,
    AUDIO_STATE,
    MAX_NOTIFY_TYPE
};

struct resp_notify_gui {
    int type;
    int livepb;
    Uint64 chans;
};

struct resp_notify_popup_gui {
    int type;
    int livepb;
    //int chnid;
    Uint64 state;
    int layout;
    int channels[MAX_CAMERA];
};


struct req_raid {
    int id;//start at 10,min=10 < SATA_MAX
    int enable;
    int level;
    int state;
    int progress;
    int sata_cnt;
    int sata_port[SATA_MAX];
    int task;
    unsigned long long min_hdd_size; //hjh.milesight 20170323 add min hdd size for raid rebuild.
};
struct raid_remove {
    int result;
    int port;
};
struct resp_get_diskinfo {
    char mntpath[32];
    char vendor[32];
    /// unit(KB)
    unsigned long long total; ///< capacity
    unsigned long long used; ///< space used
    unsigned long long free; ///< space free
    unsigned long long ioctl_total; //hjh.milesight 20170320 add  ioctl BLKGETSIZE64 size, for raid rebuild.
    int port;
    int state;
    int hddtype;
    int inuse;
    int recylemode;
    int smart_res;
    struct req_raid raid;
};

struct resp_get_imageparam {
    int chanid;
    int brightness;
    int contrast;
    int saturation;
    int sharpness;
    int nflevel;
    int nf2level;
    int result;
    int supportLpr;
    int isNtPlatform;
    int isPanoramaStitch;
};

struct resp_ret_rectask {
    int chanid;
    int enable;  // 0:no 1:yes
    int recType;
    int result;
};

struct resp_get_pbdayinfo {
    long time;
    char dayinfo[31];
};

struct resp_get_pbhourinfo {
    int  chanid;
    char hourinfo[1440];
    char resinfo[1440];
    int  max_res;
};

struct resq_playback_info {
    int sid;
    int except;

};

struct resq_get_ipcdev {
    int  chanid;
    int  port;
    int  protocol;
    int  state;
    int  main_rtsp_port;
    char ipaddr[32];
    char manufacturer[64];
    char hwid[128];
    //固定值，用来区分Milesight IPC
    char sn[128];
    char fwversion[64];
    char mac[48];
    char model[64];
    int  model_id;
    char mrespath[128];
    char srespath[128];
    int poe_channel;
    int physical_port;
    int alarmin;
    int alarmout;
    int whiteled;
    int led_alarm;
    int led_manual;
    int minorid;
    int sub_state;
    IPC_CONNECT_STATUS connect_state;
    //ipc system_sn_code
    char real_sn[64];
    char ddns[MAX_LEN_64];
    char chipinfo[MAX_LEN_64];
};

struct resq_search_ipc {
    char ipaddr[32];
    char mac[32];
    int  port;
    int  protocol;
    char manufacturer[64];
    char hwid[128];
    char sn[128]; ///< serial number
    char fwversion[64];
    char model[64];
    int model_id;
    char netmask[32];
    char dns[32];
    char gateway[32];
    char netif_from[6];
    int active_status;
    char device_name[64];
    char real_sn[64];
};

struct smart_info {
    char name[30];
    char type[16];
    char update[16];
    char failed[16];
    char raw_val[24];
    int id;
    int flag;
    int val;
    int worst;
    int thresh;
    int status;
};

struct smart_status {
    int uptime;
    int temperature;
    int status;
    char result[24];
};

struct resp_get_smart_attr {
    struct smart_status status;
    int attrsize;
};

struct resp_get_bblk_path {
    char path[64];
    int port;
};

/////////////////////////////////////////////////
struct ipc_resolution {
    int width;
    int height;
};

struct ipc_param_range {
    struct ipc_resolution res[24]; ///< resolutions that camera support
    int framerate_max;
    int framerate_min;
    int bitrate_max;
    int bitrate_min;
    int vcodec_type;

    struct ipc_resolution cur_res;
    int framerate;
    int bitrate;
    int iframeinterval;
    int rateControl;
    int iframeIntervalMin;//I帧间隔最小值，暂不处理
    int iframeIntervalMax;//I帧间隔最大值，暂定第三方IPC且该值大于0时，才有效
};

struct resp_get_ipc_param {
    int ret;///< 0 success, -1 fail;
    int chnid; ///< channel
    struct ipc_param_range main_range;
    struct ipc_param_range sub_range;
    int sub_enable; ///< enable sub stream?
    int audio_enable;
    int videoType_enable;  //Is HI IPC
    int ipc_type;       //Ti | hisi | amba | other camera

    int mainStream;
    int sub_stream; //2:substream 3:thirdstream

    int supportsmartstream;
    int smartStream; // 0:off 1:on
    int smartStream_level; //
    int subSupportSmartStream;
    int subSmartStream; // 0:off 1:on
    int subSmartStream_level; //
    int streamGop[3];

    char productmodel[MAX_LEN_64];
};

struct resp_get_motionmap {
    int enable;
    char mapbuf[300];
    int sensitivity;    /** ms: [1,10] */
    int chanid;
    int result;
    //for fisheye
    int modelType;
    int fishdisplay;
    int transfer;
    int install;
};
struct resp_get_motionscedule {
    int chanid;
    int result;
    struct mt_scedule scedule[7];
};

struct resp_get_ipcalarm {
    int ret;    /* 0:suc -1:fail */
    int chanid;
    int enable;
    int type;
    unsigned int tri_actions;
    unsigned int tri_channels;
    char tri_channels_ex[66];
};

struct resp_get_ipcvolume {
    int ret;    /* 0:suc -1:fail */
    int chanid;
    int enable;
    int type;
    int volume;
    int duration;
    int on_event;
    int off_event;
    int ongoing_event;
    unsigned int tri_actions;
    unsigned int tri_channels;
    char tri_channels_ex[66];
};

struct stream_status {
    struct ipc_resolution cur_res;
    int frame_rate;
    int bit_rate;
    int connection;
    int codec;
    IPC_CONNECT_STATUS connectStatus;

};
struct resp_camera_status {
    struct stream_status status[2];
    int record;
    int alarm;
    int chnid; // NO.: 0,1,2,3....
    STREAM_TYPE stream_type;
};

/// units: kbps
struct resp_network_bandwidth {
    int total;
    int free;
    int used;
};

///////////////////////////////////////////////////
/// fio field
enum FioReqFlag {
    FIOREQ_BEGIN = 100,
    FIOREQ_FRONT_SET_RECORD,
    FIOREQ_FRONT_STOP_RECORD,
    FIOREQ_FRONT_POWEROFF,
    FIOREQ_FRONT_REBOOT,
    FIOREQ_FRONT_SET_LED_READY,
    FIOREQ_FRONT_SET_ALARM,
    FIOREQ_FRONT_SET_SOUND,
    FIOREQ_FRONT_SET_DEVID,
    FIOREQ_FRONT_SET_RS485,

    FIOREQ_DIO_SET_ALARM,
    FIOREQ_DIO_SET_SENSOR,
    FIOREQ_DIO_SET_ALARM_DELAY,
    FIOREQ_DIO_SEND_ALARM,
    FIOREQ_DIO_GET_ALARM_STATUS,
    FIOREQ_DIO_GET_SENSOR_STATUS,

    FIOREQ_QUIT = 300,

    FIOREQ_END
};

enum FioRespFlag {
    FIORESP_BEGIN = 500,
    FIORESP_FRONT_POWER_SHORT,
    FIORESP_FRONT_POWER_LONG,
    FIORESP_DIO_ALARM_STATUS,
    FIORESP_DIO_SENSOR_STATUS,
    FIORESP_DIO_SENSOR_NOTIFY,
    FIORESP_DIO_ALARM_NOTIFY,
    FIORESP_END = 700,
};

enum front_alarm_type {
    FAT_ALARMOUT = 0,
    FAT_VIDEO_LOSS,
    FAT_MOTION_DETECT,
    FAT_RECORD_FAIL,
    FAT_DISK_FULL,
    FAT_NETWORK_DISCONN,
    FAT_DISK_FAIL,
    FAT_CAMERAIO,
    FAT_VOLUMEDETECT,
    FAT_DISK_NULL,
    FAT_DISK_UNINIT,
    FAT_DATE_ERROR,
    FAT_IP_CONFLICT,
    FAT_DISK_OFFLINE,
};

struct front_alarm {
    int type;
    int enable;
    int delay;
};

struct dio_alarm {
    int id;
    int enable;
};

struct dio_alarm_attr {
    int id;
    int type;
    int enable;
    int delay;
};

struct dio_alarm_delay {
    int id;
    int delay;
};

struct dio_sensor_attr {
    int id;
    int type;
    int enable;
};

struct dio_alarm_notify {
    int id; ///< alarm or sensor id
    int evt; ///< gpio event
};

struct req_playback_res {
    int chnid;
    int res;
};

//////////////////////////////////////////////////////////////////////////////////////////////
// sdk only
struct req_user_info {
    int id;
    int enable;
    char username[64];
    char password[33];
    int type;
    int permission;
    int remote_permission;
    unsigned long local_live_view;
    unsigned long local_playback;
    unsigned long remote_live_view;
    unsigned long remote_playback;
};

struct resp_ipc_protocol {
    int pro_id;
    char pro_name[24];
    int function;
    int enable;
    int display_model;
};
struct req_osd_param {
    int ch;
    char name[64];
};

struct req_disk_maintain_info {
    int log;
    int photo;
};

struct req_cam_param {
    int ch;             ///< channel
    int enable;         ///< enable or not
    char user[64];      ///< user name
    char passwd[64];    ///< password
    char ip[32];        ///< ip address
    char main_path[64]; ///< rtsp main stream path
    char sub_path[64];  ///< rtsp sub stream path
    int manage_port;
    int main_port;      ///< rtsp main stream port
    int sub_port;       ///< rtsp sub stream port
    int sub_enable;     ///< rtsp sub stream enable
    int model;          ///< camera model @see IPC_MODEL
    int trans_proto;    ///< transmit protocol @see TRANSPROTOCOL
    int play_strm;      ///< play stream @see STREAMTYPE
    int rec_strm;       ///< record stream @see STREAMTYPE
};

struct req_rec_param {
    int ch;                 ///< channel
    int mode;               ///< record mode @see record_mode
    int audio_on;           ///< audio on
    int prev_rec_on;        ///< previous record on
    int prev_rec_duration;  ///< previous record duration @see PREVRECORDDURATION_SEC_MIN PREVRECORDDURATION_SEC_MAX
    int post_rec_on;        ///< post record on
    int post_rec_duration;  ///< post record duration @see POSTRECORDDURATION_MINUTE_MIN POSTRECORDDURATION_MINUTE_MAX
};

struct req_sched_holiday {
    int ch;         ///< channel
    char name[256]; ///< holiday name
    int enable;     ///< enable or not
    int type;       ///< holiday type @see holiday_style
    int start_year; ///< start year
    int start_mon;  ///< start month
    int start_mday; ///< start day of a month, 1-31
    int start_mweek;///< start week of a month
    int start_wday; ///< start day of a week
    int end_year;   ///< end year
    int end_mon;    ///< end month
    int end_mday;   ///< end day of a month
    int end_mweek;  ///< end week of a month
    int end_wday;   ///< end day of a week
};

struct req_sched_video_loss {
    int ch;                 ///< channel
    int enable;             ///< enable or not
    unsigned int tri_alarms;///< trigger alarm output mask
};

struct req_sched_motion {
    int ch;                     ///< channel
    int enable;                 ///< enable or not
    unsigned int tri_channels;  ///< trigger channels
    unsigned int tri_alarms;    ///< trigger alarms
    char tri_channels_ex[66];
};

struct req_sched_alarmin {
    int id;                     ///< sensor id
    int enable;                 ///< enable or not
    char name[128];             ///< name
    int type;                   ///< sensor type, 0- normally open 1-normally closed
    unsigned int tri_channels;  ///< trigger channels
    unsigned int tri_alarms;    ///< trigger alarms
    char tri_channels_ex[66];
};

struct req_sched_alarmout {
    int id;             ///< alarm id
    char name[128];     ///< name
    int type;           ///< alarm type, 0- normally open 1-normally closed
    int enable;         ///< enable or not
    int duration_time;  ///< duration time
};

struct sched_item {
    char start_time[32];
    char end_time[32];
    int action_type;
};

struct sched_day {
    struct sched_item schedule_item[12];
    int wholeday_enable;
    int wholeday_action_type;
};

struct req_record_schedule {
    struct sched_day schedule_day[8];
    int enable;
    int ch;
};

struct req_motion_schedule {
    struct sched_day schedule_day[8];
};

struct req_network_param {
    int mode;
    char host_name[128];
    int miimon;
    int bond0_primary_net;
    int bond0_enable;
    int bond0_type;
    char bond0_ip_address[16];
    char bond0_netmask[16];
    char bond0_gateway[16];
    char bond0_primary_dns[16];
    char bond0_second_dns[16];
    int bond0_mtu;

    int lan1_enable;
    int lan1_type;
    char lan1_ip_address[16];
    char lan1_netmask[16];
    char lan1_gateway[16];
    char lan1_primary_dns[16];
    char lan1_second_dns[16];
    int lan1_mtu;

    int lan2_enable;
    int lan2_type;
    char lan2_ip_address[16];
    char lan2_netmask[16];
    char lan2_gateway[16];
    char lan2_primary_dns[16];
    char lan2_second_dns[16];
    int lan2_mtu;
};

struct req_network_pppoe {
    int enable;
    int auto_connect;
    char username[32];
    char password[32];
};

struct req_network_ddns {
    int enable;
    char domain[64];
    char username[32];
    char password[32];
    char host_name[128];
    char free_dns_hash[128];
    int update_freq;
};

struct erecv {
    int id;
    char address[128];
    char name[64];
};

struct req_network_email {
    char username[64];
    char password[64];
    char smtp_server[64];
    int port;
    char sender_addr[128];
    char sender_name[64];
    int enable_tls;
    int enable_attach;
    int capture_interval;
    struct erecv receiver[3];
};

struct req_network_more {
    int enable_ssh;
    int ssh_port;
    int http_port;
    int rtsp_port;
    int sdk_port;
};

struct req_sys_time {
    int ntp_enable;
    int dst_enable;
    char time_zone[32];
    char time_zone_name[32];
    char ntp_server[64];
    char manual_time[32];
    long time;
};

struct req_ptz_port {
    int id;
    int baudrate;
    int data_bit;
    int stop_bit;
    int parity_type;
    int protocol;
    int address;
    int com_type;
    int connect_type;
};

struct req_recycle_mode {
    int port;
    int mode;
};

struct req_record_mode {
    int ch;
    int mode;
};

struct req_auth {
    char user[64];
    char passwd[64];
};

//#define SDK_VERSION   20141016
#define SDK_VERSION 20170223
#define SDK_VERSION_PAST 20141016

enum sdk_version_error {
    SDK_VERSION_OK = 0,
    SDK_NVR_VERSION_TOO_LOW,
    SDK_CLI_VERSION_TOO_LOW
};


struct req_p2p_preview {
    long long ch_mask;      //ch mask
    long long strm_fmt;     //ch play Main | sub mask  (playback & liveview)
    long long audio_on;     //channel audio mask
    long long mode;         //liveview = 0 | playback = ch mask
    int pbsid;              //for playback  session id
    int split_playback;     //0=disable, 1=enable  sid replace ch number
    int pushType;
};

struct req_p2p_uid {
    char name[64];
    char sn[64];
};

struct resp_get_sysstatus {
    float cpu;
    int memory;
    int usb;
    int cpu_temperature;
};

struct resp_get_sysoccupy {
    float cpu;
    float memory;
};

struct mask_area_ex {
    int area_id;
    int enable;
    int start_x;
    int start_y;
    int area_width;
    int area_height;
    //int width;
    //int height;
    int fill_color;
    //int left;
    //int top;
    //int right;
    //int bottom;
    int ratio;
    char name[MAX_LEN_64];
};

struct resp_privacy_mask {
    int id;
    int enable;
    int num;
    int cgiSdkFlag;
    char sdkversion[MAX_LEN_32];
    int maxPtzZoomRatio;
    int areaMaskEnable;             /*1<<0,1<<1...*/
    char colorList[MAX_LEN_64];//"0,1,2,3,4,5,6,7"  0=white,1=black,2=blue,3=yellow,4=green,5=brown,6=red,7=violet,8=mosaic
    struct mask_area_ex area[MAX_MASK_AREA_NUM + MAX_MOSAIC_NUM];
    //mosaic
    int system_mosaic_support;
    int imaging_settings_mosaic_num;
    //
    UInt64 delMask;
    int colorSupport; // 0: multi color, 1: single color
    int maxMaskSum;
};

struct resp_privacy_mask_batch {
    char channels[MAX_LEN_65];
    struct resp_privacy_mask mask;
};


struct req_rebuild_raid {
    int disk_port;
    int raid_port;
};

struct resq_get_poe_power {
    int poe_port_power[MAX_PORT_NUM];
    int port_num;
};

struct resq_poe_info {
    int poe_port_power[MAX_PORT_NUM];
    int poe_port_net_link[MAX_PORT_NUM];
    int port_num;
};

struct resq_poe_state {
    int connected[MAX_PORT_NUM];
    float poe_port_power[MAX_PORT_NUM];
    char ipaddr[MAX_PORT_NUM][32];
    int port_num;
};


struct image_enhancement {
    unsigned int smartir;
    unsigned int whiteblance;
    unsigned int focusmode;
    unsigned int antiblurry;
    unsigned int wdrenable;
    unsigned int wdrlevel;
    unsigned int wdrstarthour;
    unsigned int wdrstartminute;
    unsigned int wdrstophour;
    unsigned int wdrstopminute;
    unsigned int regiontype;
    unsigned int hlcmode;
    unsigned int exclude;
    unsigned int exposemode;
    char exposeregion[64];
    unsigned int modelType;
    unsigned int imageschemode;
    unsigned int hlcday;
    unsigned int hlcnight;
    unsigned int redgain;
    unsigned int bluegain;
    unsigned int defogmode;
    unsigned int defoglevel;
    unsigned int dismode;
    unsigned int exposetime;
    unsigned int exposegain;
    unsigned int wdraflevel;
    unsigned int hlclevel;
    unsigned int exposurectrl;
    unsigned int enblur;
    unsigned int deblur;
    char sdkversion[32];
    unsigned int lensType;

    int reduce_stuttering;
    int fullcolorSupport;
};

typedef enum IpcDisplayWhiteledCtrl {
    IPC_DISPLAY_WHITELED_CTRL_AUTO = 0,
    IPC_DISPLAY_WHITELED_CTRL_ON = 1,
    IPC_DISPLAY_WHITELED_CTRL_OFF = 2,
    IPC_DISPLAY_WHITELED_CTRL_CUSTOMIZE = 3,
    IPC_DISPLAY_WHITELED_CTRL_MAX,
} IPC_DISPLAY_WHITELED_CTRL_E; 

typedef struct IpcDisplayWhiteLed {
    MS_BOOL support;
    IPC_DISPLAY_WHITELED_CTRL_E lightCtrl;
    int sensitivity; // range: 1 ~ 5
    int delay; // range: 1 ~ 60(s)
    int start; // 0 ~ 24*60*60(s)
    int stop; // 0 ~ 24*60*60(s)
    int brightnessCtrl; // 0: auto, 1: customize
    int brightness; // range: 1 ~ 100
} IPC_DISPLAY_WHITELED_S;

struct image_display {
    int colorkiller;
    int modestarthour;
    int modestartminute;
    int modestophour;
    int modestopminute;
    int exposurectrl;
    int lighttype;
    int mirctrl;
    int localdisplay;
    int ircutaddaytonight;
    int ircutadnighttoday;
    int corridormode;
    int imagerotation;
    int saveCorridor;
    int modelType;
    int smartIRType;
    int nearIRLevel;
    int farIRLevel;
    int midIRLevel;
    int lencorrect;
    int smartIrMath;
    int smartIrLimit;
    char chipninterface[64];
    int nearSmartirValue;
    int farSmartirValue;
    int midSmartirValue;
    int lenCorrectType;
    int fovadjust;
    char sensortype[16];
    char productmodel[32];
    char softversion[32];
    int smokeddomecover;
    int smartwhitestrength;
    int dnRefocus;
    char sdkversion[32];
    int structuretype;

    int aspect_ratio;
    int d2n_sensitivity;
    int n2d_sensitivity;
    int zoom_limit;

    IPC_DISPLAY_WHITELED_S whiteled;
    int system_image_slider_type;

    int isNtPlatform;
};

typedef enum IpcImageLens {
    IPC_IMAGE_LENS_NONE = -1,
    IPC_IMAGE_LENS_MANUAL = 0,
    IPC_IMAGE_LENS_DC_IRIS = 1,
    IPC_IMAGE_LENS_P_IRIS = 2,
} IPC_IMAGE_LENS_E;

typedef enum IpcIrisMode {
    IPC_IRIS_UNKNOW = -1,
    IPC_IRIS_MANUAL = 0,
    IPC_IRIS_AUTO= 1,
} IPC_IRIS_MODE_E;

typedef enum IpcFocusMode {
    IPC_FOCUS_UNKNOW = -1,
    IPC_FOCUS_MANUAL = 0,
    IPC_FOCUS_AUTO= 1,
} IPC_FOCUS_MODE_E;

typedef enum IpcPowerlineFreq {
    IPC_POWERLINE_FREQ_60HZ = 0,
    IPC_POWERLINE_FREQ_50HZ = 1,
} IPC_POWERLINE_FREQ_E;

typedef enum IpcWhitebalanceMode {
    IPC_WHITEBALANCE_AUTO = 0,
    IPC_WHITEBALANCE_MANUAL = 1,
    IPC_WHITEBALANCE_INCANDESCENT = 2,
    IPC_WHITEBALANCE_WARM = 3,
    IPC_WHITEBALANCE_NATURAL = 4,
    IPC_WHITEBALANCE_FLUORESCENT = 5,
    IPC_WHITEBALANCE_MAX,
} IPC_WHITEBALANCE_MODE_E;

typedef enum IpcDoorMode {
    IPC_DOOR_MODE_OUTDOOR = 0,
    IPC_DOOR_MODE_INDORR = 1,
    IPC_DOOR_MODE_MAX,
} IPC_DOOR_MODE_E;

typedef enum IpcExposureMode {
    IPC_EXPOSURE_MODE_AUTO = 0,
    IPC_EXPOSURE_MODE_MANUAL = 1,
    IPC_EXPOSURE_MODE_MAX,
} IPC_EXPOSURE_MODE_E;

typedef enum IpcExposureTime {
    IPC_EXPOSURE_TIME_1_5 = 0,
    IPC_EXPOSURE_TIME_1_10,
    IPC_EXPOSURE_TIME_1_25_OR_1_30,
    IPC_EXPOSURE_TIME_1_50_OR_1_60,
    IPC_EXPOSURE_TIME_1_100_OR_1_120,
    IPC_EXPOSURE_TIME_1_250,
    IPC_EXPOSURE_TIME_1_500,
    IPC_EXPOSURE_TIME_1_750,
    IPC_EXPOSURE_TIME_1_1000,
    IPC_EXPOSURE_TIME_1_2000,
    IPC_EXPOSURE_TIME_1_4000,
    IPC_EXPOSURE_TIME_1_10000,
    IPC_EXPOSURE_TIME_1_100000,
    IPC_EXPOSURE_TIME_1,
    IPC_EXPOSURE_TIME_MAX,
} IPC_EXPOSURE_TIME_E;

typedef enum IpcDnMode {
    IPC_DN_MODE_AUTO = 0,
    IPC_DN_MODE_NIGHT = 1,
    IPC_DN_MODE_DAY = 2,
    IPC_DN_MODE_CUSOMIZE = 3,
} IPC_DN_MODE_E;

typedef enum IpcSmartirMode {
    IPC_SMARTIR_MODE_AUTO = 0,
    IPC_SMARTIR_MODE_CUSTOMIZE = 1,
    IPC_SMARTIR_MODE_MAX,
} IPC_SMARTIR_MODE_E;

typedef enum IpcImageRotation {
    IPC_IMAGE_ROTATION_OFF = 0,
    IPC_IMAGE_ROTATION_180 = 1,
    IPC_IMAGE_ROTATION_FLIP_H = 2,
    IPC_IMAGE_ROTATION_FLIP_V = 3,
    IPC_IMAGE_ROTATION_CLOCKWISE_90 = 4,
    IPC_IMAGE_ROTATION_ANTICLOCKWISE_90 = 5,
    IPC_IMAGE_ROTATION_MAX,
} IPC_IMAGE_ROTATION_E;

typedef struct ImageDisplayScene {
    IPC_POWERLINE_FREQ_E powerlineFreq;
    IPC_DN_MODE_E dnMode;
    int d2nSensitivity; // 1 ~ 10
    int n2dSensitivity; // 1 ~ 10
    int nightStartHour; // 0 ~ 23
    int nightStartMinute; // 0 ~ 59
    int nightEndHour; // 0 ~ 23
    int nightEndMinute; // 0 ~ 59
    IPC_SMARTIR_MODE_E smartIrMode;
    int irLedLevel; // 0 ~ 100
    IPC_IMAGE_ROTATION_E imageRotation;
    // IPC_DOOR_MODE_E doorMode;
    // int scene;
    // int brightness; // 0 ~ 100
    // int colorSaturation; // 0 ~ 100
    // int sharpness; // 0 ~ 100
    // int contrast; // 0 ~ 100
    // IPC_WHITEBALANCE_MODE_E whitebalanceMode;
    // int whilebalanceRedGain;
    // int whilebalanceBlueGain;
    // int digitalImageStabilisation; // 0: disable, 1: enable
    // int day2Night; // 1 ~ 90
    // int night2Day; // 11 ~ 100
    // int sensorMode; // ADC mode, 0: disable, 1: enable
    // int distortCorrect; // 0: disable, 1: enable
    // int fovAdjust; // 0 ~100
    // int irBlanceMode; // 0: disable, 1: enable
    // int enblur; // 0: disable, 1: enable
    // int deblur; // 0: disable, 1: enable
    // int antiFogIntensity; // 0 ~ 100
    // IPC_EXPOSURE_MODE_E exposureMode;
    // IPC_EXPOSURE_TIME_E exposureTime;
    // int exposureGain;
    // int nfLevel; // 3D DNR 0 ~ 100
    // int dnr2Level; // 2D DNR 0 ~ 100
    // int aspectRatio; // 0: disable, 1: enable
} IMAGE_DISPLAY_SCENE_S;

typedef struct ImageDisplayMulti {
    // int nightModelLevel; // 1 ~ 5
    // int vehicleEnhancement; // 0: disable, 1: enable
    // IPC_IMAGE_LENS_E irisType;
    // IPC_IRIS_MODE_E irisMode;
    // IPC_FOCUS_MODE_E focusMode;
    // float spliceDistance;
    IMAGE_DISPLAY_SCENE_S scenes[1]; // 9.0.19-r3 only compatible one
} IMAGE_DISPLAY_MULTI_S;

typedef enum IPC_IMAGE_TYPE_E {
    IPC_IMAGE_TYPE_SINGLE = 0,
    IPC_IMAGE_TYPE_MULTI,
    IPC_IMAGE_TYPE_MAX,
} IPC_IMAGE_TYPE_E;

struct req_image_display {
    int chnid;
    IPC_IMAGE_TYPE_E type;
    union {
        struct image_display image;
        IMAGE_DISPLAY_MULTI_S imgMulti;
    };
};

struct resp_image_display {
    int id;
    IPC_IMAGE_TYPE_E type;
    union {
        struct image_display image;
        IMAGE_DISPLAY_MULTI_S imgMulti;
    };
};

struct http_common_param {
    char pagename[64];
    char httpname[64];
    char key[128];
    char value[128];
    int noparatest;
};

struct req_http_common_param {
    int chnid;
    struct http_common_param info;
};
struct resp_http_common_param {
    int chnid;
    int res;
    struct http_common_param info;
};

struct req_try_test_ipcconnect {
    int chan_id;
    char ip[32];        ///< target ip address
    int port;           ///< target ip port
    char user[64];      ///< ipc user name
    char password[33];  ///< ipc password
    int protocol;       ///< use what protocol
    int model;          ///< ipc model
};

struct sendto_qt_cmd {
    int reqfrom;
    UInt64 clientId;
    char cmd[100];
};

struct get_qt_cmd_result {
    int reqfrom;
    UInt64 clientId;
    char result[20];
    char cmd[100];
    char curPage[20];
    int live_view_wnd_num;
    int play_back_wnd_num;
    int live_view_select_wnd;
    int play_back_select_wnd;
    int live_view_fullScreenWnd;
    int play_back_fullScreenWnd;
    char playbackspeed[10];
    char playbackmode[20];
    char playbackdate[20];
    char playbacktime[20];
};

struct get_user_info {
    int cnt;
    struct req_auth user[MAX_USER];
};

/////////////////////
struct socket_header {
    int version;
    int req;
    int resp;
    int datalen;
    int crc;
//  char pad[8];
};

struct reco_resource {
    int max_cameras;        //4-32
    int max_analog_cameras; //4/8/16
    int max_ipnc_cameras;   //0/4/8/16
    int camera_layout;
    int display_num;
    int max_sensor;         //0-16
    int max_alarm;          //0-16
    int hasBuzzer;          //0-1
    int disk_num;           //0-16
    int max_dec_chan;       //0-16
    int max_spot_out;       //0-4
    int max_audio_in;       //0-16
    int max_audio_out;
    int max_network_lan;    //1-2
    int max485;
    int max232;
    int has_ir;
};

struct sysinfo {
    char hostname[128];
    int  deviceid;
    char company[10];
    char productno[10];
    char hardwareversion[10];
    char softwareversion[24];
    char oemversion[10];
    char devicetype[10];
    char devicename[128];
    char sn[32];
    char guistyle[10];
    char reserve[10];
    struct reco_resource resource;
    char uptime[32];
    char mac[32];
    int isSupportTalk;
};

struct resq_get_ipcdev_p2p {
    int  chanid;
    int  port;
    int  protocol;
    int  state;
    int  main_rtsp_port;
    char ipaddr[32];
    char manufacturer[64];
    char hwid[128];
    char sn[128];
    char fwversion[64];
    char mac[48];
    char model[64];
    int  model_id;
    char mrespath[128];
    char srespath[128];
    int poe_channel;
};

struct req_playback_remote_masks {
    long long chans;     ///< channel mask
    long time;
    char show_time[32];
};

struct req_playback_setmask {
    int sid;                ///< playback session id, similar to file descriptor
    req_pb_mask pb_mask;    ///chn mask
};

struct req_playback_transpond {
    long time;
    char play_time[32];
    req_pb_mask pb_mask;    ///chn mask
};

struct req_search_param {
    int protocol;
    char nic[10];
};
struct req_cur_play_time {
    int sid[MAX_CAMERA];
    int num;
};
struct resp_cur_play_time {
    int sid;
    long sec;
};

struct ptz_preset {
    int chanid;
    int presetId[MAX_PRESET_CNT];
};

struct resp_ptz_tour {
    int preset_id[MS_KEY_MAX];
    int timeout[MS_KEY_MAX];
    int speed[MS_KEY_MAX];
};

struct resp_ptz_preset {
    int enable;
    char name[MAX_PSNAME_LEN];
};

//for video play win ratio
struct req_video_play_ratio {
    Uint64 chns;
    int enScreen;
    int enMode;
    int ratioType;
};

struct req_video_play_ratio2 {
    int winid;
    int ratioType;
};

struct req_all_video_play_ratio {
    int enScreen;
    int ratioType;
    int winNum;
};

//for fisheye
struct req_fisheye_mode {
    int winid;
    FISH_E enFish;
};

//for ptz info
struct resp_ptz_ovf_info {
    struct resp_ptz_preset preset[PRESET_MAX];
    struct resp_ptz_tour tour[TOUR_MAX];
    int pattern[PATTERN_MAX];

    //for fisheye status;
    int tour_status[STREAM_MAX][TOUR_MAX];
    int auto_scan_status[STREAM_MAX];
};

struct resp_set_all_record {
    int enable;
    int channel[MAX_CAMERA];
};

struct resp_p2p_info {
    int enable;
    P2P_STATUS p2p_status;
    char model[32];
    char ipc[64];
    char cloudAccount[64];
    char cloudServer[64];
    char registerCode[128];
    char company[128];
    char email[128];
    char dealer[128];
    TUTK_REGION_E region;
};

typedef struct cam_model_info {
    int chnid;
    char ipaddr[MAX_LEN_32];
    char model[MAX_LEN_64];
    char fwversion[MAX_LEN_64];
} CAM_MODEL_INFO;

struct resp_cam_model_info {
    CAM_MODEL_INFO modelInfo[MAX_CAMERA];
};

struct resp_fishmode_param {
    int chnid;
    int fishmount;
    int fishdisplay;
    int fishcorrect;//0=muti 1=bundle
    int result;
};
typedef struct record_advanced {
    int recycle_mode;
    int esata_type;
} RECORD_ADVANCED;

typedef struct pip_play_info {
    SCREEN_E    enScreen;
    MODE_E      enMode;
    ZONE_S      stZone;
} PIP_PLAY_INFO;

struct req_upload_speed {
    int time;  //time
    int size;  //data size
};

typedef struct live_pb_info {
    int     enable;
    int     chnId;
    int     shsid;
    int     pbsid;
    LAYOUT_E    enLayout;
    SCREEN_E    enScreen;
} LIVE_PB_INFO;

typedef struct live_pb_info2 {
    int     enable;
    int     chnId;
    int     shsid;
    int     pbsid;
    int     winid;
    ZONE_S      stZone;
    AVTYPE_E    avtype;
} LIVE_PB_INFO2;

typedef struct anpr_live_pb_info {
    int     enable;
    int     chnId;
    int     shsid;
    int     pbsid;
    char    pTime[MAX_LEN_32];
    ZONE_S      stZone;
    SCREEN_E    enScreen;
} ANPR_LIVE_PB_INFO;

typedef struct anpr_live_pb_info2 {
    int     enable;
    int     chnId;
    int     shsid;
    int     pbsid;
    int     winid;
    char    pTime[MAX_LEN_32];
    ZONE_S      stZone;
} ANPR_LIVE_PB_INFO2;

typedef struct req_pip_s {
    int     enable;
    int     chnId;
    int     shsid;
    int     pbsid;
    ZONE_S      stZone;
    SCREEN_E    enScreen;
} REQ_PIP_S;

typedef enum ms_video_format {
    MSFRAME = 0,
    MSAVI   = 1,
    MSMP4   = 2,
    MSPS    = 3,
} MSFS_VIDEO_FORMAT;

typedef enum ms_remote_download_res {
    MSERROR     = -3,
    MSCANCEL    = -2,
    MSFINISH    = -1,
    MSHEADER    = 0,
} MSFS_REMOTE_RES;

typedef struct resp_get_msfs_diskinfo {
    int disk_port;                      ///disk port ID
    char disk_vendor[MAX_LEN_64];       ///hdd vendor
    char disk_address[MAX_LEN_64];      ///nas ip address
    char disk_directory[MAX_LEN_128];   ///nas directory
    int status;         //@ STATE_EN
    int busable;
    unsigned long long total;           ///< capacity
    unsigned long long used;            ///< space used
    unsigned long long free;            ///< space free
    int disk_type;                      ///local, eSata, Nas @TYPE_EN
    int disk_group;                     ///group ID
    int disk_property;                  /// R/W
    int disk_private;                   /// private flag
    int raid_level;
    int raid_status;    //@ MD_STATE_EN
    int raid_task;
    int raid_diskcnt;
    int raid_disk[MAX_DISK_LOCAL_NUM];
    char user[MAX_USER_LEN+1];
    char password[MAX_PWD_LEN+1];
    DISK_SMART_RESULT smartTest;
} RESP_GET_MSFS_DISKINFO;

struct req_port_info {
    int id;
    int enRw;
    int group;
    int iPrivate;
};

struct req_group_info {
    int id;
    char chnMaskl[MAX_LEN_65];
    char chnMaskh[MAX_LEN_65];
};

struct req_search_nas_info {
    int disk_port;
    char disk_address[MAX_LEN_64];
};

struct req_port_private {
    int id;
    int enable;
};

struct req_batch_del_nas_info {
    int nCnt;
    int disk_port[MAX_MSDK_PORT_NUM];
};


struct resp_search_nas_info {
    int nCnt;
    char directory[MAX_LEN_64][MAX_LEN_256];
};

struct req_bkp_record_range {
    char chnMaskl[MAX_LEN_65];
    int type;
};

struct resp_bkp_record_range {
    long startTime;
    long endTime;
    char pStartTime[MAX_LEN_32];
    char pEndTime[MAX_LEN_32];
};

struct req_search_common_backup {
    char chnMaskl[MAX_LEN_65];
    int chnNum;
    int enType;
    int enEvent;
    int enState;
    char pStartTime[MAX_LEN_32];
    char pEndTime[MAX_LEN_32];
    MF_BOOL all;
    char ipaddr[MAX_LEN_64];
};

struct resp_search_common_backup {
    int chnid;
    int sid;
    int size;
    int isLock;
    int allCnt;
    int enEvent;//@ REC_EVENT_EN
    char pStartTime[MAX_LEN_20];
    char pEndTime[MAX_LEN_20];
    UInt64 allSize;
    int port;
    int fileno;
};

struct rep_play_common_backup {
    int chnid;
    int sid;
    int flag;       //jpg 0:320*240 1:640*360
    int enType;    // main(0) sub(1)
    char pStartTime[MAX_LEN_32];
    char pEndTime[MAX_LEN_32];
    char pPlayTime[MAX_LEN_32];
};

struct rep_export_common_backup {
    int chnid;
    int sid;
    int filesize;
    int filetype;   //0 MP4 1 Avi
    int fileno;
    char pStartTime[MAX_LEN_32];
    char pEndTime[MAX_LEN_32];
    char dev_name[MAX_LEN_64];
    char dev_path[MAX_LEN_256];
    //int transcode;
};

struct rep_remote_export_common_backup {
    int chnid;
    int stream_type;
    char pStartTime[MAX_LEN_32];
    char pEndTime[MAX_LEN_32];
};

struct rep_export_common_backup_remote {
    int sid;
    int chnid;
    char pStartTime[MAX_LEN_32];
    char pEndTime[MAX_LEN_32];
};


struct rep_lock_common_backup {
    int chnid;
    int sid;
    int size;
    int isLock;
    char pStartTime[MAX_LEN_32];
    char pEndTime[MAX_LEN_32];
};

struct resp_remote_common_backup {
    struct reco_frame frame;
    int flag;
    int size;//data size
    char data[1024 * 600]; //data buff 600k
};


/*
    uMapVal[0]   1bit     |  3 bit    |     12bit     | 48bit
               enable       version    size        motion
                1           001      000100101011
    uMapVal[1]  ~    uMapVal[4]     motion value
*/
#define MAX_SEARCH_MOTION_NUM  (5)
#define MAX_SEARCH_MOTION_NUM2 (10)

typedef struct search_motion_ex {
    Uint64 uMapVal[MAX_SEARCH_MOTION_NUM];
} SEARCH_MOTION_EX;

typedef struct search_motion_int_ex {
    Uint32 uMapVal[MAX_SEARCH_MOTION_NUM2];
} SEARCH_MOTION_UINT32_EX;

typedef enum {
    VCA_NONE = -1,
    VCA_PERSON = 0,
    VCA_VEHICL = 1,
    VCA_ALL = 2,
} DETECTION_OBJ_TYPE;

typedef struct req_search_event_backup {
    char chnMaskl[MAX_LEN_65];
    int chnNum;
    int enType;
    unsigned int enMajor;
    unsigned int enMinor;
    int ahead;
    int delay;
    char pStartTime[MAX_LEN_32];
    char pEndTime[MAX_LEN_32];
    int enEventCnt;
    int pEventNameLen;              // char [64]
    char pMotMap[300];              // for smart search
    DETEC_OBJ_EN objtype;           // vca Detection Object
    char content[MAX_LEN_1024];  // pos content
    MF_BOOL all;
    MF_BOOL close;
    int maxNum;
    char ipaddr[MAX_LEN_64];
} REQ_SEARCH_EVENT_BACKUP;

struct resp_search_event_backup {
    int chnid;
    int sid;
    int size;
    int port;
    int allCnt;
    int enEvent;
    int fileno;
    char source[MAX_LEN_64];
    char pStartTime[MAX_LEN_20];
    char pEndTime[MAX_LEN_20];
    UInt64 allSize;
    int objectType;
};

struct rep_play_event_backup {
    int chnid;
    int sid;
    char source[MAX_LEN_64];
    int port;
    int flag; //jpg 0:320*240 1:640*360
    int enType;    // main(0) sub(1)
    char pStartTime[MAX_LEN_32];
    char pEndTime[MAX_LEN_32];
    char pPlayTime[MAX_LEN_32];
};

struct rep_export_event_backup {
    int chnid;
    int sid;
    int port;
    int filesize;
    int filetype;
    int fileno;
    char source[MAX_LEN_64];
    char pStartTime[MAX_LEN_32];
    char pEndTime[MAX_LEN_32];
    char dev_name[MAX_LEN_64];
    char dev_path[MAX_LEN_256];
};

struct rep_lock_event_backup {
    int chnid;
    int sid;
    int size;
    int isLock;
    char pStartTime[MAX_LEN_32];
    char pEndTime[MAX_LEN_32];
};

struct req_search_picture_backup {
    char chnMaskl[MAX_LEN_65];
    int chnNum;
    int enMajor;
    int enMinor;
    char pStartTime[MAX_LEN_32];
    char pEndTime[MAX_LEN_32];
    MF_BOOL all;
    char ipaddr[MAX_LEN_64];
    int maxNum;
    int objectType;
    int vcaType;
};

struct resp_search_picture_backup {
    int chnid;
    int sid;
    int enMajor;
    int size;
    int port;
    int width;
    int height;
    int index;
    int allCnt;
    char pTime[MAX_LEN_32];
    unsigned long long allSize;
    unsigned long long pts;
    int objectType;
};

struct rep_play_picture_backup {
    int chnid;
    int sid;
    int source;
    int port;
    char pTime[MAX_LEN_32];
    PIP_PLAY_INFO stPIP;
    unsigned long long pts;
    int width;
    int height;
};

struct rep_export_picture_backup {
    int chnid;
    int sid;
    int source;
    int port;
    int index;
    char pTime[MAX_LEN_32];
    char dev_name[MAX_LEN_64];
    char dev_path[MAX_LEN_256];
    unsigned long long pts;
    int resolution;//0:auto, 1=704*576, 2=640*360
};

struct ms_socket_packet {
    char *packet;
    char *packetHeader;
    char *packetBody;
    int nSize;
    int nHeaderSize;
    int nBodySize;
};

struct resp_usb_info {
    unsigned char port;
    int bprotect;
    int bformat;
    Uint64 free;// free size Mb
    char dev_name[MAX_LEN_64];
    char dev_path[MAX_LEN_64];
    TYPE_EN type;
    STATE_EN state;
    int bRec;
    Uint64 capacity;// total size Mb
    Uint64 autoBackupCapacity; //MB
};

struct req_usb_info {
    char dev_name[MAX_LEN_64];
    char dev_path[MAX_LEN_64];
    int formatType;
};

struct req_seek_time {
    int chnid;
    int sid;
    char pseektime[MAX_LEN_64];
};

struct req_seek_time_batch {
    int chnid[MAX_LEN_64];
    int sid[MAX_LEN_64];
    int num;
    char pseektime[MAX_LEN_64];
};

typedef struct rep_get_search_anpr_backup_disk {
    int port;
    int fd;
} REQ_GET_SEARCH_ANPR_BACKUP_DISK;

typedef struct rep_get_search_backup {
    int sid;
    int npage;
    int fd;
    struct rep_get_search_anpr_backup_disk diskInfo;
} REQ_GET_SEARCH_BACKUP;

struct resp_live_playback_info {
    int shsid;
    int pbsid;
    int result;
    time_t startTIme;
    time_t endTime;
};


//////////for ms_smart_ctrl
typedef enum ms_smart_online_type {
    outline = 0,
    online,
} MSFS_ONLINE_TYPE;

//web 需同步
typedef enum ms_smart_ctrl_type {
    ISNONE,
    GENERAL = 1,
    EVENT,
    TAGS,
    PICTURE,
    ANPR,
    ANPR_BIGIMG,
    SPLIT_PLAYBACK,
    CTRL_POS,
    FACE,
    FACE_BIGIMG,
    ANPR_BACKUP_PICTURE,
    ANPR_BACKUP_PLATELIST,
    MAX_CTRL_TYPE
} MSFS_CTRL_TYPE;


typedef enum ms_smart_ctrl_from {
    MSGUI = 1,
    MSWEB,
    MSP2P,
} MSFS_CTRL_FROM;

typedef struct search_msfs_info {
    int reqfrom;
    int respReq;
    int respData;
    int module;
    int chnid;
    int sid;
    UInt64 clientId;
    MSFS_CTRL_TYPE type;
    MSFS_CTRL_FROM from;
    char ipaddr[MAX_LEN_64];
} SEARCH_MSFS_INFO;

typedef struct ms_socket_response {
    void *data;
    int size;
    int capacity;
} MS_SOCKET_RESPONSE;

typedef struct ms_lock_record_file {
    int chnid;
    int sid;
    int size;
    int isLock;
    long StartTime;
    long EndTime;
} MS_LOCK_RECORD_FILE;

struct rep_get_month_event {
    int enType;
    int year;
    int month;
    char chnMaskl[MAX_LEN_65];
};

struct rep_set_tags_record {
    int chnid;
    int sid;
    int index;
    char pName[MAX_LEN_64];
    char pTime[MAX_LEN_32];
};

struct req_search_tags {
    char chnMaskl[MAX_LEN_65];
    int chnNum;
    int enType;
    int bCancel;
    char name[MAX_LEN_64];
    char pStartTime[MAX_LEN_32];
    char pEndTime[MAX_LEN_32];
    char ipaddr[MAX_LEN_64];
};

struct resp_search_tags {
    int chnid;
    int id;
    int sid;
    int index;
    int allCnt;
    char pName[MAX_LEN_64];
    char pTime[MAX_LEN_32];
};

struct req_set_play_speed {
    int sid;
    int speed;
    int playallframe;
};

struct req_seek_play_time {
    char sid;
    char pseektime[MAX_LEN_64];
};

struct req_set_all_play_speed {
    char chnMaskl[MAX_LEN_65];
    int speed;
    int playallframe;
};

struct req_set_all_play_speed_remote {
    int speed;
    int playallframe;
    int sid[MAX_CAMERA];
    int num;
};

struct req_p2p_pb_para {
    int  sid[MAX_CAMERA];
    int num;
    int close;
};

struct req_seek_all_play_time {
    char chnMaskl[MAX_LEN_65];
    char pseektime[MAX_LEN_64];
};

struct rep_start_all_play {
    int actState;   //PB_PLAY | PB_STOP
    int actSpeed;   //PLAY_SPEED_1X
    int actdir;     //PB_FORWARD | PB_BACKWARD
    char chnMaskl[MAX_LEN_65];
    char pStartTime[MAX_LEN_32];
    char pEndTime[MAX_LEN_32];
    char pPlayTime[MAX_LEN_32];
};

struct req_snapshot_playback_time {
    int screen;
    int winSidChn[MAX_LEN_64];  // -1 is no snap;  WIN_SID(id)   Subscript is chnid.
    char ptime[MAX_LEN_64];
};

//LOG
/* send all connections */
struct req_log_search {
    int total; // search all results
    int num; // send count
    //struct log_search_cell data_cell[LOG_MAX_TURN_SEND];
    struct log_data data[LOG_MAX_TURN_SEND];
};

struct req_log_web_export {
    int result;
    char path[MAX_LEN_64];
};

struct req_record_conf {
    int mode;
    int esata;
};

struct req_pb_state {
    int chnid;      //(-1: NO chnid)
    int state;      //(-1: NO) ; ( 0:  Yes)
};

struct resp_snapshot_state {
    int chnid;
    int status;     //(-1: NO) ; ( 0:  Yes)
    int starTime;
    int endTime;
    int size;
    int port;
};

struct resp_common_state {
    int chnid;
    int state;  //(-1: NO) ; ( 0:  Yes)
};

struct resp_upload_speed {
    long long uploadTime;
    int time;  //time
    int size;  //data size
};

struct resp_fishmode_info {
    int chnid;
    int stream_id;
    struct resp_ptz_ovf_info info;
};


struct fisheye_ptz_preset_info {
    int chn;
    int stream_id;
};

//get auto scan & tour status
struct fisheye_ptz_getstatus {
    //int chn;
    //int stream_id;

    int tour[STREAM_MAX][TOUR_MAX];
    int auto_scan[STREAM_MAX];
};

//for edit up down
struct fisheye_ptz_tour {
    int chn;
    int stream_id;
    int param;//path num
    struct resp_ptz_tour tour[TOUR_MAX];
};

struct extern_http_port {
    int upnp_extern_port;
    int ddns_extern_port;
};

struct ms_vca_set_enable {
    int enable;
    int chanid;
};

struct ms_vca_alarm_status {
    int region_entrance_alarm_status;
    int region_exit_alarm_status;
    int advanced_motion_alarm_status;
    int tamper_alarm_status;
    int loitering_entrance_alarm_status;
    int linecrossing1_alarm_status;
    int linecrossing2_alarm_status;
    int linecrossing3_alarm_status;
    int linecrossing4_alarm_status;
    int counter_alarm_status;
    int human_alarm_status;
    int people_in_count;
    int people_out_count;
    int object_left_alarm_status;
    int object_remove_alarm_status;
};

typedef struct MsLine {
    int startX;
    int startY;
    int stopX;
    int stopY;
    int direction;
} MS_LINE;

typedef struct MsRectangle {
    int top;
    int left;
    int right;
    int bottom;
} MS_RECTANGLE;

typedef struct MsPolygon {
    char name[MAX_LEN_64];
    char polygonX[MAX_LEN_64];//259:805:623:107:-1:-1:-1:-1:-1:-1:
    char polygonY[MAX_LEN_64];
} MS_POLYGON;

typedef enum SmartRegionType {
    REGION_SINGLE = 0,
    REGION_MULTIPLE,
    REGION_PRESET,//与web同步:VCA_REGION_PRESET
} SMART_REGION_TYPE;

typedef enum SmartRegionScene{
    SCENE_NORMAL = 0,
    SCENE_PRESET_1,
    SCENE_PRESET_2,
    SCENE_PRESET_3,
    SCENE_PRESET_4,
    MAX_SMART_SCENE,
} SMART_REGION_SCENE;

typedef struct SmartRegionInfo {
    int enable;// or left enable
    int removeEnable;
    int minTime;//min_loitering_time
    DETEC_OBJ_EN objType;
    MS_POLYGON region[MAX_SMART_SCENE];
} SMART_REGION_INFO;

struct ms_smart_event_info {
    int chanid;
    int enable;
    int x;
    int y;
    int width;
    int height;
    int sensitivity;
    int min_loitering_time;
    int loitering_object_size;  //最早设计时有，现在ipc没有了，9.0.13-a3去掉
    int show_tracks_enable;
    char area[300];
    int ignore_time;
    int objtype; //DETEC_OBJ_EN
    char polygonX[MAX_LEN_64];//5:88:88:5:-1:-1:-1:-1:-1:-1:
    char polygonY[MAX_LEN_64];//5:5:86:86:-1:-1:-1:-1:-1:-1:
    char copyChn[MAX_LEN_65];//copy to channel...
    int presetExist[MAX_SMART_SCENE];
    SMART_REGION_TYPE regionType;
    SMART_REGION_SCENE regionScene;
    SMART_REGION_INFO regionInfo[MAX_SMART_REGION];
    int format; // for p2p compatible, 0: text, 1: json
};


struct linecrossing_info {
    int startX;
    int startY;
    int stopX;
    int stopY;
    int direction;
    DETEC_OBJ_EN objtype;
    MS_LINE line[MAX_SMART_SCENE];
};

struct ms_linecrossing_info {
    int chanid;
    int enable;
    int width;
    int height;
    struct linecrossing_info line[4];
    DETEC_OBJ_EN objtype; //@david, need to delete.
    char copyChn[MAX_LEN_65];//copy to channel...
    SMART_REGION_TYPE lineType;
    SMART_REGION_SCENE lineScene;
    int presetExist[MAX_SMART_SCENE];
};

typedef struct PeopleCntLine {
    Uint8 lineEnable;
    Uint8 autoResetEnable;
    Uint8 direction; // 0: A->B, 1: B->A
    Uint8 showCntEnable;
    int startX;
    int startY;
    int stopX;
    int stopY;
    int autoResetWeekday;
    int autoResetHour;
    int autoResetMin;
    int autoResetSec;
    PCNT_CNT_E alarmEnable; // (1 << 0): In, (1 << 1): Out, (1 << 2): Capacity, (1 << 3): Sum
    int alarmThresholds[PCNT_CNT_BIT_MAX];
}PEOPLE_CNT_LINE_S;

struct ms_smart_event_people_cnt {
    int chanid;
    int width;
    int height;
    int show_osd_enable;
    int osd_font_size;
    int osd_text_position;
    int sensitivity;
    Uint8 osdType; // (1 << 0): In, (1 << 1): Out, (1 << 2): Capacity, (1 << 3): Sum 
    int lineNum; // 1 or 4 
    int triggerType; // 0: total, 1: single
    int triggerEnable;
    PCNT_CNT_E totalAlarmEnable; // (1 << 0): In, (1 << 1): Out, (1 << 2): Capacity, (1 << 3): Sum
    int totalAlarmThresholds[PCNT_CNT_BIT_MAX];
    PEOPLE_CNT_LINE_S lines[MAX_IPC_PCNT_LINE];
    char copyChn[MAX_LEN_65];//copy to channel...
    struct smart_event_schedule sche;
    MS_BOOL supportOsdLarger;
};

struct ms_3d_ptz_control_info {
    int chanid;
    int ptz_cmd;
    float ptz_3dposition_x;
    float ptz_3dposition_y;
    int ptz_3dposition_zoom;
};

struct ms_3d_ptz_speed_info {
    int chanid;
    int ptz_speed;
};

struct ms_vca_support_info {
    int chanid;
    int vca_support;        //0: disable  1:enable
    int vca_type;           //0: init value 1:common-vca   2:IV-vca
    char sdkversion[32];
};

struct ms_vca_support_all {
    struct ms_vca_support_info info[MAX_CAMERA];
};


struct ms_vca_license {
    int chanid;
    int vca_license_status;
    char vca_license[MAX_LEN_64];
};

struct MsVcaBaseInfo {
    int res;
    int chnId;
    int vcaType;           //0: init value 1:common-vca   2:IV-vca
    int vcaSupport;        //0: disable  1:enable
    int vcaLicenseStatus;
    char sdkVersion[MAX_LEN_32];
    char vcaLicense[MAX_LEN_64];
};

struct ms_vca_settings_info {
    int chanid;
    int vca_type;
    int vca_process_fps;
    int vca_scenario_mode;
    int vca_camera_installation;
    int vca_analysis_type;
    int width;
    int height;
    int minobject_window_rectangle_x;
    int minobject_window_rectangle_y;
    int minobject_window_rectangle_width;
    int minobject_window_rectangle_height;
    int maxobject_window_rectangle_x;
    int maxobject_window_rectangle_y;
    int maxobject_window_rectangle_width;
    int maxobject_window_rectangle_height;
};

struct ms_vca_cleancount_info {
    int chanid;
    int incount;
    int outcount;
    int line;
    int resetdb; // 0: don't reset, 1: reset
};

struct personpoint_info {
    int id;
    int type;
    int startX;
    int startY;
    int stopX;
    int stopY;
};

struct ms_personpoint_info {
    int chanid;
    int person_point_cnt;
    int width;
    int height;
    struct personpoint_info point[MAX_LEN_128];
};


struct resq_search_nvr {
    char hostname[32];
    char ipaddr[32];
    int port;
    char netmask[16];
    char gateway[16];
    char dns[32];
    char sn[MAX_LEN_SNCODE];
    char devicetype[16];
    char software[24];
    char model[32];
    char uptime[32];
    char nonce[65];
    int http_port;
    char oem_model[32];
    int upsec;
    char uptone[32];
    int active_status;
    int failover_mode;//
    char failover_ip[32];
    char password[32];
    int max_camera;
    int bond_width;
    char device_name[16];

    char username[32];
    char mac[32];
};

struct ms_failover_slave_status {
    int status;
    char percent[32];
};


struct ms_failover_master_status {
    char ipaddr[MAX_LEN_64];
    char mac[MAX_LEN_32];
    char model[MAX_LEN_32];
    int connect_status;
    int work_status;
    float percent;
};

struct ms_failover_update_master {
    int type;//0=add,1=del
    char ipaddr[MAX_LEN_64];//delete master ip (to delete config file)
};

struct ms_failover_change_mode {
    int mode;
    char ipaddr[MAX_LEN_64];
    char password[MAX_LEN_65];
};

struct ms_debug_log {
    int type;       //MF_ERR/MF_DBG...
    char msg[MAX_LEN_256];
};

typedef struct req_set_trancode {
    int chnid;
    int sid;
    int mode;
    int framesize;
    int bitrate;
    int framerate;
} REQ_SET_TRANCODE;

typedef struct resp_set_trancode {
    int chnid;
    int sid;
    int state;
} RESP_SET_TRANCODE;

typedef struct req_get_trancode {
    int chnid;
    int sid;
} REQ_GET_TRANCODE;

typedef struct resp_get_trancode {
    int chnid;
    int sid;
    int state;
} RESP_GET_TRANCODE;

typedef enum ms_trancode_state {
    TD_UNINT = -1,
    TD_INIT = 0,
    TD_NO_RESOURCE = 1,
    TD_FAILED = 2,
    TD_SUCCESS = 3,
} TRANCODE_STATE;

typedef enum anpr_event_state {
    ANPR_EVENT_NONE = 0,
    ANPR_EVENT_START = 1,
    ANPR_EVENT_END = 2
} ANPR_EVENT_STATE;

typedef enum anpr_export_type {
    ANPR_PLATE_LIST = (1 << 0),
    ANPR_VIDEO = (1 << 1),
    ANPR_PICTURE = (1 << 2),
    ANPR_SUB_VIDEO = (1 << 3),
} ANPR_EXPORT_TYPE;

struct image_day_night {
    int valid;//0=invalid,1=valid
    int enable;
    int startHour;
    int startMinute;
    int endHour;
    int endMinute;
    int exposureLevel;
    int minShutter;
    int maxShutter;
    int gainLevel;
    int irCutLatency;
    int irCutState;
    int irLedState;
    int colorMode;
};

typedef struct ImageDaynightScene {
    int valid[MAX_IMAGE_DAY_NIGHT_DEFUALT];
    int minShutter[MAX_IMAGE_DAY_NIGHT_DEFUALT];
    int maxShutter[MAX_IMAGE_DAY_NIGHT_DEFUALT];
    int limitGain[MAX_IMAGE_DAY_NIGHT_DEFUALT];
    int irCutInterval[MAX_IMAGE_DAY_NIGHT_DEFUALT];
    int irCutStatus[MAX_IMAGE_DAY_NIGHT_DEFUALT];
    int irLedStatus[MAX_IMAGE_DAY_NIGHT_DEFUALT];
    int colorMode[MAX_IMAGE_DAY_NIGHT_DEFUALT];
} IMAGE_DAYNIGHT_SCENE_S;

typedef struct ImageDaynightMulti {
    IMAGE_DAYNIGHT_SCENE_S scenes[1];
} IMAGE_DAYNIGHT_MULTI_S;

typedef struct ImageDaynightSingle {
    struct image_day_night image[MAX_IMAGE_DAY_NIGHT];
    MS_BOOL hasSche;
    struct schdule_item dnSche[IPC_SCHE_TEN_SECTIONS];
    int fullcolorSupport;
} IMAGE_DAYNIGHT_SINGLE_S;

struct set_image_day_night_str {
    int chanid;
    IPC_IMAGE_TYPE_E type;
    union {
        IMAGE_DAYNIGHT_SINGLE_S imgSingle;
        IMAGE_DAYNIGHT_MULTI_S imgMulti;
    };
};

struct image_roi_area {
    int enable;
    int left;
    int top;
    int right;
    int bottom;
};

struct image_exposure_area {
    int left;
    int top;
    int right;
    int bottom;
};

struct set_image_roi {
    int chanid;
    int enable;
    int type; // 1:less than 2.4.02; 0:more than 2.4.02
    char sdkversion[MAX_LEN_32];
    struct image_roi_area area[MAX_IMAGE_ROI_AREA];
};

struct set_image_roi_batch {
    int chanid[MAX_CAMERA];
    int enable;
    int size;
    struct image_roi_area area[MAX_IMAGE_ROI_AREA];
};

struct delete_arae_params {
    int chan_id;
    int area_id;
};

struct white_balance_schedule {
    int chanid;
    struct schedule_day schedule_day[MAX_DAY_NUM];
};

struct white_balance_schedule_single {
    int chanid;
    int day;
    struct schedule_day schedule_day;
};

struct white_balance_schedule_batch {
    int chanid[MAX_CAMERA];
    struct schedule_day schedule_day[MAX_DAY_NUM];
};

struct exposure_schedule {
    int chanid;
    struct exposure_schedule_day schedule_day[MAX_DAY_NUM];
};

struct exposure_schedule_single {
    int chanid;
    int day;
    struct exposure_schedule_day schedule_day;
};

struct exposure_schedule_batch {
    int chanid[MAX_CAMERA];
    struct exposure_schedule_day schedule_day[MAX_DAY_NUM];
};

struct bwh_schedule {
    int chanid;
    struct schedule_day schedule_day[MAX_DAY_NUM];
};
struct bwh_schedule_single {
    int chanid;
    int day;
    struct schedule_day schedule_day;
};

struct bwh_schedule_batch {
    int chanid[MAX_CAMERA];
    struct schedule_day schedule_day[MAX_DAY_NUM];
};

struct EnhancementSchedule {
    int chnId;
    struct schedule_day whiteBalanceSche[MAX_DAY_NUM];
    struct exposure_schedule_day exposureSche[MAX_DAY_NUM];
    struct schedule_day bwhSchedule[MAX_DAY_NUM];
};

struct req_p2p_send_data_header {
    int number;     //current packet number
    int count;      //total packet count
    int offset;     //current packet offset
    int file_size;  //file total size
    int datalen;    //data len
    int crc;        //calc sum
    int reset;
};

struct req_p2p_send_cfg {
    char name[128];
    int datalen;
};

struct req_change_password {
    char username[MAX_USER_LEN * 2];
    char username_ex[MAX_USER_LEN * 2];
    char password[MAX_LEN_256];
    char password_ex[MAX_LEN_256];
    char key[KEY_LEN];
    int p2psid;
};

struct resp_change_password {
    char res[128];
};

struct req_key_tool {
    char pub_key[MAX_LEN_512];
};

struct resp_key_tool {
    int res;//0=success,-1=failed
    char key_id[KEY_LEN];
    char key[PKEY_LEN];
};


struct video_general_info {
    int width;
    int height;
    int frame_rate;
    int bit_rate;
};

struct camera_general {
    struct video_general_info main_info;
    struct video_general_info sub_info;
};

struct ms_smart_leftremove_info {
    int chanid;
    int sensitivity;
    int left_enable;
    int remove_enable;
    int min_time;
    int x;
    int y;
    int width;
    int height;
    char area[300];
    char polygonX[MAX_LEN_64];//5:88:88:5:-1:-1:-1:-1:-1:-1:
    char polygonY[MAX_LEN_64];//5:5:86:86:-1:-1:-1:-1:-1:-1:
    char copyChn[MAX_LEN_65];//copy to channel...
    int presetExist[MAX_SMART_SCENE];
    SMART_REGION_TYPE regionType;
    SMART_REGION_SCENE regionScene;
    SMART_REGION_INFO regionInfo[MAX_SMART_REGION];
    int format; // for p2p compatible, 0: text, 1: json
};

struct ms_video_rect_info {
    int width;
    int height;
};

struct req_anr_query {
    char ip_addr[MAX_LEN_32];
    char mac[64];
};

struct req_channel_status {
    int type; //0=failover, 1=anr
    int chnid;
};

struct resp_channel_status {
    int type;//0=failover, 1=anr
    int chnid;
    int res;
    int frame_rate;
};

struct req_modify_anr {
    int chn;
    int enable;
    char channels[MAX_CAMERA + 1];
};

struct resp_anr_support {
    int chn;
    int anr_support;
};

struct channel_for_batch {
    int chanid[MAX_CAMERA];
    int size;
};

struct req_write_log_batch {
    struct log_data log;
    long long channels;
};

struct resp_channel_for_batch {
    int chanid[MAX_CAMERA];
    int res[MAX_CAMERA];
    int size;
};

struct req_set_anr_enable_batch {
    struct channel_for_batch info;
    int enable;
};

struct resp_set_anr_enable_batch {
    struct resp_channel_for_batch info;
    int enable;
};

struct stream_state_batch {
    int primary[MAX_CAMERA]; //-1=disable, 0=disconnect,1=connect
    int secondary[MAX_CAMERA];
    int size;
};

struct ms_lpr_license {
    int chanid;
    char license_value[MAX_LEN_256];
    int license_status;//0=Invalid, 1=Valid
};

struct ms_lpr_support_info {
    int chanid;
    int vca_support;        //0: disable  1:enable
    int vca_version;
};


struct ms_lpr_position_info {
    char name[MAX_LEN_64];
    int startX;
    int startY;
    int endX;
    int endY;
};

struct ms_lpr_night_mode {
    int enable;
    int level;
    int starthour;
    int startminute;
    int stophour;
    int stopminute;
    int effective_mode;
};

typedef enum IpcAitype {
    IPC_AITYPE_NONE = 0,
    IPC_AITYPE_LPR1 = 1,
    IPC_AITYPE_LPR2 = 2,
    IPC_AITYPE_LPR3 = 3,
    IPC_AITYPE_FD1  = 4,
    IPC_AITYPE_IOT  = 5,
    IPC_AITYPE_FD2  = 7,
    IPC_AITYPE_CELLULAR = 8,
    IPC_AITYPE_LPR4 = 9,
    IPC_AITYPE_LPR_EU = 11,
    IPC_AITYPE_LPR_AP = 12,
    IPC_AITYPE_LPR_AM = 13,
    IPC_AITYPE_LPR_ME = 14,
    IPC_AITYPE_PARKING = 40,
    IPC_AITYPE_MAX,
} IPC_AITYPE_E;

struct ms_lpr_settings {
    int chanid;
    int enable;
    int resolution_width;
    int resolution_height;
    int area_x;
    int area_y;
    int area_width;
    int area_height;
    int day_night_mode_enable;
    int scene;

    int direction_enable;
    int region_enable;
    int roiid_enable;
    int process_mode;
    int repeat_check_time_value;
    int repeat_check_time_unit;
    int post_enable;
    int post_type;
    int post_tcp_port;
    char post_http_user[MAX_LEN_64];
    char post_http_password[MAX_LEN_64];
    char post_http_url[MAX_LEN_512];
    int confidence;
    char area_list[MAX_LEN_64][MAX_LEN_32];
    char cur_area[MAX_LEN_32];
    int in_night_mode;//-1:default, 0:day_mode, 1:night_mode

    int platecolorEnable;
    int vehicletypeEnable;
    int vehiclecolorEnable;

    struct ms_lpr_position_info roi[4];
    struct ms_lpr_position_info preset1[4];
    struct ms_lpr_position_info preset2[4];
    struct ms_lpr_position_info preset3[4];
    struct ms_lpr_position_info preset4[4];

    struct ms_lpr_license license;
    struct ms_lpr_night_mode night_mode_info;
    //json
    int jsonSupport;//0:not support 1:support
    int irLedExternalSupport;//0:not support 1:support
    int vehicleEnhancement;//0:disable 1:enable
    
    int vehicleBrandEnable;
    MS_POLYGON normalPolygons[MAX_SMART_REGION];
    IPC_AITYPE_E aitype;
};

//更改该结构体成员前注意一下这个结构体说明@struct resp_export_anpr_backup_remote
struct lpr_metadata_info {
    int chnid;
    char guid[MAX_LEN_64];
    unsigned long long ltime;   //us
    char ptime[MAX_LEN_32];
    char plate[MAX_LEN_64];     //license
    int color0;                 //vehicle color
    int color1;                 //plate color
    short speed;
    int imagecnt;
    int direction;
    int roiId;
    char ptype[MAX_LEN_16];
    char region[MAX_LEN_32];
    ANPR_EVENT_STATE state;
    ANPR_VEHICLE vehicleType;
    ANPR_BRAND_E brand;
};

struct lpr_image_info {
    char *pdata;
    int size;
};

struct lpr_msfs_private {
    char guid[18];
    int v_color;
    int p_color;
    int speed;
    int i_count;
    int direction;
    int roiId;
    char ptype[MAX_LEN_16];
    char region[MAX_LEN_16];
    ANPR_SPEED_MODE speedType;
    ANPR_VEHICLE vehicleType;
    ANPR_BRAND_E brand;
};

struct anpr_search_filter {
    ANPR_MODE_TYPE type;
    ANPR_COLOR plateColor;
    ANPR_VEHICLE vehicleType;
    ANPR_COLOR vehicleColor;
    ANPR_SPEED_MODE speedType;
    int speed;
    ANPR_DIRECTION direction;
};

struct req_search_anpr_backup {
    char chnMaskl[MAX_LEN_65];
    char keyWord[MAX_LEN_65];
    int chnNum;
    unsigned int enMajor;
    unsigned int enMinor;
    char pStartTime[MAX_LEN_32];
    char pEndTime[MAX_LEN_32];
    struct anpr_search_filter filter;
    char ipaddr[MAX_LEN_64];
};

struct resp_search_anpr_backup {
    int chnid;
    int sid;
    int port;
    int index;
    char pTime[MAX_LEN_32];
    char plate[MAX_LEN_64];
    char ptype[MAX_LEN_16];
    char region[MAX_LEN_32];
    int direction;
    int roiId;
    int allCnt;
    int allSize;
    int infoSize;
    int bImageSize;
    int sImageSize;
    ANPR_COLOR plateColor;
    ANPR_VEHICLE vehicleType;
    ANPR_COLOR vehicleColor;
    int speed;
    ANPR_BRAND_E brand;
};

struct rep_export_anpr_backup {
    int sid;
    int index;
    int exportType;                 //Plate List / Video / Picture  value: ANPR_EXPORT_TYPE
    int streamType;                 //stream Main (1 << FILE_TYPE_MAIN) | Sub (1 << FILE_TYPE_SUB)
    int avifileType;                //0=MP4, 1=AVI, 2=PS
    char logfile_name[MAX_LEN_64];  //ANPR_log_20190926205011.csv
    char dev_path[MAX_LEN_256];
};

struct ms_auto_tracking {
    int chanid;
    int enable;
    int show;
    int sensitivity;
    int time;
    int manual_tracking;
    int zoom_mode;
    int zoom_number;
    struct schedule_day schedule_day[MAX_DAY_NUM];
    char area[300];
    //
    int system_human_vehicle_support;
    int auto_tracking_object;   //0: none, 1: only Person, 2: only Vehicle, 3: Person and Vehicle
    Uint8 reportMotion; //0: don't report, 1: report
};

struct ms_manual_tracking {
    int chanid;
    int manual_tracking;
};

struct req_auto_tracking_batch {
    Uint64 channels;
    struct ms_auto_tracking info;
};

typedef struct ms_manual_tracking_region {
    int chanid;
    int manual_tracking;
    float startX;   //max 256.00
    float startY;
    float width;
    float height;
} MS_TRK_REGION;

struct ms_ipc_alarm_out {
    int chanid;
    int alarmType[MAX_IPC_ALARM_OUT];
    int alarmStatus[MAX_IPC_ALARM_OUT];
    int alarmCnt;
};

struct ms_ipc_alarm_out_cfg {
    int chanid;
    int alarmid;
    int alarmType;
};

struct ms_ipc_alarm_out_batch_cfg {
    struct ms_ipc_alarm_out_cfg cfg[MAX_IPC_ALARM_OUT];
    int cnt;
    long long batch;
};


struct ms_ipc_alarm_in {
    int chanid;
    int alarmEnable[MAX_IPC_ALARM_IN];
    int alarmType[MAX_IPC_ALARM_IN];
    int alarmStatus[MAX_IPC_ALARM_IN];
    int alarmCnt;
};

struct ms_ipc_alarm_in_cfg {
    int chanid;
    int enable;
    int alarmid;
    int alarmType;
};

struct ms_ipc_alarm_in_batch_cfg {
    struct ms_ipc_alarm_in_cfg cfg[MAX_IPC_ALARM_IN];
    int cnt;
    long long batch;
};


struct ms_ipc_alarm_cnt {
    int chanid;
    int alarmInCnt;
    int alarmOutCnt;
};

struct rep_export_anpr_backup_remote {
    int sid;
    int allIndex;           //0=selected, others=maxIndex
    int selectIndex[100];    //
    int selectCnt;
    int exportType;         //Plate List / Video / Picture  value: ANPR_EXPORT_TYPE  FACE_EXPORT_TYPE
};

struct req_remote_msfs_backup {
    MSFS_CTRL_TYPE type;
    MSFS_VIDEO_FORMAT videoFormat;
    int streamType;     //stream Main (1 << FILE_TYPE_MAIN) | Sub (1 << FILE_TYPE_SUB)
    int streamData;     //0: need send struct reco_frame , 1:not need
    int resolution;     //0:auto, 1=704*576, 2=640*360
    union {
        struct rep_export_anpr_backup_remote anpr;//anpr & pos & face
        struct rep_export_common_backup_remote comm;
    };

    int sendMode;
};

struct remote_img_info {
    char filename[256];
    int size;
};

struct remote_record_file_info {
    int format; //0=frame, 1=avi, 2=mp4
    char filename[256]; //filename
};

/*
    更改该结构体成员，需要更改插件和无插件接收函数 anpr_download_read，其有校验接收数据大小(sizeof(struct resp_export_anpr_backup_remote))
    @record_connect.js SIZEOF_RESP_EXPORT_ANPR_BACKUP_REMOTE
    @recordfs.h struct resp_export_anpr_backup_remote
*/
struct resp_export_anpr_backup_remote {
    int res;//0=header, -1=finish
    ANPR_EXPORT_TYPE type;
    struct remote_record_file_info record;
    struct remote_img_info image;
    struct lpr_metadata_info metadata;
};

typedef struct MsFacePrivate {//size:8 bytes
    int id:18;                    //face id (0-99999)                                       18
    int blur:8;                   //模糊度     (0-100)                                         8

    FACE_AGE age:3;               //-1:未识别; 0-17:Child; 18-59Adult; >59:Elderly             3
    int gender:3;                 //-1:未识别; 0:male; 1:female;                               3
    int glasses:3;                //-1:未识别; 0:no; 1:eyeglassese; 2:sunglassese;             3
    int mask:3;                   //-1:未识别; 0:no; 1:yes;                                    3
    int cap:3;                    //-1:未识别; 0:no; 1:yes;                                    3
    int expression:3;             //-1:未识别; 0:happy; 1:sad; 2:calm;                         3
}MS_FACE_PRIVATE;

struct face_meta_info {
    int chnId;
    MS_U64 pTime;
    char time[MAX_LEN_32];
    MS_FACE_PRIVATE attribute;
};

typedef enum FaceExportType {
    FACE_LOG_LIST = (1 << 0),
    FACE_VIDEO = (1 << 1),
    FACE_PICTURE = (1 << 2),
}FACE_EXPORT_TYPE;

struct resp_export_face_backup_remote {
    int res;//0=header, -1=finish
    FACE_EXPORT_TYPE type;
    struct remote_record_file_info record;
    struct remote_img_info image;
    struct face_meta_info faceInfo;
};

struct resp_export_comm_backup_remote {
    int res;//0=header, -1=finish
    unsigned long long fileSize;
    int fileType;
    char fileName[128];
};

struct resp_remote_msfs_backup {
    MSFS_CTRL_TYPE type;
    union {
        struct resp_export_face_backup_remote face;
        struct resp_export_anpr_backup_remote anpr;
        struct resp_export_comm_backup_remote comm;
    };
};

struct req_upgrade_ipc_image {
    int chnid;
    int keepconfig;
    char filepath[MAX_LEN_256];
};

struct resp_upgrade_ipc_image {
    int chnid;
    UPGRADE_IPC status;
};

struct ms_ipc_alarm_out_state {
    int chanid;
    int alarmid;
    int state;
};

struct ms_upgrade_ipc_image_info {
    int chnid;
    int port;
    int filesize;
    char filepath[MAX_LEN_256];
};

struct ms_privary_mask_edit {
    int chnid;
    int maskid;
};

struct ms_ipc_event_status {
    struct ms_vca_alarm_status vca;
    int alarm_in_status[MAX_IPC_ALARM_IN];
    int alarm_out_status[MAX_IPC_ALARM_OUT];
    int motion_status;
    int audio_status;
    int network_status;
    int alarm_in_type[MAX_IPC_ALARM_IN];
    int alarm_out_type[MAX_IPC_ALARM_OUT];
};

typedef enum ms_check_platform {
    MS_HI_OTHER = 0,
    MS_HI_3536  = 1,
    MS_HI_3798  = 2,
    MS_HI_3536C = 3,
    MS_HI_3536G = 4,
    MS_NT_98323 = 5,
    MS_HI_3536A = 7,
    MS_NT_98633 = 8
} MS_CHK_PLATFORM;

typedef enum ms_apptype {
    MS_IPC  = 0,
    MS_NVR  = 1,
    MS_APP  = 2,
} MS_APPTYPE;

typedef enum ms_actived {
    MS_ACT_OFF = 0,
    MS_ACT_ON  = 1,
    MS_ACT_LTS = 2,
    MS_ACT_CANDIDATE = 3,
    MS_ACT_ODM = 4,
    MS_ACT_TEST = 5,
} MS_ACTIVED;

struct ms_check_online_upgrade {
    MS_CHK_PLATFORM iPlatform;
    char pSoftversion[MAX_LEN_64];
    MS_APPTYPE iApptype;
    int iAIType;
    MS_ACTIVED iActived;
    char pHardware[MAX_LEN_64];
    char pModel[MAX_LEN_64];
    int iOemType;
};

typedef enum ms_check_state {
    MS_STATE_FAILED = 0,
    MS_STATE_SUCCESS = 1,
} MS_CHK_STATE;

struct resp_check_online_upgrade {
    MS_CHK_STATE state;
    int fileSize;
    char pSoftversion[MAX_LEN_64];
    char pUrl[MAX_LEN_128];
    char pDescription[MAX_LEN_128];
};

struct resp_check_online_upgrade_ipc {
    int chnid;
    struct resp_check_online_upgrade upInfo;
};

struct resp_check_online_upgrade_ipc_batch {
    struct resp_check_online_upgrade upInfo[MAX_CAMERA];
};

struct ms_online_upgrade_image {
    char pUrl[MAX_LEN_128];
    char filepath[MAX_LEN_128];  //UPDATE_IMAGE_NAME | UPDATE_IMAGE_NAME_IPC
};

typedef struct ReqUpgradeCamera {
    Uint64 chnIdMask;
    Uint64 keepConfMask; // 0: not keep IPC configuration after upgrade; 1: Opposite to 0
    int fileSize;
    char url[MAX_LEN_128];
    char filePath[MAX_LEN_128];
}REQ_UPGRADE_CAMERA_S;

typedef struct RespUpgradeCamera {
    Uint64 chnIdMask;
    UPGRADE_IPC statusArr[MAX_REAL_CAMERA];
}RESP_UPGRADE_CAMERA_S;

struct ms_heat_map_setting {
    int chnid;
    int enable;
    int sensitivity;
    int minsize;
    int mintime;
    int adaptability;
    char map_mask[300];
    SMART_SCHEDULE sche;
    MS_BOOL isNtPlatform;
};

struct ms_heat_map_setting_batch {
    long long batch;
    struct ms_heat_map_setting info;
};

typedef enum {
    HEAT_MAP_SUB_DAILY   = 0,
    HEAT_MAP_SUB_WEEKLY  = 1,
    HEAT_MAP_SUB_MONTHLY = 2,
    HEAT_MAP_SUB_ANNUAL  = 3,
    HEAT_MAP_SUB_HOUR    = 4
} HEAT_MAP_SUB_TYPE_E;

struct ms_heat_map_report {
    int chnid;
    int mainType;   //0:space 1time
    int subType;    //HEAT_MAP_SUB_TYPE_E
    char pTime[64]; //2020-02-06 00:00:00
};

struct ms_heat_map_report_resp {
    char *buff;
    int size;
};

typedef enum ptz_control_cmd {
    AUTOIRIS_ON = 38,
    AUTOIRIS_OFF = 39,
    AUX_FOCUS = 49,
    PTZ_LEN_ON = 84,
    PTZ_LEN_OFF = 85,
    ONE_TOUCH_PATROL = 101,
    LENS_INIT = 102
} PTZ_CONTROL_CMD;

struct ms_ipc_ptz_control {
    int chnid;
    PTZ_CONTROL_CMD ptzCmd;
};

struct ms_ipc_led_params_resp {
    int chnid;
    int led_alarm;
    int led_number;
    int led_manual;
};

struct ms_ipc_led_status_resp {
    int chnid;
    int led_status;
};

struct ms_ipc_snaphost {
    int chnid;
    int nImageSize;
    char *pImage;
};

struct ms_live_snaphost {
    int chnid;
    int sid;
    SCREEN_E screen;
    int noresource;
};

typedef enum compression_jpg {
    CPN_NO = 0,
    CPN_YES = 1,
} COMP_JPG;

typedef struct pb_indentation_diagram {
    int chnid;
    int sid;
    char playtime[MAX_LEN_32];
} PB_IN_DIAGRAM;

struct white_led_alarm {
    int acto_chn_id;
    int flash_mode;
    int flash_time;
};

struct ipc_online_upgrade_info {
    char pUrl[MAX_LEN_256];
    int nSize;
};

struct ms_uid_info {
    char mac[MAX_LEN_64];
    char encrypt[MAX_LEN_64];
    int action;
    char softwareVer[MAX_LEN_64];
    char region[MAX_LEN_32];
};

struct ms_uid_resp_info {
    char pResp[MAX_LEN_256];
    int size;
};


struct ms_lpr_wildcards {
    int chanid;
    int filter;
    int enable[MAX_LEN_9];
    int cr_count[MAX_LEN_9];
    char format[MAX_LEN_9][MAX_LEN_16];
    int maxPlateCharNum;
};

struct linecrossing_info2 {
    int enable;
    int startX;
    int startY;
    int stopX;
    int stopY;
    int direction;
    DETEC_OBJ_EN objtype;
    MS_LINE line[MAX_SMART_SCENE];
};

struct ms_linecrossing_info2 {
    int chanid;
    int sensitivity;
    int width;
    int height;
    struct linecrossing_info2 line[MAX_LEN_4];
    DETEC_OBJ_EN objtype; //@david, need to delete.
    char copyChn[MAX_LEN_65];//copy to channel...
    SMART_REGION_TYPE lineType;
    SMART_REGION_SCENE lineScene;
    int presetExist[MAX_SMART_SCENE];
};

//0=entrance,   1=exiting,          2=line crossing,        3=loitering,
//4=human,      5=people counting,  6=object left/removed,  7=advanced motion
struct ms_vca_settings_info2 {
    int chanid;
    int vca_type;
    int vca_process_fps;
    int vca_scenario_mode;
    int vca_camera_installation;
    int vca_analysis_type;
    int width;
    int height;
    int minobject_window_rectangle_x[MAX_LEN_8];
    int minobject_window_rectangle_y[MAX_LEN_8];
    int minobject_window_rectangle_width[MAX_LEN_8];
    int minobject_window_rectangle_height[MAX_LEN_8];
    int maxobject_window_rectangle_x[MAX_LEN_8];
    int maxobject_window_rectangle_y[MAX_LEN_8];
    int maxobject_window_rectangle_width[MAX_LEN_8];
    int maxobject_window_rectangle_height[MAX_LEN_8];
    char copyChn[MAX_LEN_65];//copy to channel...
};

struct ms_water_mark {
    int chanid;
    int enable;
    MS_BOOL watermarkSupport;
    char pWaterMark[MAX_LEN_32];
};

struct ms_water_mark_batch {
    struct ms_water_mark info;
    char chanmask[MAX_LEN_65];
};

typedef enum {
    VCA_OBJ_NONE = 0,
    VCA_OBJ_HUMAN,
    VCA_OBJ_CAR,
} VCA_OBJ_TYPE;

struct alarm_info {
    int event;
    int state;
    Uint64 channel;
    Uint64 recordon;
    Uint64 triChns;
    char pRecType[MAX_LEN_128];
    Uint64* pTriChnMask;
    VCA_OBJ_TYPE object[MAX_REAL_CAMERA];
};

struct req_search_split_pb_backup {
    char chnid;
    int sid;
    int enType;
    int enEvent;
    int enState;
    char pStartTime[MAX_LEN_32];
    char pEndTime[MAX_LEN_32];
    MF_BOOL all;
};

struct req_search_split_pb_range {
    char chnid;
    int enType;
    int enEvent;
    int enState;
    char pStartTime[MAX_LEN_32];
    char pEndTime[MAX_LEN_32];
};

struct resp_search_split_pb_range {
    char chnid;
    long startTime;
    long endTime;
};

struct req_start_split_play {
    int chnid;
    int actState;                   //PB_PLAY | PB_STOP
    int actSpeed;                   //PLAY_SPEED_1X
    int actdir;                     //PB_FORWARD | PB_BACKWARD
    int enType;                     // main(0) sub(1)
    char sidMaskl[MAX_LEN_17];
    char pStartTime[MAX_LEN_16][MAX_LEN_32];
    char pEndTime[MAX_LEN_16][MAX_LEN_32];
    char pPlayTime[MAX_LEN_16][MAX_LEN_32];
};

struct req_split_play {
    int chnid;
    char sidMaskl[MAX_LEN_17];
};

struct req_split_play_speed {
    int chnid;
    int speed;
    int playallframe;
    char sidMaskl[MAX_LEN_17];
};


struct resp_split_pb_state {
    int chnid;
    char sidMask[MAX_LEN_17];
    char stateMask[MAX_LEN_17];
};

struct resp_split_pb_snap_state {
    int chnid;
    int winid[MAX_LEN_16];
    int stateWinid[MAX_LEN_16];
};

struct resp_split_pb_time {
    int chnid;
    long nTime[MAX_LEN_16];
};

struct req_seek_split_play {
    int sid;
    long seekTime;
};

struct ms_digitpos_zoom_state {
    int chnid;
    int state;
    int zoomNumber;
};

struct req_split_snaphost {
    int chnid;
    int screen;                     //SCREEN_MAIN
    int sid[MAX_LEN_16];            // -1 is no snap;  WIN_SID(id)
    Uint64 uSecTime[MAX_LEN_16];    //microseconds
};

struct video_profile_type {
    int profile;
    int videotype;
};

struct video_smart_stream {
    int streamid;
    int streamtype;
};

struct video_smartstream_type {
    char pkey[MAX_LEN_32];
    int value;
};

struct audioalarm_info {
    int enable_alarm;
    int enable_audioalarm;
};

struct motionalarm_info {
    int enable_alarm;
    int enable_motionalarm;
};

struct req_stream_info {
    int chnid;
    int fisheyeType; // fisheye 1, other 0
};

struct event_stream_info {
    int chnid;
    int fisheyeType; // fisheye 1, other 0
    int enable;
    int framerate;
    int bitrate;
    int iframeinterval;
};

struct resp_lpr_night_mode {
    int chnid;
    int nightMode;
};

struct resp_ipc_autoiris_status {
    int chnid;
    int status;
};

struct ms_ipc_psw_challenge_resp {
    char pk[MAX_LEN_1024];
    char key[MAX_LEN_1024];
    int keyId;
};

typedef struct IpcGlobalSupportInfo {
    int chnId;
    int canIris;
    int isMiniPtzDome;
    int isNtPlatform;
    int isPanoramo2Sensor;
    int supportLpr;
} IPC_GLOBAL_SUPPORT_INFO_S;

struct ipc_system_info {
    int res;
    int audioSupport;                // 1:support, 0:not support
    int audioSupportMode;            // 0:mic only, 1:mic and speaker
    int audioLineInputSupport;       // 1:support, 0:not support
    int systemSpeakerSupport;        // 1:support, 0:not support
    int system_manual_speed_support; // ptz basic
    int system_mosaic_support;
    int system_human_vehicle_support;
    char system_sn_code[MAX_LEN_128];
    int system_heatmap_support; //-1:ipc不支持该字段，走老的型号判断，0: not support, 1: support
    int system_auto_tracking_support; //-1:ipc不支持该字段，0: not support, 1: support
    int system_smart_stream_support_in_other_stream; //-1:ipc不支持该字段，0: not support, 1: support
    IPC_AUDIO_SUPPORT_E systemAudioSupportType;
    MS_BOOL isFaceCustomizeModeExists;
    MS_BOOL fullcolorSupport;
    MS_BOOL wiperSupport;
    MS_BOOL ptzSupport; //device support ptz
    MS_BOOL realPtzSupport;// device support ptz preset
    MS_BOOL system_3DPositionSupport; //The device support 3D position 
    IPC_GLOBAL_SUPPORT_INFO_S globalSupportinfo;
    MS_BOOL supportOsdLarger; //Is Support Osd Larger
    MS_BOOL watermarkSupport;
    int system_image_slider_type;//是否显示光敏拉条 0~2
    int defogSupport;
    IPC_AITYPE_E aitype;

    //face
    int faceSupport;
    MS_BOOL ntFaceMosaicSupport;//联咏判断是否支持人脸马赛克。8.0.3 unit2以上支持 
    
    //lpr
    int lprSupport;        //0: disable  1:enable
    int lprVersion;
    
    //vca
    int vcaSupport;        //0: disable  1:enable
    int vcaType;           //0: init value 1:common-vca   2:IV-vca
    char sdkversion[32];

    MS_BOOL vcaLicenseInit;         //true:已有缓存值，false：需获取
    int vcaLicenseStatus;           //该参数待界面主动获取后缓存
    char vcaLicense[MAX_LEN_64];    //该参数待界面主动获取后缓存
    
    
    MS_IPC_TYPE modelType;
    char sn[MAX_LEN_128];
    char ipaddr[MAX_LEN_64];
    char fwversion[MAX_LEN_128];
    char productmodel[MAX_LEN_128];
    char chipinfo[MAX_LEN_64];
};

typedef enum ms_ipc_encode {
    ENCODE_AAC_LC       = 1,
    ENCODE_G711_ULAW    = 2,
    ENCODE_G711_ALAW    = 3,
    ENCODE_G722         = 4,
    ENCODE_G726         = 5,
} IPC_AUDIO_ENCODE;

typedef enum ms_ipc_samplerate {
    SAMPLERATE_8KHZ     = 0,//8KHZ
    SAMPLERATE_16KHZ    = 1,//16KHZ
    SAMPLERATE_32KHZ    = 2,//32KHZ
    SAMPLERATE_44KHZ    = 3,//44.1KHZ
    SAMPLERATE_48KHZ    = 4,//48KHZ
} IPC_AUDIO_SAMPLERATE;


struct ipc_audio_samplerate {
    IPC_AUDIO_SAMPLERATE sampleRate;
    int bitrateNumber;
    int bitrateValue[MAX_LEN_16];
};

struct ipc_audio_encode {
    IPC_AUDIO_ENCODE encode;
    int sampleRateNumber;
    struct ipc_audio_samplerate sampleRate[MAX_LEN_9];
};

struct ipc_audio_options {
    int encodeNumber;
    struct ipc_audio_encode encodeInfo[MAX_LEN_9];
};

struct ipc_audio_config {
    int chnid;
    int audioEnable;
    int audioMode;//0=Only mic 1=Only speaker 2=Both audio input and output
    int denoise;
    int encoding;//1=AAC LC 2=G.711 u-Law 3=G.711 a-Law 4=G.722 5=G.726
    int sampleRate;//0=8KHz 1=16KHz 2=32KHz 3=44.1KHz 4=48KHz
    int inputGain;
    int inputMode;//0=MIC 1=Line-in
    int audioGainControl;
    int outputVolume;
    int audioBitrate;//xx kbps
};

struct ipc_audio_info {
    int res;//-1=failed
    int support;//0=not support function, 1=support
    int supportMode;//0=mic only, 1=mic and speaker (output support)
    int supportInputMode;//0=not support, 1=support (input mode support)
    struct ipc_audio_options options;
    struct ipc_audio_config config;
};

struct req_ipc_audio_config {
    Uint64 channels;
    struct ipc_audio_config info;
};

struct ms_online_user_info {
    char userName[MAX_LEN_64];
    USER_LEVEL userLevel;
    char ipaddr[MAX_LEN_64];
    char loginTime[MAX_LEN_32];
};

typedef enum online_user_action {
    USER_ADD        = 0,
    USER_HEARTBEAT  = 1,
} USER_ACTION;

struct ms_online_user_action {
    USER_ACTION action;
    Uint64 sessionId;
    char userName[MAX_LEN_64];
    USER_LEVEL userLevel;
    char ipaddr[MAX_LEN_64];
};

struct ms_req_ipc_info {
    char ddns[MAX_LEN_64];
    char ipaddr[MAX_LEN_64];
    char username[MAX_LEN_64];
    char password[MAX_LEN_64];
    int port;
};

struct ms_ipc_fisheye_info {
    int support;        //Yes(1)  No(0)
    int transfer;       //Multi(0)  Bundle(1)
    int installation;   //Ceiling(0)  Wall(1)  Flat(2)
    int display;        //1O(0)  1P(1) ...
    int streamCnt;      //by display
};

struct req_ipc_set_fisheye_info {
    char ddns[MAX_LEN_64];
    char ipaddr[MAX_LEN_64];
    char username[MAX_LEN_64];
    char password[MAX_LEN_64];
    int port;
    int transfer;       //Multi(0)  Bundle(1)
    int installation;   //Ceiling(0)  Wall(1)  Flat(2)
    int display;        //1O(0)  1P(1) ...
};

typedef enum ms_fisheye_display {
    FISH_1O         = 0,
    FISH_1P         = 1,
    FISH_2P         = 2,
    FISH_2R         = 3,
    FISH_4R         = 4,
    FISH_1O3R       = 5,
    FISH_1P3R       = 6,
    FISH_1O1P3R     = 7,
} FISHEYE_DISPLAY;

typedef struct ms_req_record_info {
    int chnid;
    int enable;
    int streamType;
    int recType;
    //int majorType;
    //int minorType;
} REQ_RECORD_INFO;

typedef struct req_set_ipc_subparam {
    int profile;            //no need set
    int codec;
    int width;
    int height;
    int framerate;
    int bitrate;
    int iframeinterval;
    int ratecontrol;

    int smartstream;
    int smartstreamlevel;

    //for event record
    int recordtype;         //-1. nothing  | 0: general 1:event
    int etframerate;
    int etIframeinterval;
    int etbitrate;
} REQ_IPC_SUBPARAMS;

typedef struct req_set_ipc_paramex {
    char chnid[MAX_LEN_65]; //         0 NO  | 1 Yes
    int trans_protocol;     //-1. nothing  | 0 /1... todo
    int sync_time;          //-1. nothing  | 0 /1... todo
    int audio_enable;       //-1. nothing  | 0 /1... todo
    int videoType_enable;   //-1. nothing  | 0 /1... todo
    int subEnable;          //-1. nothing  | 0 /1... todo
    int fisheyeType;        //-1. nothing  | fisheye 1, other 0

    REQ_IPC_SUBPARAMS stream[STREAM_TYPE_ALLSTREAM];
} REQ_SET_IPCPARAMEX;

typedef enum HttpMethod {
    HTTP_METHOD_GET     = 0,
    HTTP_METHOD_HEAD    = 1,
    HTTP_METHOD_POST    = 2,
    HTTP_METHOD_PUT     = 3,
    HTTP_METHOD_DELETE  = 4,
    HTTP_METHOD_CONNECT = 5,
    HTTP_METHOD_OPTION  = 6,
    HTTP_METHOD_TRACE   = 7,
    HTTP_METHOD_PATCH   = 8,
    HTTP_METHOD_MAX     = 9,
} HTTP_METHOD_E;

typedef struct ms_curl_info {
    char ipcaddr[MAX_LEN_64];
    char username[MAX_LEN_64];
    char password[MAX_LEN_64];
    char reqs[MAX_LEN_4096];
    int port;
    int timeout;
    int nCurlBuffSize;
    int recvHeader; // disable: 0, enable: 1
    char *body;
    int bodySize;
    HTTP_METHOD_E method;
} MS_CURL_INFO;

typedef struct req_set_ipc_param_pool_arg {
    int chnid;
    MS_CURL_INFO info;
    REQ_SET_IPCPARAMEX params;
} IPC_PARAMS_POOL_ARG;

struct req_ipc_set_anr_active {
    int enable;
    int port;
    char ipaddr[MAX_LEN_64];
    char username[MAX_LEN_64];
    char password[MAX_LEN_64];
    char mac[MAX_LEN_32];
};

struct req_diagnostic_log_export {
    int reqform;
    char filepath[MAX_LEN_256];
};

struct resp_diagnostic_log_export {
    int reqform;
    int res;
    char filename[MAX_LEN_256];
};
struct req_remote_pb_resume {
    int sid;
    int direction;//0=forward,1=backward
};

typedef enum {
    AUDIBLE_ACT = 0,
    EMAIL_ACT,
    POPUP_ACT,
    PTZ_ACT,
    ALARMOUT_ACT,
    WHITE_LED_ACT,
    OTHERS_ACT,
} ACTION_MASK;

struct peoplecnt_action {
    int groupid;
    int actmask;  // eg: 1<< AUDIBLE_ACT
};

struct req_ipc_custom_params {
    int chnid;
    char url[MAX_LEN_256];
};

struct resp_ipc_custom_params {
    int res;
    int chnid;
    char data[MAX_LEN_512];
};

typedef struct ms_peoplecnt_data {
    int chnId;
    int flag;   //0: uninit , 1 init
    int incnt;
    int outcnt;
    int capacityCnt;
    int sumCnt;
    int lineInCnt[MAX_IPC_PCNT_LINE];
    int lineOutCnt[MAX_IPC_PCNT_LINE];
    int lineCapacityCnt[MAX_IPC_PCNT_LINE];
    int lineSumCnt[MAX_IPC_PCNT_LINE];
    Uint8 lineType; // mask 0:not trigger, 1:trigger, 0 0 0 0 line3 line2 line1 line0
    //int reset;
} MS_PEOPLECNT_DATA;

typedef struct ms_peoplecnt_variation {
    int incnt;
    int outcnt;

    int srcIntCnt;
    int srcOutCnt;
} MS_PEOPLECNT_VARIATION;

typedef enum {
    PEOPLE_IN_ALARM = 0,
    PEOPLE_OUT_ALARM,
    PEOPLE_CAPACITY_ALARM,
    PEOPLE_SUM_ALARM
} PEOPLE_ALARM_TYPE;

typedef struct ms_people_cnt_alarm {
    PEOPLE_ALARM_TYPE type;
    int in;
    int out;
    int thresholds;
    int line; // total alarm: 0, single alarm: 1 ~ 4
} MS_PEOPLE_ALARM;

typedef struct ms_vca_alarm {
    int chnid;
    int alarm;              //alarm Yes 1 , no 0
    VCA_ALARM_EVENT event;
    VCA_OBJ_TYPE objtype;
    int linenumber; //1-4
    int linedirection;
    int region;//0:不支持多区域; 1-4:触发区域
    Uint64 ltime;
    char ptime[MAX_LEN_32];
    int jpgsize;
    unsigned char *jpgdata;
    MS_PEOPLE_ALARM palarm;
} MS_VCA_ALARM;

struct resp_ipc_frame_resolution {
    char *buff;
    int size;
};

struct req_auto_backup {
    Uint32 sid;                     //for check add No.
    int chnid;
    int enType;                     //main or sub
    //int enEvent;
    //int enState;
    Uint64 pts;
    int snap_res;                   //0:auto, 1=704*576, 2=640*360
    int fileno;
    int filetype;                   //0=mp4,1=avi,2=ps, 3=jpg
    int filesize;
    char pStartTime[MAX_LEN_32];    //also jpg ptime.
    char pEndTime[MAX_LEN_32];
    char dev_name[MAX_LEN_64];
    char filename[MAX_LEN_64];
    char dev_path[MAX_LEN_256];
};

struct req_auto_backup_state {
    Uint32 sid;     //for check add No.
    int state;      //for update : 0 restart 1 stop 2:pause
};

struct resp_auto_backup {
    Uint32 sid;                     //for add No.
    int state;
};

struct resp_notify_pcnt_reset {
    int groupid;
    int type;//0=nvr,1=liveview
};

struct req_p2p_send_file {
    char name[MAX_LEN_256];
    int datalen;
};

struct resp_esata_backup_status {
    ESATA_BACKUP_STATUS status;
    char last_time[MAX_LEN_32];
    float percent;
    Uint64 capacity;//MB
};

typedef enum {
    VMotionEvent0 = 0,
    VMotionEvent1,
    VMotionEvent2,
    VMotionEvent3,
    VMotionEvent4,
    VCARectEvent,
    VRegionalAlarm,
    VRegionalRect,
    VMaxEvent,
} VCA_RTSP_EVNET_TYPE;

typedef enum {
    VcaObjectUnkown = 0,
    VcaObjectPersion,
    VcaObjectVehicle,
} VCA_OBJ_EVNET_TYPE;

struct VacDynamicBoxS {
    Uint32 id;
    Uint32 event;//检测框归属事件 bit @SMART_EVENT_TYPE
    Uint32 alarm;//检测框报警状态归属事件 bit @SMART_EVENT_TYPE
    Uint32 nClass;//人车属性 0=none, 1=person, 2=car, 3=max
    Uint16 left;
    Uint16 top;
    Uint16 right;
    Uint16 bottom;
};

struct VacDynamicBoxALL {
    int chnid;
    int typeId;
    Uint16 resWidth;
    Uint16 resHeight;
    struct VacDynamicBoxS dBox[MAX_VAC_DYNAMIC_BOX];
};

struct RespAutoBackupInfo {
    int from;
    int status;
};

struct RespForamtInfo {
    int esataStatus;
    MF_U8 percent;
    MF_U8 port;//for disk: format / raid create&rebuild
    MF_U32 type;// value:see TYPE_EN, just for disk
};

struct rep_set_tags_record_batch {
    int cnt;//max 32
    int chnid[MAX_LEN_32];
    char pTime[MAX_LEN_32][MAX_LEN_32];
};

struct resp_common_ipc {
    char pDate[MAX_LEN_256];
};

typedef struct PtzBasicInfo {
    int ret;    //ERR_ALLOK, ERR_NOT_SUPPORT
    int chanid;
    int zoomStatus;         //0: always close, 1: always open, 2: 2 seconds, 3: 5 seconds, 4: 10 seconds
    int panTiltStatus;      //0: always close, 1: always open, 2: 2 seconds, 3: 5 seconds, 4: 10 seconds
    int presetStatus;       //0: always close, 1: always open, 2: 2 seconds, 3: 5 seconds, 4: 10 seconds
    int patrolStatus;       //0: always close, 1: always open
    int patternStatus;      //0: always close, 1: always open
    int autoScanStatus;     //0: always close, 1: always open
    int presetFreezing;     //0: No, 1: Yes
    int presetSpeed;        //1~10
    int manualSpeed;        //1: Low, 2: Medium, 3: High
    int patrolRecovering;   //0: No, 1: Yes
    int patrolRecoveryTime; //5~720
    int focusMode;          //0: Auto, 1: Semi-Auto, 2: Manual
    int minFocusDistance;   //0: 1 meter, 1: 1.5 meter, 2: 3 meter, 3: 6 meter, 4: 10 meter, 5: 20 meter
    int resumeTime;         //0: disable, 1: 30 seconds, 2: 60 seconds, 3: 300 seconds, 4: 600 seconds
    int fanWorkingMode;     //-1: not support, 0: Genernal, 1: Enhancement, 2: Constant
    //批量设置，chanid需要设置为-1
    char channelMask[MAX_CAMERA + 1];
} PTZ_BASIC_INFO_S;

struct MsIpcRegionalArea {
    int enable;
    char polygonX[MAX_LEN_64];//5:88:88:5:-1:-1:-1:-1:-1:-1:
    char polygonY[MAX_LEN_64];//5:5:86:86:-1:-1:-1:-1:-1:-1:
    int maxStayEnable;
    int maxStayValue;   //1~60
    int minStayEnable;
    int minStayValue;   //1~-60
    int maxStayTimeEnable;
    int maxStayTimeValue;//1~1800
};

struct MsIpcRegionalPeople {
    int result;
    int chnid;
    int sensitivity;    //1~10
    int minObjX;        //0~320
    int minObjY;        //0~240
    int minObjWidth;    //1~320
    int minObjHeight;   //1~240
    int maxObjX;
    int maxObjY;
    int maxObjWidth;
    int maxObjHeight;
    struct MsIpcRegionalArea regional[MAX_IPC_PCNT_REGION];
    char copyChn[MAX_LEN_65];//copy to channel...
    SMART_SCHEDULE sche;
};

struct ReqIpcPeopleReport
{
    int chnid;
    int mainType;//0=people counting, 1=regional people counting
    int reportType;//0=daily,1=weekly,2=Monthly,3=Annual (only regional),4=daily方式搜索所有数据，此时time参数可以不用传
    char startTime[MAX_LEN_32];

    //for regional people counting
    int region;//bit 0~3
    int lengthOfStayType;//0=all, 1=more than, 2=less than
    int lengthOfStayValue;
    Uint8 lineMask; // 8bits(0: disable, 1:enable) 0 0 0 0 line3 line2 line1 line0
};

struct MsIpcRegionalObj
{
    int id;
    int classType;
    int left;
    int top;
    int right;
    int bottom;
    int stayAlarm;
    int timeExsit;
    int stayTime[MAX_LEN_4];
};

struct MsIpcRegionalData
{
    int result;
    int chnid;
    int frameAlarm;
    int stayAlarm;
    int num[MAX_LEN_4];
    int objCount;
    struct MsIpcRegionalObj obj[60];
};

struct RegionalAlarmInfo
{
    Int16 event;
    Int16 regionNum;
    Int32 chnid;
    Int32 frameAlarm;//阈值报警：人数报警/时长报警 至少一个即为1
    Int32 stayAlarm;//停留人数报警
    Int16 num[4];
};


struct RegionalRectBox
{
    Int32 id;
    Int32 classTyps;
    UInt16 left;
    UInt16 top;
    UInt16 right;
    UInt16 bottom;
    UInt32 alarm;
    UInt32 timeExist;
    UInt16 timeValue[4];
};

struct RegionalRectInfo
{
    Int32 chind;
    UInt16 resolutionWidth;
    UInt16 resolutionHeight;
    UInt16 event;
    UInt16 regionNum;
    Int32 count;
    Int32 lengthOfStayAlarm;    //停留时长报警, bit 0~3
    struct RegionalRectBox rect[60];
};

struct RegionalPcntInfo{
    int stayNumAlarm;//bit:0~3
    int stayLengthAlarm;//bit:0~3
    struct RegionalAlarmInfo alarm;
    struct RegionalRectInfo rect;
};

struct ReqPosEvtSearch
{
    UInt64 posId;//bit 0~16
    char startTime[MAX_LEN_32];
    char endTime[MAX_LEN_32];
    char content[MAX_LEN_1024];
    Uint8 receipt;
    char ipaddr[MAX_LEN_64];
};

struct RespSearchPosBackup {
    int posId;
    int chnid;
    int sid;
    int port;
    int index;
    char pTime[MAX_LEN_32];
    int allCnt;
    int allSize;
    int dataSize;
    char data[MAX_LEN_4096];
    Uint8 receipt;
    char pHeadTime[MAX_LEN_32];
};

struct RespSearchMsfsDetails {
    int sid;
    int index;
};

typedef enum PosExportType {
    POS_LIST = (1 << 0),
    POS_VIDEO = (1 << 1),
} POS_EXPORT_TYPE;

struct RepExportPosBackup {
    int sid;
    int index;
    int exportType;                 //pos List / video value: POS_EXPORT_TYPE
    int streamType;                 //stream Main (1 << FILE_TYPE_MAIN) | Sub (1 << FILE_TYPE_SUB)
    int avifileType;                //0=MP4, 1=AVI, 2=PS
    char logfile_name[MAX_LEN_64];  //pos_log_20190926205011.csv
    char dev_path[MAX_LEN_256];
};

typedef enum NetTestRes {
    RES_DEFAULT = -10,
    RES_FORBIDDEN = -3,
    RES_FAILED = -2,
    RES_UNRECEIVE = -1,
    RES_SUCCESS = 0,
} NET_TEST_RES;

typedef struct RespNetTestResult {
    int ttl;
    int bytes;
    float time;//ms
    NET_TEST_RES res;
    char ip[MAX_LEN_32];
    char buf[MAX_LEN_128];
}RESP_NET_TEST_RES;

/* two-way audio talk */
typedef struct req_p2p_two_way_audio_opt {
    int platform;   // -1:init 0:NVR   1:CAM
    int opt;        // -1:init 0:open  1:close
    int chnid;      // -1:init Only CAM vaild
} REQ_P2P_TWO_WAY_AUDIO_OPT;

enum {
    TALK_DEFAULT = -10,
    TALK_DATA_P2P = -2,
    TALK_WEB_NVR = -1,
    TALK_DATA_BOA = 0,
    TALK_DATA_VAPI = 1,
};
    
enum {
    P2P_NVR_SEND_TO_CLIENT = 0,
    P2P_NVR_RECV_FROM_CLIENT = 1,
};
    
typedef struct p2p_twoway_packet{
    int platform;   // 0:NVR   1:CAM
    int chnid;      // Only CAM vaild
    //int sid;        // p2p client main id
    int nSize;
    char data[2048];
}P2P_TWOWAY_PACKET;

/* ms face begin */
typedef enum face_event_state {
    FACE_EVENT_NONE = 0,
    FACE_EVENT_START = 1,
    FACE_EVENT_END = 2
} FACE_EVENT_STATE;

typedef enum FaceCaptureMode {
    FACE_CAPTURE_QUALITY = 0,
    FACE_CAPTURE_TIMELINESS = 1,
    FACE_CAPTURE_CUSTOMIZE = 2,
    FACE_CAPTURE_MAX,
} FACE_CAPTURE_MODE;

typedef struct MsFaceShield {
    int enable;
    MS_POLYGON region;
}MS_FACE_SHIELD;

typedef struct MsFaceShieldOld {
    int enable;
    MS_RECTANGLE region;
}MS_FACE_SHIELD_OLD;

typedef struct MsFaceRule {
    int uploadEnable;
    int uploadFileType;             //0:avi  1:jpg  2:avi&jpg

    int nasEnable;
    int nasFileType;                //0:avi  1:jpg  2:avi&jpg

    int emailEnable;
    int emailFileType;              //Fixed value 1(JPG)

    int httpEnable;
    int httpNotifyInterval;         //range:0-900
    char httpUrl[MAX_LEN_128];
    char httpUser[MAX_LEN_64];
    char httpPassword[MAX_LEN_64];

    int snapshot[FACE_CAPTURE_MAX]; //range:1-5
    int recordSeconds;              //range:5,10,15,20,25,30
    int prerecordSeconds;           //range:0-10
}MS_FACE_RULE;

typedef struct MsFaceConfig {
    int res;
    int chnId;
    int rtspPort;
    char url[MAX_LEN_128];

    int enable;
    int width;                                  //Width of resolution
    int height;                                 //Height of resolution
    int minPixel;                               //minimun detection size 30~800
    int captureMode;                            //capture mode 0:Quality Priority  1:Timeliness Priority  2:Customize
    int captureQuality[FACE_CAPTURE_MAX];       //range:1-100
    int snapshotType;                           //0:Face Only  1:Upper Body  2:Whole Body
    int snapshotInterval;                       //80ms, 200ms, 500ms, 1000ms, 2000ms, 4000ms
    int snapshotBackground;                     //0:No  1:Yes
    int poseYaw;                                //Side Face Angle Limit:0~180
    int poseRoll;                               //Oblique Face Angle Limit:0~180
    int posePitch;                              //Pitching Face Angle Limit:0~180
    int blurLimit;                              //Blur Limit 0~10
    MS_RECTANGLE detectionOld;                  //detection region
    MS_POLYGON detection;
    MS_FACE_RULE rule;
    int postEnable;
    int postType;                               //0:tcp
    MS_FACE_SHIELD_OLD shieldOld[MAX_FACE_SHIELD];
    MS_FACE_SHIELD shield[MAX_FACE_SHIELD];
    int attributeEnable;                        //Enable Attribute Recognition 0:No  1:Yes
    int attributeType;                          //(1<<0 Age) (1<<1 Gender) (1<<2 Glasses) (1<<3 Mask) (1<<4 Cap)
    int mosaicEnable;                           //mosaic 模式
    int mosaicModeStatus;                       //get:[-1:码流不符合; 0:码流符合];             set:[0:不改码流; 1:改为默认码流]
    int mutuallyExclusive;                      //互斥状态      0:互斥功能 关闭;          1:互斥功能 开启
    MS_BOOL isFaceCustomizeModeExists;
    MS_BOOL isNtPlatform; // NtIPC hide Face Privacy
    MS_BOOL ntFaceMosaicSupport;
}MS_FACE_CONFIG;

typedef struct MsData {
    int size;                   //data size
    unsigned char *data;
}MS_DATA;

typedef struct MsFaceImage {
    MS_FACE_PRIVATE attribute;    //private attribute
    MS_DATA img;                  //picture
}MS_FACE_IMAGE;

typedef struct MsFaceAlarm {
    int chnId;
    char time[MAX_LEN_32];                  //触发时间
    MS_U64 pTime;                           //NVR接收时间
    int faceCnt;                          //小图数量
    MS_FACE_IMAGE image[MAX_FACE_CNT];      //小图
    MS_DATA bigImg;                         //大图
    FACE_EVENT_STATE state;
}MS_FACE_ALARM;

struct req_search_face_backup {
    char chnMask[MAX_LEN_65];
    int chnNum;
    unsigned int enMajor;
    unsigned int enMinor;
    char pStartTime[MAX_LEN_32];
    char pEndTime[MAX_LEN_32];
    MS_FACE_PRIVATE filter;
    char ipaddr[MAX_LEN_64];
};

struct resp_search_face_backup {
    int chnId;
    int sid;
    int port;
    int index;
    char pTime[MAX_LEN_32];
    int allCnt;
    int allSize;
    int infoSize;
    int bImgSize;
    int sImgSize;                     //small image size
    MS_FACE_PRIVATE sImgAtrb;         //small image attribute
};

struct req_export_face_backup {
    int sid;
    int index;
    int fileType;                       //0=MP4, 1=AVI, 2=PS
    int streamType;                     //stream Main (1 << FILE_TYPE_MAIN) | Sub (1 << FILE_TYPE_SUB)
    int exportType;                     //log / Video / Picture  value: FACE_EXPORT_TYPE
    char logfileName[MAX_LEN_64];       //FACE_log_20190926205011.csv
    char devPath[MAX_LEN_256];
};
/* ms face end */

typedef struct MsDdnsClientInfo {
    int hPort;                      //http port
    int rPort;                      //rtsp port
    int pPort;                      //playback port
    char ip[MAX_LEN_64];            //wan ip
    char ddns[MAX_LEN_64];
} MS_DDNS_CLIENT_INFO;

struct ReqEnvInfo {
    char sncode[MAX_LEN_SNCODE];
    char ethaddr[MAX_LEN_32];
    char ethaddr2[MAX_LEN_32];
    int notReboot;//for test
};

typedef struct ReqUpdateChn {
    Uint64 chnMask;
} REQ_UPDATE_CHN;


typedef enum{
    SNAPSHOT_ERROR      = -2,//others error
    SNAPSHOT_LIMIT      = -1,//Beyond decoding capacity.
    SNAPSHOT_SUCCESS    = 0,
} SNAPSHOT_RESULT;

struct RespSnapshotChatHeader {
    int chnid;
    SNAPSHOT_RESULT result;
};

struct ReqComPbPlay {
    struct rep_play_common_backup info;
    int actdir; //PB_FORWARD | PB_BACKWARD
    int speed;  //PLAY_SPEED_1X
};

struct RespPbEventRecordInfo {
    int chnid;
    REC_EVENT_EN enEvent;
    char pStartTime[MAX_LEN_20];
    char pEndTime[MAX_LEN_20];
    char source[MAX_LEN_64];
    int port;
};

/*
|- record size -|- pic size -|----- record data ------|------ pic data ------|
|----- int -----|--- int ----|-- MS_SOCKET_RESPONSE --|- MS_SOCKET_RESPONSE -|
|--- @ RespPbGeneralInfo ----|@ rep_play_common_backup| ---------------------|
*/
struct RespPbGeneralInfo {
    int recordSize;
    int picSize;
};

typedef struct ReqIpcReset {
    int chnId;
    Uint8 options; // keepIP: 1 << 0, keepUser: 1 << 1 (disable: 0, enable: 1)
} REQ_IPC_RESET_S;

typedef struct ReqIpcDiagnose {
    int chnId;
    char exportPath[512];
} REQ_IPC_DIAGNOSE_S;

typedef struct FileInfo {
    char *data; // filename[64] + fileSize[4] + isBinary[1] + filecontent
    int filenameSize;
    int fileSize;
    int capacity;
    Uint8 isBinary;
} FILE_INFO_S;

typedef struct ReqIpcCfg {
    int chnId;
    int fileSize;
    char filename[64];
    char pwd[64];
    char exportPath[64];
    int del; // 0: don't delete cfg, 1: delete cfg
} REQ_IPC_CFG_S;

typedef struct ReqIpcLog {
    int chnId;
    IPC_LOG_MAIN_E mainType;
    IPC_LOG_SUB_E subType;
    char startTime[32];
    char endTime[32];
    char exportPath[64];
    int fileSize;
} REQ_IPC_LOG_S;

typedef struct IpcAudioAlarm {
    int chnId;
    int alarmEnable;
    int alarmThreshold;
    int sampleValue;
    char copyChn[MAX_LEN_65];
} IPC_AUDIO_ALARM_S;

typedef struct RespIpcAlarmstatus {
    Uint64 respStatus;
    Uint64 alarmstatuses[MAX_REAL_CAMERA];
} RESP_IPC_ALARMSTATUS_S;

typedef struct IpcImageDaynightSche {
    MS_BOOL isValid;
    int startHour;
    int startMin;
    int endHour;
    int endMin;
    int templateId;
} IPC_IMAGE_DAYNIGHT_SCHE_S;

typedef struct IpcIamgeSetting {
    IPC_IMAGE_DAYNIGHT_SCHE_S dnSche[IPC_SCHE_TEN_SECTIONS];
    IPC_IMAGE_LENS_E lensType;
} IPC_IMAGE_SETTING_S;

typedef struct IpcPtzWiper {
    int chnId;
    int status;//0:off 1:auto 2:mauanl
    int autoWiper;//0:disable 1:enable
    int manualWiper;//0:disable 1:enable
    int wiperSupport;
    char copyChn[MAX_LEN_65];
} IPC_PTZ_WIPER_S;

typedef struct IpcPtzAutoHome {
    int chnId;
    int autoHomeEnable;//0:disable 1:enable
    int latencyTime;//5~720
    int autoHomeMode;//0:preset //only 0
    int autoHomeModeNumber;//0~300 Current Location:0
    struct resp_ptz_preset preset[PRESET_MAX];
    int ptzSupport;
    int wiperSupport;
} IPC_PTZ_AUTO_HOME_S;

typedef struct IpcPtzInitialPosition {
    int chnId;
    int positionCmd;//0:set 1:clear 2:call
} IPC_PTZ_INITIAL_POSITION_S;

/*
bit0 : Clear All Presets
bit1 : Clear All Patrols
bit2 : Clear All Patterns
bit3 : Clear All Auto Homes
bit4 : Clear All Ptz Limits
bit5 : Clear All Scheduled Tasks
bit6 : Clear All Privacy Masks
bit7 : Clear Initial Position
bit8 : Clear All Track
*/
typedef struct IpcPtzConfigClear {
    int chnId;
    int clearMask;
    char copyChn[MAX_LEN_65];
} IPC_PTZ_CONFIG_CLEAR_S;

typedef struct IpcPtzLimitINFO {
    int chnId;
    int limitMode;//0:Manual Limit 1:Scan LImit
    int manualLimitEnable;//0:No 1:Yes
    int manualLimitStatus;//0:Not Limited 1:Limited
    int manualLimited;//0:left 1:right 2:up 3:down
    int scanLimitEnable;
    int scanLimitStatus;
    int scanLimited;
    int ptzSupport;
    int speedOrMiniPtzDemoSupport;
} IPC_PTZ_LIMIT_INFO_S;

typedef enum {
    PTZ_LIMITS_NONE = 0,
    PTZ_LIMITS_MANUAL_LIMIT_ENABLE,
    PTZ_LIMITS_MANUAL_CLEAR_ALL,
    PTZ_LIMITS_MANUAL_SET_LEFT,
    PTZ_LIMITS_MANUAL_SET_RIGHT,
    PTZ_LIMITS_MANUAL_SET_UP,
    PTZ_LIMITS_MANUAL_SET_DOWN,
    PTZ_LIMITS_SCAN_LIMIT_ENABLE,
    PTZ_LIMITS_SCAN_CLEAR_ALL,
    PTZ_LIMITS_SCAN_SET_LEFT,
    PTZ_LIMITS_SCAN_SET_RIGHT,
    PTZ_LIMITS_SCAN_SET_UP,
    PTZ_LIMITS_SCAN_SET_DOWN,
    PTZ_LIMITS_TYPE_MAX,
} PTZ_LIMITS_TYPE;

typedef struct IpcPtzLimitControl {
    int chnId;
    PTZ_LIMITS_TYPE limitType;
    int setValue;//0:clear 1:set(type为clear all时，1:clear）
} IPC_PTZ_LIMIT_CONTROL_S;

typedef enum {
    PTZ_SCHE_CLOSE = 0,
    PTZ_SCHE_AUTO_SCAN,
    PTZ_SCHE_PRESET,
    PTZ_SCHE_PATROL,
    PTZ_SCHE_PATTERN,
    PTZ_SCHE_CHECK,
    PTZ_SCHE_TILT_SCAN,
    PTZ_SCHE_PANORAMA_SCAN,
    PTZ_SCHE_TYPE_MAX,
} PTZ_SCHE_TYPE;
typedef struct IpcPtzScheTaskItem {
    MS_BOOL isValid;
    int startHour;
    int startMin;
    int endHour;
    int endMin;
    PTZ_SCHE_TYPE type;
    int templateId;
} IPC_PTZ_SCHE_TASK_ITEM_S;

typedef struct IpcPtzScheTaskDay {
    IPC_PTZ_SCHE_TASK_ITEM_S scheItem[MAX_PLAN_NUM_PER_DAY];
} IPC_PTZ_SCHE_TASK_DAY_S;

typedef struct IpcPtzScheTaskWeek {
   IPC_PTZ_SCHE_TASK_DAY_S scheDay[MAX_DAY_NUM_IPC];
} IPC_PTZ_SCHE_TASK_WEEK_S;

typedef struct IpcPtzScheTaskInfo {
    int chnId;
    int scheTaskEnable;
    int recoveryTime;//5~720
    IPC_PTZ_SCHE_TASK_WEEK_S schedule;
    int ptzSupport;
    int wiperSupport;
    int speedDomeSupport;
    char copyChn[MAX_LEN_65];
} IPC_PTZ_SCHE_TASK_INFO_S;

typedef struct IpcPtzCapInfo {
    int chnId;
    //bit0:colse bit1:auto scan bit2:preset bit3:partorl bit4:pattern bit5:selfCheck bit6:tiltScan bit7:panoramaScan
    int scheduleTypeSupport;
} IPC_PTZ_CAP_INFO_S;

typedef enum {
    IPC_PTZ_CONTORL_NONE,
    IPC_PTZ_CONTORL_DEHUMIDIFYING,
    IPC_PTZ_CONTORL_AUTO_IRIS,
    IPC_PTZ_CONTORL_ONE_TOUCH_PATROL,
    IPC_PTZ_CONTORL_AUTO_HOME,
    IPC_PTZ_CONTORL_WIPER,
    IPC_PTZ_CONTORL_CALL_PRESET,
    IPC_PTZ_CONTORL_MAX,
} IPC_PTZ_CONTORL_TYPE;

typedef struct IpcPtzControl {
    int chnId;
    IPC_PTZ_CONTORL_TYPE controlType;
    int controlAction;//0: stop 1: start//call preset:0~300
} IPC_PTZ_CONTROL_S;

typedef struct IpcPtzPanelStatus {
    int chnId;
    int irisMode;
    int onePatrol;
    int autoHome;
    int manualDefog;
    int manualWiper;
    int wiperSupport;
    int defogSupport;
} IPC_PTZ_PANEL_STATUS_S;

typedef struct ReqPushmsgPictures {
    Uint64 chnMask;
    time_t time;
    int width;
    int height;
} REQ_PUSHMSG_PICTURES_S;

struct req_network_keyboard {
    char ip_addr[MAX_LEN_64];
    char password[MAX_LEN_64];
};

struct get_network_keyboard_info {
    int keyboardCount;
    struct req_network_keyboard keyboards[MAX_LEN_128];
};

typedef enum {
    IPC_BLC_REGION_OFF = 0,
    IPC_BLC_REGION_CUSTOMIZE,
    IPC_BLC_REGION_CENTER,
} IPC_BLC_REGION_E;

typedef enum {
    IPC_BLC_REGION_RANGE_INCLUSIVE = 0,
    IPC_BLC_REGION_RANGE_EXCLUSIVE,
} IPC_BLC_REGION_RANGE_E;

typedef enum {
    IPC_WDR_MODE_OFF,
    IPC_WDR_MODE_ON,
    IPC_WDR_MODE_CUSTOMIZE,
} IPC_WDR_MODE_E;

typedef enum {
    IPC_WDR_LEVEL_HC_LOW = 0,
    IPC_WDR_LEVEL_AC_LOW = IPC_WDR_LEVEL_HC_LOW,
    IPC_WDR_LEVEL_HC_HIGH = 1,
    IPC_WDR_LEVEL_AC_MEDIUM = IPC_WDR_LEVEL_HC_HIGH,
    IPC_WDR_LEVEL_HC_AUTO = 2,
    IPC_WDR_LEVEL_AC_HIGH = IPC_WDR_LEVEL_HC_AUTO,
} IPC_WDR_LEVEL_E;

typedef enum {
    IPC_HLC_MODE_OFF = 0,
    IPC_HLC_MODE_GENERAL,
    IPC_HLC_MODE_ENHANCE,
} IPC_HLC_MODE_E;

typedef struct ImageEnhancementScene {
    int irBalanceMode; // 0: disable, 1: enable
    int reduceMotionBlur; // 0: disable, 1: enable
    int deblur;
    int defogMode; // 0: disable, 1: enable
    int antiFogIntensity;

    IPC_WHITEBALANCE_MODE_E whitebalanceMode;
    int whitebalanceRedGain;
    int whitebalanceBlueGain;

    IPC_EXPOSURE_MODE_E exposureMode;
    IPC_EXPOSURE_TIME_E exposureTime;
    int exposureGain;

    IPC_BLC_REGION_E blcRegion;
    IPC_BLC_REGION_RANGE_E blcRegionRange;
    char blcRegionArea[32];

    IPC_WDR_MODE_E wdrMode;
    int wdrStartHour;
    int wdrStartMin;
    int wdrEndHour;
    int wdrEndMin;
    IPC_WDR_LEVEL_E wdrLevel;

    IPC_HLC_MODE_E hlcMode;
    int hlcLevel;
} IMAGE_ENHANCEMENT_SCENE_S;

typedef struct ImageEnhancementMulti {
    IMAGE_ENHANCEMENT_SCENE_S scenes[1];
} IMAGE_ENHANCEMENT_MULTI_S;

struct resp_image_enhancement {
    int id;
    IPC_IMAGE_TYPE_E type;
    union {
        struct image_enhancement image;
        IMAGE_ENHANCEMENT_MULTI_S imgMulti;
    };
};

struct req_image_enhancement {
    int chnid;
    IPC_IMAGE_TYPE_E type;
    union {
        struct image_enhancement image;
        IMAGE_ENHANCEMENT_MULTI_S imgMulti;
    };
};

struct req_image_enhancement_batch {
    int chnid[MAX_CAMERA]; ///< channel
    IPC_IMAGE_TYPE_E type;
    union {
        struct image_enhancement image;
        IMAGE_ENHANCEMENT_MULTI_S imgMulti;
    };
};

typedef struct ImageSplicedistance {
    int chnId;
    double distance;
} IMAGE_SPILCEDISTANCE_S;

typedef struct ReqdiskHMLog {
    int port;
    char exportPath[64];
    int fileSize;
} REQ_DISKHM_LOG_S;

typedef struct FileDiskHMInfo {
    char *data;
    char filename[64];
    int fileSize;
    int capacity;
} FILE_DISKHM_Info_S;

typedef struct MsVcaPrivate {
    SMART_EVENT_TYPE event;
    DETEC_OBJ_EN dec;
}MS_VCA_PRIVATE;

#endif //_MS_MSG_H_
