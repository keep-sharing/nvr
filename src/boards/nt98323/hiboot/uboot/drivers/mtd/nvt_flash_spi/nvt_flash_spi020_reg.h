/*
    @file	nand_reg.h
    @ingroup	mICardSMC

    @brief	Nand flash / Smartmedia Card driver register definition

    @note

    @version	V1.00.000
    @author	Cliff Lin
    @date	2009/05/19

    Copyright	Novatek Microelectronics Corp. 2009.  All rights reserved.

*/

#ifndef _NAND_REG_H
#define _NAND_REG_H

#include <asm/nvt-common/rcw_macro.h>

/*
    SPI_LATCHDELAY_ENUM
*/
typedef enum {
	ADDR_LEN_NONE,                      //< No flash address state
	ADDR_LEN_1BYTE,                     //< 1 byte
	ADDR_LEN_2BYTES,                    //< 2 bytes
	ADDR_LEN_3BYTES,                    //< 3 bytes
	ADDR_LEN_4BYTES,                    //< 4 bytes

	ENUM_DUMMY4WORD(SPI_LATCHDELAY_ENUM)
} ADDR_LEN_ENUM;

/*
    RD_STS_MODE_ENUM
*/
typedef enum {
	RD_STS_MODE_BY_HW,
	RD_STS_MODE_BY_SW,

	ENUM_DUMMY4WORD(RD_STS_MODE_ENUM)
} RD_STS_MODE_ENUM;

#define DUMMY_CYCLES_MAX            (32)

#define MAX_FIFO_DEPTH              (32)    // unit: byte

#define CMD_QUEUE_1ST_REG_OFS       0x00
REGDEF_BEGIN(CMD_QUEUE_1ST_REG)
REGDEF_BIT(FLASH_ADDR, 32)
REGDEF_END(CMD_QUEUE_1ST_REG)

#define CMD_QUEUE_2ND_REG_OFS       0x04
REGDEF_BEGIN(CMD_QUEUE_2ND_REG)
REGDEF_BIT(ADDR_LEN, 3)
REGDEF_BIT(, 13)
REGDEF_BIT(DUMMY_CYCLES, 8)
REGDEF_BIT(INSTRUCTION_LEN, 2)
REGDEF_BIT(, 2)
REGDEF_BIT(CONTI_MODE_EN, 1)
REGDEF_BIT(, 3)
REGDEF_END(CMD_QUEUE_2ND_REG)

#define CMD_QUEUE_3RD_REG_OFS       0x08
REGDEF_BEGIN(CMD_QUEUE_3RD_REG)
REGDEF_BIT(DATA_COUNTER, 32)
REGDEF_END(CMD_QUEUE_3RD_REG)

#define CMD_QUEUE_4TH_REG_OFS       0x0C
REGDEF_BEGIN(CMD_QUEUE_4TH_REG)
REGDEF_BIT(, 1)
REGDEF_BIT(WRITE_EN, 1)
REGDEF_BIT(RD_STS_EN, 1)
REGDEF_BIT(RD_STS_MODE, 1)
REGDEF_BIT(DTR_MODE, 1)
REGDEF_BIT(SPI_OPERATE_MODE, 3)
REGDEF_BIT(CS_SEL, 2)
REGDEF_BIT(, 6)
REGDEF_BIT(CONTI_MODE_CODE, 8)
REGDEF_BIT(INSTRUCTION_CODE, 8)
REGDEF_END(CMD_QUEUE_4TH_REG)

#define FLASH_CONTROL_REG_OFS       0x10
REGDEF_BEGIN(FLASH_CONTROL_REG)
REGDEF_BIT(CLK_DIV, 2)
REGDEF_BIT(, 2)
REGDEF_BIT(SPI_MODE, 1)
REGDEF_BIT(, 3)
REGDEF_BIT(ABORT, 1)
REGDEF_BIT(, 7)
REGDEF_BIT(RD_STS_LOC, 3)
REGDEF_BIT(, 1)
REGDEF_BIT(DRAM_PORT_SEL, 1)
REGDEF_BIT(, 11)
REGDEF_END(FLASH_CONTROL_REG)

#define FLASH_AC_TIMING_REG_OFS     0x14
REGDEF_BEGIN(FLASH_AC_TIMING_REG)
REGDEF_BIT(CS_DELAY, 4)
REGDEF_BIT(, 28)
REGDEF_END(FLASH_AC_TIMING_REG)

#define FLASH_STATUS_REG_OFS        0x18
REGDEF_BEGIN(FLASH_STATUS_REG)
REGDEF_BIT(TX_FIFO_EMPTY, 1)
REGDEF_BIT(RX_FIFO_FULL, 1)
REGDEF_BIT(, 30)
REGDEF_END(FLASH_STATUS_REG)

#define INT_CTRL_REG_OFS            0x20
REGDEF_BEGIN(INT_CTRL_REG)
REGDEF_BIT(DMA_EN, 1)
REGDEF_BIT(INT_EN, 1)
REGDEF_BIT(, 6)
REGDEF_BIT(TXFIFO_THOD, 2)
REGDEF_BIT(, 2)
REGDEF_BIT(RXFIFO_THOD, 2)
REGDEF_BIT(, 18)
REGDEF_END(INT_CTRL_REG)

#define INT_STS_REG_OFS             0x24
REGDEF_BEGIN(INT_STS_REG)
REGDEF_BIT(COMPLETE_STS, 1)
REGDEF_BIT(, 31)
REGDEF_END(INT_STS_REG)

#define FLASH_READ_STS_REG_OFS      0x28
REGDEF_BEGIN(FLASH_READ_STS_REG)
REGDEF_BIT(READ_STATUS, 8)
REGDEF_BIT(, 24)
REGDEF_END(FLASH_READ_STS_REG)


#define DLY_CHAIN_REG_OFS           0x60
REGDEF_BEGIN(DLY_CHAIN_REG)
REGDEF_BIT(CLK_PAD_DLY,4)
REGDEF_BIT(reserved0,4)
REGDEF_BIT(DATA_IN_DLY,4)
REGDEF_BIT(reserved1,4)
REGDEF_BIT(RX_CLK_SEL,1)
REGDEF_BIT(RX_SAMPLE_EDGE,1)
REGDEF_BIT(reserved2,6)
REGDEF_BIT(RX_INT_SEL,6)
REGDEF_BIT(reserved3,2)
REGDEF_END(DLY_CHAIN_REG)

#define CHKSUM_CTRL_REG_OFS         0x64
REGDEF_BEGIN(CHKSUM_CTRL_REG)
REGDEF_BIT(WFIFO_CHKSUM_EN, 1)
REGDEF_BIT(, 3)
REGDEF_BIT(WFIFO_CHKSUM_CLR, 1)
REGDEF_BIT(, 3)
REGDEF_BIT(RFIFO_CHKSUM_EN, 1)
REGDEF_BIT(, 3)
REGDEF_BIT(RFIFO_CHKSUM_CLR, 1)
REGDEF_BIT(, 19)
REGDEF_END(CHKSUM_CTRL_REG)

#define WFIFO_CHKSUM_REG_OFS        0x68
REGDEF_BEGIN(WFIFO_CHKSUM_REG)
REGDEF_BIT(CHKSUM, 32)
REGDEF_END(WFIFO_CHKSUM_REG)

#define RFIFO_CHKSUM_REG_OFS        0x6C
REGDEF_BEGIN(RFIFO_CHKSUM_REG)
REGDEF_BIT(CHKSUM, 32)
REGDEF_END(RFIFO_CHKSUM_REG)

#define FLASH_DATA_PORT_REG_OFS     0x100
REGDEF_BEGIN(FLASH_DATA_PORT_REG)
REGDEF_BIT(DATA, 32)
REGDEF_END(FLASH_DATA_PORT_REG)
#endif

